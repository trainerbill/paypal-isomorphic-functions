!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.paypalFunctions=e():t.paypalFunctions=e()}(window,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=5)}([function(t,e,r){"use strict";(function(t){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=n(r(13)),i=r(18);e.CONFIG=new Map,i.isNode?(e.CONFIG.set("PAYPAL_CLIENT_ID",t.env.PAYPAL_CLIENT_ID),e.CONFIG.set("PAYPAL_CLIENT_SECRET",t.env.PAYPAL_CLIENT_SECRET),e.CONFIG.set("PAYPAL_ENVIRONMENT",t.env.PAYPAL_ENVIRONMENT),e.CONFIG.set("PAYPAL_ACCOUNT_ID",t.env.PAYPAL_ACCOUNT_ID),e.CONFIG.set("PAYPAL_REST_BEARER",o.default(`${t.env.PAYPAL_CLIENT_ID}:${t.env.PAYPAL_CLIENT_SECRET}`))):i.isBrowser&&(e.CONFIG.set("PAYPAL_CLIENT_ID",window.localStorage.getItem("PAYPAL_CLIENT_ID")),e.CONFIG.set("PAYPAL_CLIENT_SECRET",window.localStorage.getItem("PAYPAL_CLIENT_SECRET")),e.CONFIG.set("PAYPAL_ENVIRONMENT",window.localStorage.getItem("PAYPAL_ENVIRONMENT")),e.CONFIG.set("PAYPAL_ACCOUNT_ID",window.localStorage.getItem("PAYPAL_ACCOUNT_ID")),e.CONFIG.set("PAYPAL_REST_BEARER",window.btoa(`${window.localStorage.getItem("PAYPAL_CLIENT_ID")}:${window.localStorage.getItem("PAYPAL_CLIENT_SECRET")}`))),e.CONFIG.set("PAYPAL_REST_HOSTNAME","production"===e.CONFIG.get("PAYPAL_ENVIRONMENT")?"https://api.paypal.com":"https://api.sandbox.paypal.com")}).call(this,r(1))},function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(t){n=s}}();var u,c=[],f=!1,h=-1;function l(){f&&u&&(f=!1,u.length?c=u.concat(c):h=-1,c.length&&p())}function p(){if(!f){var t=a(l);f=!0;for(var e=c.length;e;){for(u=c,c=[];++h<e;)u&&u[h].run();h=-1,e=c.length}u=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new d(t,e)),1!==c.length||f||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.randomString=function(){return(1e18*Math.random()).toString(36)},e.randomAmount=function(){return Math.floor(100*Math.random())+1},e.randomAmountasString=function(){return`${Math.floor(100*Math.random())+1}.00`}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0);e.createAccessToken=async function(){const t={method:"POST",headers:{Accept:"application/json","Accept-Language":"en_US",Authorization:`Basic ${n.CONFIG.get("PAYPAL_REST_BEARER")}`,"Content-Type":"application/x-www-form-urlencoded"},body:"grant_type=client_credentials&response_type=token"},e=await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/oauth2/token`,t),r=await e.json();return r.expires_at=Date.now()+r.expires_in,r}},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0}),r(6),r(11);const o=n(r(3));e.Utils=o;const i=n(r(12));e.Orders=i;const s=n(r(20));e.BillingAgreements=s;const a=n(r(4));e.Oauth=a;const u=n(r(22));e.Payments=u;const c=n(r(26));e.Webhooks=c;const f=n(r(27));e.Middleware=f;const h=n(r(28));e.Partner=h},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(7),r(9)},function(t,e,r){r(8),t.exports=self.fetch.bind(self)},function(t,e,r){"use strict";r.r(e),r.d(e,"Headers",(function(){return c})),r.d(e,"Request",(function(){return _})),r.d(e,"Response",(function(){return g})),r.d(e,"DOMException",(function(){return E})),r.d(e,"fetch",(function(){return v}));var n={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(n.arrayBuffer)var o=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],i=ArrayBuffer.isView||function(t){return t&&o.indexOf(Object.prototype.toString.call(t))>-1};function s(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function a(t){return"string"!=typeof t&&(t=String(t)),t}function u(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return n.iterable&&(e[Symbol.iterator]=function(){return e}),e}function c(t){this.map={},t instanceof c?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function f(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function h(t){return new Promise((function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}}))}function l(t){var e=new FileReader,r=h(e);return e.readAsArrayBuffer(t),r}function p(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function d(){return this.bodyUsed=!1,this._initBody=function(t){var e;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:n.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:n.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():n.arrayBuffer&&n.blob&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=p(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):n.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||i(t))?this._bodyArrayBuffer=p(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n.blob&&(this.blob=function(){var t=f(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?f(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(l)}),this.text=function(){var t,e,r,n=f(this);if(n)return n;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,r=h(e),e.readAsText(t),r;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},n.formData&&(this.formData=function(){return this.text().then(A)}),this.json=function(){return this.text().then(JSON.parse)},this}c.prototype.append=function(t,e){t=s(t),e=a(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},c.prototype.delete=function(t){delete this.map[s(t)]},c.prototype.get=function(t){return t=s(t),this.has(t)?this.map[t]:null},c.prototype.has=function(t){return this.map.hasOwnProperty(s(t))},c.prototype.set=function(t,e){this.map[s(t)]=a(e)},c.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},c.prototype.keys=function(){var t=[];return this.forEach((function(e,r){t.push(r)})),u(t)},c.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),u(t)},c.prototype.entries=function(){var t=[];return this.forEach((function(e,r){t.push([r,e])})),u(t)},n.iterable&&(c.prototype[Symbol.iterator]=c.prototype.entries);var y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function _(t,e){var r,n,o=(e=e||{}).body;if(t instanceof _){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new c(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,o||null==t._bodyInit||(o=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new c(e.headers)),this.method=(r=e.method||this.method||"GET",n=r.toUpperCase(),y.indexOf(n)>-1?n:r),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function A(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}})),e}function g(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new c(e.headers),this.url=e.url||"",this._initBody(t)}_.prototype.clone=function(){return new _(this,{body:this._bodyInit})},d.call(_.prototype),d.call(g.prototype),g.prototype.clone=function(){return new g(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new c(this.headers),url:this.url})},g.error=function(){var t=new g(null,{status:0,statusText:""});return t.type="error",t};var m=[301,302,303,307,308];g.redirect=function(t,e){if(-1===m.indexOf(e))throw new RangeError("Invalid status code");return new g(null,{status:e,headers:{location:t}})};var E=self.DOMException;try{new E}catch(t){(E=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),E.prototype.constructor=E}function v(t,e){return new Promise((function(r,o){var i=new _(t,e);if(i.signal&&i.signal.aborted)return o(new E("Aborted","AbortError"));var s=new XMLHttpRequest;function a(){s.abort()}s.onload=function(){var t,e,n={status:s.status,statusText:s.statusText,headers:(t=s.getAllResponseHeaders()||"",e=new c,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}})),e)};n.url="responseURL"in s?s.responseURL:n.headers.get("X-Request-URL");var o="response"in s?s.response:s.responseText;r(new g(o,n))},s.onerror=function(){o(new TypeError("Network request failed"))},s.ontimeout=function(){o(new TypeError("Network request failed"))},s.onabort=function(){o(new E("Aborted","AbortError"))},s.open(i.method,i.url,!0),"include"===i.credentials?s.withCredentials=!0:"omit"===i.credentials&&(s.withCredentials=!1),"responseType"in s&&n.blob&&(s.responseType="blob"),i.headers.forEach((function(t,e){s.setRequestHeader(e,t)})),i.signal&&(i.signal.addEventListener("abort",a),s.onreadystatechange=function(){4===s.readyState&&i.signal.removeEventListener("abort",a)}),s.send(void 0===i._bodyInit?null:i._bodyInit)}))}v.polyfill=!0,self.fetch||(self.fetch=v,self.Headers=c,self.Request=_,self.Response=g)},function(t,e,r){"use strict";t.exports=r(10).polyfill()},function(t,e,r){(function(e,r){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */var n;n=function(){"use strict";function t(t){return"function"==typeof t}var n=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},o=0,i=void 0,s=void 0,a=function(t,e){d[o]=t,d[o+1]=e,2===(o+=2)&&(s?s(y):E())},u="undefined"!=typeof window?window:void 0,c=u||{},f=c.MutationObserver||c.WebKitMutationObserver,h="undefined"==typeof self&&void 0!==e&&"[object process]"==={}.toString.call(e),l="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function p(){var t=setTimeout;return function(){return t(y,1)}}var d=new Array(1e3);function y(){for(var t=0;t<o;t+=2)(0,d[t])(d[t+1]),d[t]=void 0,d[t+1]=void 0;o=0}var _,A,g,m,E=void 0;function v(t,e){var r=this,n=new this.constructor(w);void 0===n[T]&&D(n);var o=r._state;if(o){var i=arguments[o-1];a((function(){return Y(o,n,i,r._result)}))}else B(r,n,t,e);return n}function b(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(w);return N(e,t),e}h?E=function(){return e.nextTick(y)}:f?(A=0,g=new f(y),m=document.createTextNode(""),g.observe(m,{characterData:!0}),E=function(){m.data=A=++A%2}):l?((_=new MessageChannel).port1.onmessage=y,E=function(){return _.port2.postMessage(0)}):E=void 0===u?function(){try{var t=Function("return this")().require("vertx");return void 0!==(i=t.runOnLoop||t.runOnContext)?function(){i(y)}:p()}catch(t){return p()}}():p();var T=Math.random().toString(36).substring(2);function w(){}var P=void 0,O=1,S=2;function R(e,r,n){r.constructor===e.constructor&&n===v&&r.constructor.resolve===b?function(t,e){e._state===O?L(t,e._result):e._state===S?I(t,e._result):B(e,void 0,(function(e){return N(t,e)}),(function(e){return I(t,e)}))}(e,r):void 0===n?L(e,r):t(n)?function(t,e,r){a((function(t){var n=!1,o=function(t,e,r,n){try{t.call(e,r,n)}catch(t){return t}}(r,e,(function(r){n||(n=!0,e!==r?N(t,r):L(t,r))}),(function(e){n||(n=!0,I(t,e))}),t._label);!n&&o&&(n=!0,I(t,o))}),t)}(e,r,n):L(e,r)}function N(t,e){if(t===e)I(t,new TypeError("You cannot resolve a promise with itself"));else if(o=typeof(n=e),null===n||"object"!==o&&"function"!==o)L(t,e);else{var r=void 0;try{r=e.then}catch(e){return void I(t,e)}R(t,e,r)}var n,o}function C(t){t._onerror&&t._onerror(t._result),U(t)}function L(t,e){t._state===P&&(t._result=e,t._state=O,0!==t._subscribers.length&&a(U,t))}function I(t,e){t._state===P&&(t._state=S,t._result=e,a(C,t))}function B(t,e,r,n){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+O]=r,o[i+S]=n,0===i&&t._state&&a(U,t)}function U(t){var e=t._subscribers,r=t._state;if(0!==e.length){for(var n=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)n=e[s],o=e[s+r],n?Y(r,n,o,i):o(i);t._subscribers.length=0}}function Y(e,r,n,o){var i=t(n),s=void 0,a=void 0,u=!0;if(i){try{s=n(o)}catch(t){u=!1,a=t}if(r===s)return void I(r,new TypeError("A promises callback cannot return that same promise."))}else s=o;r._state!==P||(i&&u?N(r,s):!1===u?I(r,a):e===O?L(r,s):e===S&&I(r,s))}var M=0;function D(t){t[T]=M++,t._state=void 0,t._result=void 0,t._subscribers=[]}var j=function(){function t(t,e){this._instanceConstructor=t,this.promise=new t(w),this.promise[T]||D(this.promise),n(e)?(this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?L(this.promise,this._result):(this.length=this.length||0,this._enumerate(e),0===this._remaining&&L(this.promise,this._result))):I(this.promise,new Error("Array Methods must be provided an Array"))}return t.prototype._enumerate=function(t){for(var e=0;this._state===P&&e<t.length;e++)this._eachEntry(t[e],e)},t.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,n=r.resolve;if(n===b){var o=void 0,i=void 0,s=!1;try{o=t.then}catch(t){s=!0,i=t}if(o===v&&t._state!==P)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(r===x){var a=new r(w);s?I(a,i):R(a,t,o),this._willSettleAt(a,e)}else this._willSettleAt(new r((function(e){return e(t)})),e)}else this._willSettleAt(n(t),e)},t.prototype._settledAt=function(t,e,r){var n=this.promise;n._state===P&&(this._remaining--,t===S?I(n,r):this._result[e]=r),0===this._remaining&&L(n,this._result)},t.prototype._willSettleAt=function(t,e){var r=this;B(t,void 0,(function(t){return r._settledAt(O,e,t)}),(function(t){return r._settledAt(S,e,t)}))},t}(),x=function(){function e(t){this[T]=M++,this._result=this._state=void 0,this._subscribers=[],w!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof e?function(t,e){try{e((function(e){N(t,e)}),(function(e){I(t,e)}))}catch(e){I(t,e)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return e.prototype.catch=function(t){return this.then(null,t)},e.prototype.finally=function(e){var r=this.constructor;return t(e)?this.then((function(t){return r.resolve(e()).then((function(){return t}))}),(function(t){return r.resolve(e()).then((function(){throw t}))})):this.then(e,e)},e}();return x.prototype.then=v,x.all=function(t){return new j(this,t).promise},x.race=function(t){var e=this;return n(t)?new e((function(r,n){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(r,n)})):new e((function(t,e){return e(new TypeError("You must pass an array to race."))}))},x.resolve=b,x.reject=function(t){var e=new this(w);return I(e,t),e},x._setScheduler=function(t){s=t},x._setAsap=function(t){a=t},x._asap=a,x.polyfill=function(){var t=void 0;if(void 0!==r)t=r;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var n=null;try{n=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===n&&!e.cast)return}t.Promise=x},x.Promise=x,x},t.exports=n()}).call(this,r(1),r(2))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0),o=r(19);e.create=async function(t,e,r){const i=e&&Object.keys(e).length>0?e:o.DEFAULT_CREATE_ORDER_PAYLOAD,s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/checkout/orders`,s)},e.update=async function(t,e,r,i){const s=r&&Object.keys(r).length>0?r:o.DEFAULT_UPDATE_ORDER_PAYLOAD,a={method:"PATCH",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...i},body:JSON.stringify(s)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/checkout/orders/${e}`,a)},e.get=async function(t,e,r){const o={method:"GET",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r}};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/checkout/orders/${e}`,o)},e.authorize=async function(t,e,r,o){const i=r,s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...o},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/checkout/orders/${e}/authorize`,s)},e.capture=async function(t,e,r,o){const i=r,s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...o},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/checkout/orders/${e}/capture`,s)}},function(t,e,r){(function(e){!function(){"use strict";t.exports=function(t){return(t instanceof e?t:e.from(t.toString(),"binary")).toString("base64")}}()}).call(this,r(14).Buffer)},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(15),o=r(16),i=r(17);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return c(this,t,e,r)}function c(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=l(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(e,r),o=(t=a(t,n)).write(e,r);o!==n&&(t=t.slice(0,o));return t}(t,e,r):function(t,e){if(u.isBuffer(e)){var r=0|p(e.length);return 0===(t=a(t,r)).length?t:(e.copy(t,0,0,r),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?a(t,0):l(t,e);if("Buffer"===e.type&&i(e.data))return l(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function f(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(f(e),t=a(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function l(t,e){var r=e.length<0?0:0|p(e.length);t=a(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function p(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return k(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return $(t).length;default:if(n)return k(t).length;e=(""+e).toLowerCase(),n=!0}}function y(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return C(this,e,r);case"utf8":case"utf-8":return O(this,e,r);case"ascii":return R(this,e,r);case"latin1":case"binary":return N(this,e,r);case"base64":return P(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return L(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function _(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function A(t,e,r,n,o){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(o)return-1;r=t.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:g(t,e,r,n,o);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):g(t,[e],r,n,o);throw new TypeError("val must be string, number or Buffer")}function g(t,e,r,n,o){var i,s=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,r/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(o){var f=-1;for(i=r;i<a;i++)if(c(t,i)===c(e,-1===f?0:i-f)){if(-1===f&&(f=i),i-f+1===u)return f*s}else-1!==f&&(i-=i-f),f=-1}else for(r+u>a&&(r=a-u),i=r;i>=0;i--){for(var h=!0,l=0;l<u;l++)if(c(t,i+l)!==c(e,l)){h=!1;break}if(h)return i}return-1}function m(t,e,r,n){r=Number(r)||0;var o=t.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[r+s]=a}return s}function E(t,e,r,n){return G(k(e,t.length-r),t,r,n)}function v(t,e,r,n){return G(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function b(t,e,r,n){return v(t,e,r,n)}function T(t,e,r,n){return G($(e),t,r,n)}function w(t,e,r,n){return G(function(t,e){for(var r,n,o,i=[],s=0;s<t.length&&!((e-=2)<0);++s)r=t.charCodeAt(s),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(e,t.length-r),t,r,n)}function P(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function O(t,e,r){r=Math.min(t.length,r);for(var n=[],o=e;o<r;){var i,s,a,u,c=t[o],f=null,h=c>239?4:c>223?3:c>191?2:1;if(o+h<=r)switch(h){case 1:c<128&&(f=c);break;case 2:128==(192&(i=t[o+1]))&&(u=(31&c)<<6|63&i)>127&&(f=u);break;case 3:i=t[o+1],s=t[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(f=u);break;case 4:i=t[o+1],s=t[o+2],a=t[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(f=u)}null===f?(f=65533,h=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),o+=h}return function(t){var e=t.length;if(e<=S)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=S));return r}(n)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,r){return c(null,t,e,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,r){return function(t,e,r,n){return f(e),e<=0?a(t,e):void 0!==r?"string"==typeof n?a(t,e).fill(r,n):a(t,e).fill(r):a(t,e)}(null,t,e,r)},u.allocUnsafe=function(t){return h(null,t)},u.allocUnsafeSlow=function(t){return h(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),o=0;for(r=0;r<t.length;++r){var s=t[r];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,o),o+=s.length}return n},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)_(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)_(this,e,e+3),_(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)_(this,e,e+7),_(this,e+1,e+6),_(this,e+2,e+5),_(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?O(this,0,t):y.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,r,n,o){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),e<0||r>t.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&e>=r)return 0;if(n>=o)return-1;if(e>=r)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0),a=Math.min(i,s),c=this.slice(n,o),f=t.slice(e,r),h=0;h<a;++h)if(c[h]!==f[h]){i=c[h],s=f[h];break}return i<s?-1:s<i?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return A(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return A(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-e;if((void 0===r||r>o)&&(r=o),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return m(this,t,e,r);case"utf8":case"utf-8":return E(this,t,e,r);case"ascii":return v(this,t,e,r);case"latin1":case"binary":return b(this,t,e,r);case"base64":return T(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return w(this,t,e,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function R(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(127&t[o]);return n}function N(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(t[o]);return n}function C(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=e;i<r;++i)o+=F(t[i]);return o}function L(t,e,r){for(var n=t.slice(e,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function I(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function B(t,e,r,n,o,i){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function U(t,e,r,n){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-r,2);o<i;++o)t[r+o]=(e&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function Y(t,e,r,n){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-r,4);o<i;++o)t[r+o]=e>>>8*(n?o:3-o)&255}function M(t,e,r,n,o,i){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function D(t,e,r,n,i){return i||M(t,0,r,4),o.write(t,e,r,n,23,4),r+4}function j(t,e,r,n,i){return i||M(t,0,r,8),o.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=u.prototype;else{var o=e-t;r=new u(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+t]}return r},u.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||I(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n},u.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||I(t,e,this.length);for(var n=this[t+--e],o=1;e>0&&(o*=256);)n+=this[t+--e]*o;return n},u.prototype.readUInt8=function(t,e){return e||I(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||I(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||I(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||I(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||I(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||I(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||I(t,e,this.length);for(var n=e,o=1,i=this[t+--n];n>0&&(o*=256);)i+=this[t+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},u.prototype.readInt8=function(t,e){return e||I(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||I(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){e||I(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return e||I(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||I(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||I(t,4,this.length),o.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||I(t,4,this.length),o.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||I(t,8,this.length),o.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||I(t,8,this.length),o.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||B(this,t,e,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[e]=255&t;++i<r&&(o*=256);)this[e+i]=t/o&255;return e+r},u.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||B(this,t,e,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+r},u.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):U(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):U(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):Y(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):Y(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);B(this,t,e,r,o-1,-o)}var i=0,s=1,a=0;for(this[e]=255&t;++i<r&&(s*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);B(this,t,e,r,o-1,-o)}var i=r-1,s=1,a=0;for(this[e+i]=255&t;--i>=0&&(s*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):U(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):U(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):Y(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):Y(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,r){return D(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return D(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return j(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return j(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var o,i=n-r;if(this===t&&r<e&&e<n)for(o=i-1;o>=0;--o)t[o+e]=this[o+r];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+i),e);return i},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{var s=u.isBuffer(t)?t:k(new u(t,n).toString()),a=s.length;for(i=0;i<r-e;++i)this[i+e]=s[i%a]}return this};var x=/[^+\/0-9A-Za-z-_]/g;function F(t){return t<16?"0"+t.toString(16):t.toString(16)}function k(t,e){var r;e=e||1/0;for(var n=t.length,o=null,i=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(e-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((e-=1)<0)break;i.push(r)}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function $(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(x,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function G(t,e,r,n){for(var o=0;o<n&&!(o+r>=e.length||o>=t.length);++o)e[o+r]=t[o];return o}}).call(this,r(2))},function(t,e,r){"use strict";e.byteLength=function(t){var e=c(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=c(t),s=n[0],a=n[1],u=new i(function(t,e,r){return 3*(e+r)/4-r}(0,s,a)),f=0,h=a>0?s-4:s;for(r=0;r<h;r+=4)e=o[t.charCodeAt(r)]<<18|o[t.charCodeAt(r+1)]<<12|o[t.charCodeAt(r+2)]<<6|o[t.charCodeAt(r+3)],u[f++]=e>>16&255,u[f++]=e>>8&255,u[f++]=255&e;2===a&&(e=o[t.charCodeAt(r)]<<2|o[t.charCodeAt(r+1)]>>4,u[f++]=255&e);1===a&&(e=o[t.charCodeAt(r)]<<10|o[t.charCodeAt(r+1)]<<4|o[t.charCodeAt(r+2)]>>2,u[f++]=e>>8&255,u[f++]=255&e);return u},e.fromByteArray=function(t){for(var e,r=t.length,o=r%3,i=[],s=0,a=r-o;s<a;s+=16383)i.push(f(t,s,s+16383>a?a:s+16383));1===o?(e=t[r-1],i.push(n[e>>2]+n[e<<4&63]+"==")):2===o&&(e=(t[r-2]<<8)+t[r-1],i.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return i.join("")};for(var n=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)n[a]=s[a],o[s.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function f(t,e,r){for(var o,i,s=[],a=e;a<r;a+=3)o=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,o){var i,s,a=8*o-n-1,u=(1<<a)-1,c=u>>1,f=-7,h=r?o-1:0,l=r?-1:1,p=t[e+h];for(h+=l,i=p&(1<<-f)-1,p>>=-f,f+=a;f>0;i=256*i+t[e+h],h+=l,f-=8);for(s=i&(1<<-f)-1,i>>=-f,f+=n;f>0;s=256*s+t[e+h],h+=l,f-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,n),i-=c}return(p?-1:1)*s*Math.pow(2,i-n)},e.write=function(t,e,r,n,o,i){var s,a,u,c=8*i-o-1,f=(1<<c)-1,h=f>>1,l=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,d=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=f):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+h>=1?l/u:l*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=f?(a=0,s=f):s+h>=1?(a=(e*u-1)*Math.pow(2,o),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,o),s=0));o>=8;t[r+p]=255&a,p+=d,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;t[r+p]=255&s,p+=d,s/=256,c-=8);t[r+p-d]|=128*y}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n="undefined"!=typeof window&&void 0!==window.document,o="object"===("undefined"==typeof self?"undefined":r(self))&&self.constructor&&"DedicatedWorkerGlobalScope"===self.constructor.name,i=void 0!==t&&null!=t.versions&&null!=t.versions.node;e.isBrowser=n,e.isWebWorker=o,e.isNode=i}).call(this,r(1))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_CREATE_ORDER_PAYLOAD={intent:"AUTHORIZE",purchase_units:[{description:"This is cool",amount:{currency_code:"USD",value:"100.00"}}]},e.DEFAULT_UPDATE_ORDER_PAYLOAD=[{op:"replace",path:"/purchase_units/@reference_id=='default'/description",value:"this is fine"}]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(21),o=r(0);e.createToken=async function(t,e,r){const i=e&&Object.keys(e).length>0?e:n.DEFAULT_CREATE_BILLING_AGREEMENT_TOKEN_PAYLOAD,s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r},body:JSON.stringify(i)};return await fetch(`${o.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/billing-agreements/agreement-tokens`,s)},e.create=async function(t,e,r){const n={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r},body:JSON.stringify({token_id:e})};return await fetch(`${o.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/billing-agreements/agreements`,n)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_CREATE_BILLING_AGREEMENT_TOKEN_PAYLOAD={description:"Billing Agreement",shipping_address:{line1:"1350 North First Street",city:"San Jose",state:"CA",postal_code:"95112",country_code:"US",recipient_name:"John Doe"},payer:{payment_method:"PAYPAL"},plan:{type:"MERCHANT_INITIATED_BILLING",merchant_preferences:{return_url:"https://example.com/return",cancel_url:"https://example.com/cancel",notify_url:"https://example.com/notify",accepted_pymt_type:"INSTANT",skip_shipping_address:!1,immutable_shipping_address:!0}}},e.DEFAULT_CREATE_PAYMENT_WITH_BILLING_AGREEMENT_PAYLOAD={intent:"sale",payer:{payment_method:"PAYPAL",funding_instruments:[{billing:{billing_agreement_id:"B-50V812176H0783741"}}]},transactions:[{amount:{currency:"USD",total:"1.00"},description:"Payment transaction.",custom:"Payment custom field.",note_to_payee:"Note to payee field.",invoice_number:"GDAGDS5754YEK",item_list:{items:[{sku:"skuitemNo1",name:"ItemNo1",description:"The item description.",quantity:"1",price:"1.00",currency:"USD",tax:"0",url:"https://example.com/"}]}}],redirect_urls:{return_url:"https://example.com/return",cancel_url:"https://example.com/cancel"}}},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=n(r(23));e.v1=o;const i=n(r(25));e.v2=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0),o=r(24);e.create=async function(t,e,r){const i=e&&Object.keys(e).length>0?e:o.DEFAULT_PAYMENT_CREATE_PAYLOAD,s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/payments/payment`,s)},e.capture=async function(t,e,r,i){const s=r&&Object.keys(r).length>0?r:o.DEFAULT_PAYMENT_CAPTURE_PAYLOAD,a={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...i},body:JSON.stringify(s)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/payments/authorizations/${e}/capture`,a)},e.update=async function(t,e,r,i){const s=r&&Object.keys(r).length>0?r:o.DEFAULT_PAYMENT_UPDATE_PAYLOAD,a={method:"PATCH",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...i},body:JSON.stringify(s)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/payments/payment/${e}`,a)},e.referenceTransaction=async function(t,e,r,i){const s=r&&Object.keys(r).length>0?r:o.DEFAULT_REFERENCE_TRANSACTION_PAYLOAD;s.payer.funding_instruments[0].billing.billing_agreement_id=e;const a={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...i},body:JSON.stringify(s)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/payments/payment`,a)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_PAYMENT_CREATE_PAYLOAD={intent:"sale",payer:{payment_method:"paypal"},transactions:[{amount:{total:"30.11",currency:"USD",details:{subtotal:"30.00",tax:"0.07",shipping:"0.03",handling_fee:"1.00",shipping_discount:"-1.00",insurance:"0.01"}},description:"The payment transaction description.",custom:"EBAY_EMS_90048630024435",invoice_number:"48787589673",payment_options:{allowed_payment_method:"INSTANT_FUNDING_SOURCE"},soft_descriptor:"ECHI5786786",item_list:{items:[{name:"hat",description:"Brown hat.",quantity:"5",price:"3",tax:"0.01",sku:"1",currency:"USD"},{name:"handbag",description:"Black handbag.",quantity:"1",price:"15",tax:"0.02",sku:"product34",currency:"USD"}],shipping_address:{recipient_name:"Brian Robinson",line1:"4th Floor",line2:"Unit #34",city:"San Jose",country_code:"US",postal_code:"95131",phone:"011862212345678",state:"CA"}}}],note_to_payer:"Contact us for any questions on your order.",redirect_urls:{return_url:"https://example.com/return",cancel_url:"https://example.com/cancel"}},e.DEFAULT_PAYMENT_CAPTURE_PAYLOAD={amount:{value:"1.99",currency_code:"USD"},final_capture:!0},e.DEFAULT_PAYMENT_UPDATE_PAYLOAD=[{op:"replace",path:"/transactions/0/amount",value:{total:"35.11",currency:"USD",details:{subtotal:"30.00",tax:"0.07",shipping:"5.03",handling_fee:"1.00",shipping_discount:"-1.00",insurance:"0.01"}}},{op:"add",path:"/transactions/0/item_list/shipping_address",value:{recipient_name:"Anna Gruneberg",line1:"101 main st",city:"Beverly Hills",postal_code:"90210",country_code:"US",state:"CA"}}],e.DEFAULT_REFERENCE_TRANSACTION_PAYLOAD={intent:"sale",payer:{payment_method:"PAYPAL",funding_instruments:[{billing:{billing_agreement_id:"B-50V812176H0783741"}}]},transactions:[{amount:{currency:"USD",total:"1.00"}}]}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0);e.capture=async function(t,e,r,o){const i=r||{},s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...o},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/payments/authorizations/${e}/capture`,s)},e.refund=async function(t,e,r,o){const i=r||{},s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...o},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/payments/captures/${e}/refund`,s)},e.cancel=async function(t,e,r){const o={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r}};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/payments/authorizations/${e}/void`,o)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0);e.list=async function(t){const e={method:"GET",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json"}};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/notifications/webhooks`,e)},e.listEventTypes=async function(t){const e={method:"GET",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json"}};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/notifications/webhooks-event-types`,e)},e.create=async function(t,e,r){const o={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({url:e,event_types:r})};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/notifications/webhooks`,o)},e.remove=async function(t,e){const r={method:"DELETE",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json"}};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/notifications/webhooks/${e}`,r)},e.verify=async function(t,e,r,o){const i={transmission_id:r["paypal-transmission-id"],transmission_time:r["paypal-transmission-time"],cert_url:r["paypal-cert-url"],auth_algo:r["paypal-auth-algo"],transmission_sig:r["paypal-transmission-sig"],webhook_id:e,webhook_event:o},s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json"},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/notifications/verify-webhook-signature`,s)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(4);let o;e.accessTokenMiddleware=async function(t,e,r){return(!o||o.expires_at>Date.now())&&(o=await n.createAccessToken()),t.paypalAccessToken=o,r()}},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=n(r(29));e.v1=o;const i=n(r(30));e.v2=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0);e.trackById=async function(t,e,r){const o={method:"GET",headers:{Authorization:`Bearer ${t.access_token}`,...r}};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/customer/partners/${n.CONFIG.get("PAYPAL_ACCOUNT_ID")}/merchant-integrations?tracking_id=${e}`,o)}},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=n(r(31));e.Customer=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0),o=r(32),i=r(3);e.create=async function(t,e,r,s){const a=r&&Object.keys(r).length>0?r:o.DEFAULT_CUSTOMER_CREATE_PAYLOAD;a.tracking_id=e||i.randomString();const u={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...s},body:JSON.stringify(a)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/customer/partner-referrals`,u)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(33);e.DEFAULT_CUSTOMER_CREATE_PAYLOAD={operations:[{operation:"API_INTEGRATION",api_integration_preference:{rest_api_integration:{integration_method:"PAYPAL",integration_type:"THIRD_PARTY",third_party_details:{features:["PAYMENT","REFUND"]}}}}],products:[n.ProductName.EXPRESS_CHECKOUT],legal_consents:[{type:"SHARE_DATA_CONSENT",granted:!0}]}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.EXPRESS_CHECKOUT="EXPRESS_CHECKOUT",t.PPPLUS="PPPLUS",t.WEBSITE_PAYMENT_PRO="WEBSITE_PAYMENT_PRO",t.PPCP="PPCP"}(e.ProductName||(e.ProductName={}))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3BheXBhbEZ1bmN0aW9ucy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvLi9kaXN0L2NvbmZpZy5qcyIsIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovL3BheXBhbEZ1bmN0aW9ucy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vcGF5cGFsRnVuY3Rpb25zLy4vZGlzdC91dGlsLmpzIiwid2VicGFjazovL3BheXBhbEZ1bmN0aW9ucy8uL2Rpc3Qvb2F1dGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGF5cGFsRnVuY3Rpb25zLy4vZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvLi9kaXN0L3BvbHlmaWxscy5qcyIsIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvLi9ub2RlX21vZHVsZXMvaXNvbW9ycGhpYy1mZXRjaC9mZXRjaC1ucG0tYnJvd3NlcmlmeS5qcyIsIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvLi9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwid2VicGFjazovL3BheXBhbEZ1bmN0aW9ucy8uL25vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS9hdXRvLmpzIiwid2VicGFjazovL3BheXBhbEZ1bmN0aW9ucy8uL25vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS9kaXN0L2VzNi1wcm9taXNlLmpzIiwid2VicGFjazovL3BheXBhbEZ1bmN0aW9ucy8uL2Rpc3QvaW50ZXJmYWNlcy5qcyIsIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvLi9kaXN0L29yZGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvLi9ub2RlX21vZHVsZXMvYnRvYS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovL3BheXBhbEZ1bmN0aW9ucy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGF5cGFsRnVuY3Rpb25zLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGF5cGFsRnVuY3Rpb25zLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGF5cGFsRnVuY3Rpb25zLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItb3Itbm9kZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGF5cGFsRnVuY3Rpb25zLy4vZGlzdC9vcmRlcnMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3BheXBhbEZ1bmN0aW9ucy8uL2Rpc3QvYmlsbGluZy1hZ3JlZW1lbnRzL2luZGV4LmpzIiwid2VicGFjazovL3BheXBhbEZ1bmN0aW9ucy8uL2Rpc3QvYmlsbGluZy1hZ3JlZW1lbnRzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvLi9kaXN0L3BheW1lbnRzL2luZGV4LmpzIiwid2VicGFjazovL3BheXBhbEZ1bmN0aW9ucy8uL2Rpc3QvcGF5bWVudHMvdjEvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGF5cGFsRnVuY3Rpb25zLy4vZGlzdC9wYXltZW50cy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vcGF5cGFsRnVuY3Rpb25zLy4vZGlzdC9wYXltZW50cy92Mi9pbmRleC5qcyIsIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvLi9kaXN0L3dlYmhvb2tzL2luZGV4LmpzIiwid2VicGFjazovL3BheXBhbEZ1bmN0aW9ucy8uL2Rpc3QvbWlkZGxld2FyZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvLi9kaXN0L3BhcnRuZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGF5cGFsRnVuY3Rpb25zLy4vZGlzdC9wYXJ0bmVyL3YxL2luZGV4LmpzIiwid2VicGFjazovL3BheXBhbEZ1bmN0aW9ucy8uL2Rpc3QvcGFydG5lci92Mi9pbmRleC5qcyIsIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvLi9kaXN0L3BhcnRuZXIvdjIvY3VzdG9tZXIuanMiLCJ3ZWJwYWNrOi8vcGF5cGFsRnVuY3Rpb25zLy4vZGlzdC9wYXJ0bmVyL3YyL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9wYXlwYWxGdW5jdGlvbnMvLi9kaXN0L3BhcnRuZXIvdjIvaW50ZXJmYWNlcy5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX19pbXBvcnREZWZhdWx0IiwidGhpcyIsIm1vZCIsImJ0b2FfMSIsImJyb3dzZXJfb3Jfbm9kZV8xIiwiQ09ORklHIiwiTWFwIiwiaXNOb2RlIiwic2V0IiwicHJvY2VzcyIsImVudiIsIlBBWVBBTF9DTElFTlRfSUQiLCJQQVlQQUxfQ0xJRU5UX1NFQ1JFVCIsIlBBWVBBTF9FTlZJUk9OTUVOVCIsIlBBWVBBTF9BQ0NPVU5UX0lEIiwiZGVmYXVsdCIsImlzQnJvd3NlciIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJidG9hIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJFcnJvciIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImUiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImxlbmd0aCIsImNvbmNhdCIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwicHVzaCIsImFwcGx5IiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiZyIsIkZ1bmN0aW9uIiwicmFuZG9tU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwicmFuZG9tQW1vdW50IiwiZmxvb3IiLCJyYW5kb21BbW91bnRhc1N0cmluZyIsImNvbmZpZ18xIiwiY3JlYXRlQWNjZXNzVG9rZW4iLCJhc3luYyIsIm9wdGlvbnMiLCJtZXRob2QiLCJoZWFkZXJzIiwiQWNjZXB0IiwiQXV0aG9yaXphdGlvbiIsImJvZHkiLCJyZXMiLCJmZXRjaCIsInJlc3BvbnNlIiwianNvbiIsImV4cGlyZXNfYXQiLCJEYXRlIiwibm93IiwiZXhwaXJlc19pbiIsIl9faW1wb3J0U3RhciIsInJlc3VsdCIsImsiLCJVdGlscyIsIk9yZGVycyIsIkJpbGxpbmdBZ3JlZW1lbnRzIiwiT2F1dGgiLCJQYXltZW50cyIsIldlYmhvb2tzIiwiTWlkZGxld2FyZSIsIlBhcnRuZXIiLCJzZWxmIiwic3VwcG9ydCIsInNlYXJjaFBhcmFtcyIsIml0ZXJhYmxlIiwiYmxvYiIsIkJsb2IiLCJmb3JtRGF0YSIsImFycmF5QnVmZmVyIiwidmlld0NsYXNzZXMiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3Iiwib2JqIiwiaW5kZXhPZiIsIm5vcm1hbGl6ZU5hbWUiLCJTdHJpbmciLCJ0ZXN0IiwiVHlwZUVycm9yIiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemVWYWx1ZSIsIml0ZXJhdG9yRm9yIiwiaXRlbXMiLCJpdGVyYXRvciIsIm5leHQiLCJzaGlmdCIsImRvbmUiLCJ1bmRlZmluZWQiLCJIZWFkZXJzIiwibWFwIiwiZm9yRWFjaCIsImFwcGVuZCIsImlzQXJyYXkiLCJoZWFkZXIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uc3VtZWQiLCJib2R5VXNlZCIsIlByb21pc2UiLCJyZWplY3QiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJyZXNvbHZlIiwib25sb2FkIiwib25lcnJvciIsImVycm9yIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiRmlsZVJlYWRlciIsInByb21pc2UiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImJ1ZmZlckNsb25lIiwiYnVmIiwic2xpY2UiLCJ2aWV3IiwiVWludDhBcnJheSIsImJ5dGVMZW5ndGgiLCJidWZmZXIiLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0IiwiaXNQcm90b3R5cGVPZiIsIl9ib2R5QmxvYiIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsIlVSTFNlYXJjaFBhcmFtcyIsIkRhdGFWaWV3IiwiX2JvZHlBcnJheUJ1ZmZlciIsInR5cGUiLCJyZWplY3RlZCIsInRoZW4iLCJ0ZXh0IiwicmVhZEFzVGV4dCIsImNoYXJzIiwiZnJvbUNoYXJDb2RlIiwiam9pbiIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImRlY29kZSIsIkpTT04iLCJwYXJzZSIsIm9sZFZhbHVlIiwiaGFzIiwiY2FsbGJhY2siLCJ0aGlzQXJnIiwia2V5cyIsInZhbHVlcyIsImVudHJpZXMiLCJtZXRob2RzIiwiUmVxdWVzdCIsImlucHV0IiwidXBjYXNlZCIsInVybCIsImNyZWRlbnRpYWxzIiwic2lnbmFsIiwidG9VcHBlckNhc2UiLCJyZWZlcnJlciIsImZvcm0iLCJ0cmltIiwic3BsaXQiLCJieXRlcyIsInJlcGxhY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJSZXNwb25zZSIsImJvZHlJbml0Iiwic3RhdHVzIiwib2siLCJzdGF0dXNUZXh0IiwiY2xvbmUiLCJyZWRpcmVjdFN0YXR1c2VzIiwicmVkaXJlY3QiLCJSYW5nZUVycm9yIiwibG9jYXRpb24iLCJET01FeGNlcHRpb24iLCJlcnIiLCJtZXNzYWdlIiwic3RhY2siLCJjb25zdHJ1Y3RvciIsImluaXQiLCJyZXF1ZXN0IiwiYWJvcnRlZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiYWJvcnRYaHIiLCJhYm9ydCIsInJhd0hlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJsaW5lIiwicGFydHMiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlVGV4dCIsIm9udGltZW91dCIsIm9uYWJvcnQiLCJvcGVuIiwid2l0aENyZWRlbnRpYWxzIiwicmVzcG9uc2VUeXBlIiwic2V0UmVxdWVzdEhlYWRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNlbmQiLCJwb2x5ZmlsbCIsImlzRnVuY3Rpb24iLCJ4IiwidmVydHhOZXh0IiwiY3VzdG9tU2NoZWR1bGVyRm4iLCJhc2FwIiwiYXJnIiwiZmx1c2giLCJzY2hlZHVsZUZsdXNoIiwiYnJvd3NlcldpbmRvdyIsImJyb3dzZXJHbG9iYWwiLCJCcm93c2VyTXV0YXRpb25PYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiaXNXb3JrZXIiLCJVaW50OENsYW1wZWRBcnJheSIsImltcG9ydFNjcmlwdHMiLCJNZXNzYWdlQ2hhbm5lbCIsInVzZVNldFRpbWVvdXQiLCJnbG9iYWxTZXRUaW1lb3V0IiwiY2hhbm5lbCIsIml0ZXJhdGlvbnMiLCJvYnNlcnZlciIsIm5vZGUiLCJvbkZ1bGZpbGxtZW50Iiwib25SZWplY3Rpb24iLCJwYXJlbnQiLCJjaGlsZCIsIlBST01JU0VfSUQiLCJtYWtlUHJvbWlzZSIsIl9zdGF0ZSIsImludm9rZUNhbGxiYWNrIiwiX3Jlc3VsdCIsInN1YnNjcmliZSIsInJlc29sdmUkMSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsImRhdGEiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvcnQyIiwicG9zdE1lc3NhZ2UiLCJ2ZXJ0eCIsInJlcXVpcmUiLCJydW5Pbkxvb3AiLCJydW5PbkNvbnRleHQiLCJhdHRlbXB0VmVydHgiLCJzdWJzdHJpbmciLCJQRU5ESU5HIiwiRlVMRklMTEVEIiwiUkVKRUNURUQiLCJoYW5kbGVNYXliZVRoZW5hYmxlIiwibWF5YmVUaGVuYWJsZSIsInRoZW4kJDEiLCJ0aGVuYWJsZSIsImZ1bGZpbGwiLCJyZWFzb24iLCJoYW5kbGVPd25UaGVuYWJsZSIsInNlYWxlZCIsImZ1bGZpbGxtZW50SGFuZGxlciIsInJlamVjdGlvbkhhbmRsZXIiLCJ0cnlUaGVuIiwiX2xhYmVsIiwiaGFuZGxlRm9yZWlnblRoZW5hYmxlIiwicHVibGlzaFJlamVjdGlvbiIsIl9vbmVycm9yIiwicHVibGlzaCIsIl9zdWJzY3JpYmVycyIsInN1YnNjcmliZXJzIiwic2V0dGxlZCIsImRldGFpbCIsImhhc0NhbGxiYWNrIiwic3VjY2VlZGVkIiwiaWQiLCJFbnVtZXJhdG9yIiwiQ29uc3RydWN0b3IiLCJfaW5zdGFuY2VDb25zdHJ1Y3RvciIsIl9yZW1haW5pbmciLCJfZW51bWVyYXRlIiwiX2VhY2hFbnRyeSIsImVudHJ5IiwicmVzb2x2ZSQkMSIsIl90aGVuIiwiZGlkRXJyb3IiLCJfc2V0dGxlZEF0IiwiUHJvbWlzZSQxIiwiX3dpbGxTZXR0bGVBdCIsInN0YXRlIiwiZW51bWVyYXRvciIsInJlc29sdmVyIiwibmVlZHNSZXNvbHZlciIsImluaXRpYWxpemVQcm9taXNlIiwibmVlZHNOZXciLCJjYXRjaCIsImZpbmFsbHkiLCJhbGwiLCJyYWNlIiwiXyIsIl9zZXRTY2hlZHVsZXIiLCJzY2hlZHVsZUZuIiwiX3NldEFzYXAiLCJhc2FwRm4iLCJfYXNhcCIsImxvY2FsIiwiZ2xvYmFsIiwiUCIsInByb21pc2VUb1N0cmluZyIsImNhc3QiLCJjb25zdGFudHNfMSIsInRva2VuIiwicGF5bG9hZCIsIkRFRkFVTFRfQ1JFQVRFX09SREVSX1BBWUxPQUQiLCJhY2Nlc3NfdG9rZW4iLCJzdHJpbmdpZnkiLCJ1cGRhdGUiLCJERUZBVUxUX1VQREFURV9PUkRFUl9QQVlMT0FEIiwiYXV0aG9yaXplIiwiY2FwdHVyZSIsInN0ciIsIkJ1ZmZlciIsImZyb20iLCJiYXNlNjQiLCJpZWVlNzU0Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiX19wcm90b19fIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiYnl0ZU9mZnNldCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJzdHJpbmciLCJlbmNvZGluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJ3cml0ZSIsImZyb21TdHJpbmciLCJpc0J1ZmZlciIsImNoZWNrZWQiLCJjb3B5IiwidmFsIiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJzaXplIiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzbG93VG9TdHJpbmciLCJzdGFydCIsImVuZCIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwiYiIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiaXNOYU4iLCJhcnJheUluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFyciIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsInJlYWQiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJqIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYnl0ZUFycmF5IiwiY2hhckNvZGVBdCIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImZyb21CeXRlQXJyYXkiLCJtaW4iLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJjb25maWd1cmFibGUiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsImEiLCJ5IiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJtYXgiLCJtYXRjaCIsInRhcmdldCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJwb3ciLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiY29kZSIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJzcmMiLCJkc3QiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG1wIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwibnVtIiwib3V0cHV0IiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsImFicyIsImxvZyIsIkxOMiIsIl90eXBlb2YiLCJpc1dlYldvcmtlciIsImludGVudCIsInB1cmNoYXNlX3VuaXRzIiwiZGVzY3JpcHRpb24iLCJhbW91bnQiLCJjdXJyZW5jeV9jb2RlIiwib3AiLCJwYXRoIiwiY3JlYXRlVG9rZW4iLCJERUZBVUxUX0NSRUFURV9CSUxMSU5HX0FHUkVFTUVOVF9UT0tFTl9QQVlMT0FEIiwidG9rZW5faWQiLCJzaGlwcGluZ19hZGRyZXNzIiwibGluZTEiLCJjaXR5IiwicG9zdGFsX2NvZGUiLCJjb3VudHJ5X2NvZGUiLCJyZWNpcGllbnRfbmFtZSIsInBheWVyIiwicGF5bWVudF9tZXRob2QiLCJwbGFuIiwibWVyY2hhbnRfcHJlZmVyZW5jZXMiLCJyZXR1cm5fdXJsIiwiY2FuY2VsX3VybCIsIm5vdGlmeV91cmwiLCJhY2NlcHRlZF9weW10X3R5cGUiLCJza2lwX3NoaXBwaW5nX2FkZHJlc3MiLCJpbW11dGFibGVfc2hpcHBpbmdfYWRkcmVzcyIsIkRFRkFVTFRfQ1JFQVRFX1BBWU1FTlRfV0lUSF9CSUxMSU5HX0FHUkVFTUVOVF9QQVlMT0FEIiwiZnVuZGluZ19pbnN0cnVtZW50cyIsImJpbGxpbmciLCJiaWxsaW5nX2FncmVlbWVudF9pZCIsInRyYW5zYWN0aW9ucyIsImN1cnJlbmN5IiwidG90YWwiLCJjdXN0b20iLCJub3RlX3RvX3BheWVlIiwiaW52b2ljZV9udW1iZXIiLCJpdGVtX2xpc3QiLCJza3UiLCJxdWFudGl0eSIsInByaWNlIiwidGF4IiwicmVkaXJlY3RfdXJscyIsInYxIiwidjIiLCJERUZBVUxUX1BBWU1FTlRfQ1JFQVRFX1BBWUxPQUQiLCJERUZBVUxUX1BBWU1FTlRfQ0FQVFVSRV9QQVlMT0FEIiwiREVGQVVMVF9QQVlNRU5UX1VQREFURV9QQVlMT0FEIiwicmVmZXJlbmNlVHJhbnNhY3Rpb24iLCJiaWxsaW5nQWdyZWVtZW50SWQiLCJERUZBVUxUX1JFRkVSRU5DRV9UUkFOU0FDVElPTl9QQVlMT0FEIiwiZGV0YWlscyIsInN1YnRvdGFsIiwic2hpcHBpbmciLCJoYW5kbGluZ19mZWUiLCJzaGlwcGluZ19kaXNjb3VudCIsImluc3VyYW5jZSIsInBheW1lbnRfb3B0aW9ucyIsImFsbG93ZWRfcGF5bWVudF9tZXRob2QiLCJzb2Z0X2Rlc2NyaXB0b3IiLCJsaW5lMiIsInBob25lIiwibm90ZV90b19wYXllciIsImZpbmFsX2NhcHR1cmUiLCJyZWZ1bmQiLCJjYW5jZWwiLCJsaXN0RXZlbnRUeXBlcyIsImV2ZW50X3R5cGVzIiwicmVtb3ZlIiwidmVyaWZ5Iiwid2ViaG9va19pZCIsIndlYmhvb2tfZXZlbnQiLCJ0cmFuc21pc3Npb25faWQiLCJ0cmFuc21pc3Npb25fdGltZSIsImNlcnRfdXJsIiwiYXV0aF9hbGdvIiwidHJhbnNtaXNzaW9uX3NpZyIsIm9hdXRoXzEiLCJhY2Nlc3NUb2tlbiIsImFjY2Vzc1Rva2VuTWlkZGxld2FyZSIsInJlcSIsInBheXBhbEFjY2Vzc1Rva2VuIiwidHJhY2tCeUlkIiwiQ3VzdG9tZXIiLCJ1dGlsXzEiLCJ0cmFja2luZ0lkIiwiREVGQVVMVF9DVVNUT01FUl9DUkVBVEVfUEFZTE9BRCIsInRyYWNraW5nX2lkIiwiaW50ZXJmYWNlc18xIiwib3BlcmF0aW9ucyIsIm9wZXJhdGlvbiIsImFwaV9pbnRlZ3JhdGlvbl9wcmVmZXJlbmNlIiwicmVzdF9hcGlfaW50ZWdyYXRpb24iLCJpbnRlZ3JhdGlvbl9tZXRob2QiLCJpbnRlZ3JhdGlvbl90eXBlIiwidGhpcmRfcGFydHlfZGV0YWlscyIsImZlYXR1cmVzIiwicHJvZHVjdHMiLCJQcm9kdWN0TmFtZSIsIkVYUFJFU1NfQ0hFQ0tPVVQiLCJsZWdhbF9jb25zZW50cyIsImdyYW50ZWQiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsR0FDZSxpQkFBWkMsUUFDZEEsUUFBeUIsZ0JBQUlELElBRTdCRCxFQUFzQixnQkFBSUMsSUFSNUIsQ0FTR0ssUUFBUSxXQUNYLE8sWUNURSxJQUFJQyxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVUCxRQUduQyxJQUFJQyxFQUFTSSxFQUFpQkUsR0FBWSxDQUN6Q0MsRUFBR0QsRUFDSEUsR0FBRyxFQUNIVCxRQUFTLElBVVYsT0FOQVUsRUFBUUgsR0FBVUksS0FBS1YsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU00sR0FHL0RMLEVBQU9RLEdBQUksRUFHSlIsRUFBT0QsUUEwRGYsT0FyREFNLEVBQW9CTSxFQUFJRixFQUd4QkosRUFBb0JPLEVBQUlSLEVBR3hCQyxFQUFvQlEsRUFBSSxTQUFTZCxFQUFTZSxFQUFNQyxHQUMzQ1YsRUFBb0JXLEVBQUVqQixFQUFTZSxJQUNsQ0csT0FBT0MsZUFBZW5CLEVBQVNlLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVYsRUFBb0JnQixFQUFJLFNBQVN0QixHQUNYLG9CQUFYdUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlbkIsRUFBU3VCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZW5CLEVBQVMsYUFBYyxDQUFFeUIsT0FBTyxLQVF2RG5CLEVBQW9Cb0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFuQixFQUFvQm1CLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBeEIsRUFBb0JnQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT25CLEVBQW9CUSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSdkIsRUFBb0IyQixFQUFJLFNBQVNoQyxHQUNoQyxJQUFJZSxFQUFTZixHQUFVQSxFQUFPMkIsV0FDN0IsV0FBd0IsT0FBTzNCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFLLEVBQW9CUSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSVixFQUFvQlcsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekc3QixFQUFvQmdDLEVBQUksR0FJakJoQyxFQUFvQkEsRUFBb0JpQyxFQUFJLEcsZ0NDbEZyRCxZQUNBLElBQUlDLEVBQW1CQyxNQUFRQSxLQUFLRCxpQkFBb0IsU0FBVUUsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSWQsV0FBY2MsRUFBTSxDQUFFLFFBQVdBLElBRXhEeEIsT0FBT0MsZUFBZW5CLEVBQVMsYUFBYyxDQUFFeUIsT0FBTyxJQUN0RCxNQUFNa0IsRUFBU0gsRUFBZ0IsRUFBUSxLQUNqQ0ksRUFBb0IsRUFBUSxJQUNsQzVDLEVBQVE2QyxPQUFTLElBQUlDLElBQ2pCRixFQUFrQkcsUUFDbEIvQyxFQUFRNkMsT0FBT0csSUFBSSxtQkFBb0JDLEVBQVFDLElBQUlDLGtCQUNuRG5ELEVBQVE2QyxPQUFPRyxJQUFJLHVCQUF3QkMsRUFBUUMsSUFBSUUsc0JBQ3ZEcEQsRUFBUTZDLE9BQU9HLElBQUkscUJBQXNCQyxFQUFRQyxJQUFJRyxvQkFDckRyRCxFQUFRNkMsT0FBT0csSUFBSSxvQkFBcUJDLEVBQVFDLElBQUlJLG1CQUNwRHRELEVBQVE2QyxPQUFPRyxJQUFJLHFCQUFzQkwsRUFBT1ksUUFBUSxHQUFHTixFQUFRQyxJQUFJQyxvQkFBb0JGLEVBQVFDLElBQUlFLDBCQUVsR1IsRUFBa0JZLFlBQ3ZCeEQsRUFBUTZDLE9BQU9HLElBQUksbUJBQW9CNUMsT0FBT3FELGFBQWFDLFFBQVEscUJBQ25FMUQsRUFBUTZDLE9BQU9HLElBQUksdUJBQXdCNUMsT0FBT3FELGFBQWFDLFFBQVEseUJBQ3ZFMUQsRUFBUTZDLE9BQU9HLElBQUkscUJBQXNCNUMsT0FBT3FELGFBQWFDLFFBQVEsdUJBQ3JFMUQsRUFBUTZDLE9BQU9HLElBQUksb0JBQXFCNUMsT0FBT3FELGFBQWFDLFFBQVEsc0JBQ3BFMUQsRUFBUTZDLE9BQU9HLElBQUkscUJBQXNCNUMsT0FBT3VELEtBQUssR0FBR3ZELE9BQU9xRCxhQUFhQyxRQUFRLHVCQUF1QnRELE9BQU9xRCxhQUFhQyxRQUFRLDZCQUUzSTFELEVBQVE2QyxPQUFPRyxJQUFJLHVCQUFxRSxlQUE3Q2hELEVBQVE2QyxPQUFPeEIsSUFBSSxzQkFDeEQseUJBQ0Esb0MsK0JDdkJOLElBT0l1QyxFQUNBQyxFQVJBWixFQUFVaEQsRUFBT0QsUUFBVSxHQVUvQixTQUFTOEQsSUFDTCxNQUFNLElBQUlDLE1BQU0sbUNBRXBCLFNBQVNDLElBQ0wsTUFBTSxJQUFJRCxNQUFNLHFDQXNCcEIsU0FBU0UsRUFBV0MsR0FDaEIsR0FBSU4sSUFBcUJPLFdBRXJCLE9BQU9BLFdBQVdELEVBQUssR0FHM0IsSUFBS04sSUFBcUJFLElBQXFCRixJQUFxQk8sV0FFaEUsT0FEQVAsRUFBbUJPLFdBQ1pBLFdBQVdELEVBQUssR0FFM0IsSUFFSSxPQUFPTixFQUFpQk0sRUFBSyxHQUMvQixNQUFNRSxHQUNKLElBRUksT0FBT1IsRUFBaUJqRCxLQUFLLEtBQU11RCxFQUFLLEdBQzFDLE1BQU1FLEdBRUosT0FBT1IsRUFBaUJqRCxLQUFLOEIsS0FBTXlCLEVBQUssTUF2Q25ELFdBQ0csSUFFUU4sRUFEc0IsbUJBQWZPLFdBQ1lBLFdBRUFMLEVBRXpCLE1BQU9NLEdBQ0xSLEVBQW1CRSxFQUV2QixJQUVRRCxFQUR3QixtQkFBakJRLGFBQ2NBLGFBRUFMLEVBRTNCLE1BQU9JLEdBQ0xQLEVBQXFCRyxHQWpCN0IsR0F3RUEsSUFFSU0sRUFGQUMsRUFBUSxHQUNSQyxHQUFXLEVBRVhDLEdBQWMsRUFFbEIsU0FBU0MsSUFDQUYsR0FBYUYsSUFHbEJFLEdBQVcsRUFDUEYsRUFBYUssT0FDYkosRUFBUUQsRUFBYU0sT0FBT0wsR0FFNUJFLEdBQWMsRUFFZEYsRUFBTUksUUFDTkUsS0FJUixTQUFTQSxJQUNMLElBQUlMLEVBQUosQ0FHQSxJQUFJTSxFQUFVYixFQUFXUyxHQUN6QkYsR0FBVyxFQUdYLElBREEsSUFBSU8sRUFBTVIsRUFBTUksT0FDVkksR0FBSyxDQUdQLElBRkFULEVBQWVDLEVBQ2ZBLEVBQVEsS0FDQ0UsRUFBYU0sR0FDZFQsR0FDQUEsRUFBYUcsR0FBWU8sTUFHakNQLEdBQWMsRUFDZE0sRUFBTVIsRUFBTUksT0FFaEJMLEVBQWUsS0FDZkUsR0FBVyxFQW5FZixTQUF5QlMsR0FDckIsR0FBSXBCLElBQXVCUSxhQUV2QixPQUFPQSxhQUFhWSxHQUd4QixJQUFLcEIsSUFBdUJHLElBQXdCSCxJQUF1QlEsYUFFdkUsT0FEQVIsRUFBcUJRLGFBQ2RBLGFBQWFZLEdBRXhCLElBRVdwQixFQUFtQm9CLEdBQzVCLE1BQU9iLEdBQ0wsSUFFSSxPQUFPUCxFQUFtQmxELEtBQUssS0FBTXNFLEdBQ3ZDLE1BQU9iLEdBR0wsT0FBT1AsRUFBbUJsRCxLQUFLOEIsS0FBTXdDLEtBZ0Q3Q0MsQ0FBZ0JKLElBaUJwQixTQUFTSyxFQUFLakIsRUFBS2tCLEdBQ2YzQyxLQUFLeUIsSUFBTUEsRUFDWHpCLEtBQUsyQyxNQUFRQSxFQVlqQixTQUFTQyxLQTVCVHBDLEVBQVFxQyxTQUFXLFNBQVVwQixHQUN6QixJQUFJcUIsRUFBTyxJQUFJQyxNQUFNQyxVQUFVZCxPQUFTLEdBQ3hDLEdBQUljLFVBQVVkLE9BQVMsRUFDbkIsSUFBSyxJQUFJbkUsRUFBSSxFQUFHQSxFQUFJaUYsVUFBVWQsT0FBUW5FLElBQ2xDK0UsRUFBSy9FLEVBQUksR0FBS2lGLFVBQVVqRixHQUdoQytELEVBQU1tQixLQUFLLElBQUlQLEVBQUtqQixFQUFLcUIsSUFDSixJQUFqQmhCLEVBQU1JLFFBQWlCSCxHQUN2QlAsRUFBV1ksSUFTbkJNLEVBQUsvQyxVQUFVNEMsSUFBTSxXQUNqQnZDLEtBQUt5QixJQUFJeUIsTUFBTSxLQUFNbEQsS0FBSzJDLFFBRTlCbkMsRUFBUTJDLE1BQVEsVUFDaEIzQyxFQUFRNEMsU0FBVSxFQUNsQjVDLEVBQVFDLElBQU0sR0FDZEQsRUFBUTZDLEtBQU8sR0FDZjdDLEVBQVE4QyxRQUFVLEdBQ2xCOUMsRUFBUStDLFNBQVcsR0FJbkIvQyxFQUFRZ0QsR0FBS1osRUFDYnBDLEVBQVFpRCxZQUFjYixFQUN0QnBDLEVBQVFrRCxLQUFPZCxFQUNmcEMsRUFBUW1ELElBQU1mLEVBQ2RwQyxFQUFRb0QsZUFBaUJoQixFQUN6QnBDLEVBQVFxRCxtQkFBcUJqQixFQUM3QnBDLEVBQVFzRCxLQUFPbEIsRUFDZnBDLEVBQVF1RCxnQkFBa0JuQixFQUMxQnBDLEVBQVF3RCxvQkFBc0JwQixFQUU5QnBDLEVBQVF5RCxVQUFZLFNBQVUzRixHQUFRLE1BQU8sSUFFN0NrQyxFQUFRMEQsUUFBVSxTQUFVNUYsR0FDeEIsTUFBTSxJQUFJZ0QsTUFBTSxxQ0FHcEJkLEVBQVEyRCxJQUFNLFdBQWMsTUFBTyxLQUNuQzNELEVBQVE0RCxNQUFRLFNBQVVDLEdBQ3RCLE1BQU0sSUFBSS9DLE1BQU0sbUNBRXBCZCxFQUFROEQsTUFBUSxXQUFhLE9BQU8sSSxjQ3ZMcEMsSUFBSUMsRUFHSkEsRUFBSSxXQUNILE9BQU92RSxLQURKLEdBSUosSUFFQ3VFLEVBQUlBLEdBQUssSUFBSUMsU0FBUyxjQUFiLEdBQ1IsTUFBTzdDLEdBRWMsaUJBQVhoRSxTQUFxQjRHLEVBQUk1RyxRQU9yQ0gsRUFBT0QsUUFBVWdILEcsNkJDbEJqQjlGLE9BQU9DLGVBQWVuQixFQUFTLGFBQWMsQ0FBRXlCLE9BQU8sSUFJdER6QixFQUFRa0gsYUFIUixXQUNJLE9BQXdCLEtBQWhCQyxLQUFLQyxVQUFpQkMsU0FBUyxLQU0zQ3JILEVBQVFzSCxhQUhSLFdBQ0ksT0FBT0gsS0FBS0ksTUFBc0IsSUFBaEJKLEtBQUtDLFVBQWtCLEdBTTdDcEgsRUFBUXdILHFCQUhSLFdBQ0ksTUFBTyxHQUFHTCxLQUFLSSxNQUFzQixJQUFoQkosS0FBS0MsVUFBa0IsUyw2QkNWaERsRyxPQUFPQyxlQUFlbkIsRUFBUyxhQUFjLENBQUV5QixPQUFPLElBQ3RELE1BQU1nRyxFQUFXLEVBQVEsR0FpQnpCekgsRUFBUTBILGtCQWhCUkMsaUJBQ0ksTUFBTUMsRUFBVSxDQUNaQyxPQUFRLE9BQ1JDLFFBQVMsQ0FDTEMsT0FBUSxtQkFDUixrQkFBbUIsUUFDbkJDLGNBQWUsU0FBU1AsRUFBUzVFLE9BQU94QixJQUFJLHdCQUM1QyxlQUFnQixxQ0FFcEI0RyxLQUFNLHFEQUVKQyxRQUFZQyxNQUFNLEdBQUdWLEVBQVM1RSxPQUFPeEIsSUFBSSwwQ0FBMkN1RyxHQUNwRlEsUUFBaUJGLEVBQUlHLE9BRTNCLE9BREFELEVBQVNFLFdBQWFDLEtBQUtDLE1BQVFKLEVBQVNLLFdBQ3JDTCxJLDZCQ2hCWCxJQUFJTSxFQUFnQmpHLE1BQVFBLEtBQUtpRyxjQUFpQixTQUFVaEcsR0FDeEQsR0FBSUEsR0FBT0EsRUFBSWQsV0FBWSxPQUFPYyxFQUNsQyxJQUFJaUcsRUFBUyxHQUNiLEdBQVcsTUFBUGpHLEVBQWEsSUFBSyxJQUFJa0csS0FBS2xHLEVBQVN4QixPQUFPbUIsZUFBZTFCLEtBQUsrQixFQUFLa0csS0FBSUQsRUFBT0MsR0FBS2xHLEVBQUlrRyxJQUU1RixPQURBRCxFQUFnQixRQUFJakcsRUFDYmlHLEdBRVh6SCxPQUFPQyxlQUFlbkIsRUFBUyxhQUFjLENBQUV5QixPQUFPLElBQ3RELEVBQVEsR0FDUixFQUFRLElBQ1IsTUFBTW9ILEVBQVFILEVBQWEsRUFBUSxJQUNuQzFJLEVBQVE2SSxNQUFRQSxFQUNoQixNQUFNQyxFQUFTSixFQUFhLEVBQVEsS0FDcEMxSSxFQUFROEksT0FBU0EsRUFDakIsTUFBTUMsRUFBb0JMLEVBQWEsRUFBUSxLQUMvQzFJLEVBQVErSSxrQkFBb0JBLEVBQzVCLE1BQU1DLEVBQVFOLEVBQWEsRUFBUSxJQUNuQzFJLEVBQVFnSixNQUFRQSxFQUNoQixNQUFNQyxFQUFXUCxFQUFhLEVBQVEsS0FDdEMxSSxFQUFRaUosU0FBV0EsRUFDbkIsTUFBTUMsRUFBV1IsRUFBYSxFQUFRLEtBQ3RDMUksRUFBUWtKLFNBQVdBLEVBQ25CLE1BQU1DLEVBQWFULEVBQWEsRUFBUSxLQUN4QzFJLEVBQVFtSixXQUFhQSxFQUNyQixNQUFNQyxFQUFVVixFQUFhLEVBQVEsS0FDckMxSSxFQUFRb0osUUFBVUEsRyw2QkN6QmxCbEksT0FBT0MsZUFBZW5CLEVBQVMsYUFBYyxDQUFFeUIsT0FBTyxJQUN0RCxFQUFRLEdBQ1IsRUFBUSxJLGdCQ0NSLEVBQVEsR0FDUnhCLEVBQU9ELFFBQVVxSixLQUFLbEIsTUFBTW5HLEtBQUtxSCxPLDZCQ0xqQyx1TkFBSUMsRUFBVSxDQUNaQyxhQUFjLG9CQUFxQkYsS0FDbkNHLFNBQVUsV0FBWUgsTUFBUSxhQUFjOUgsT0FDNUNrSSxLQUNFLGVBQWdCSixNQUNoQixTQUFVQSxNQUNWLFdBQ0UsSUFFRSxPQURBLElBQUlLLE1BQ0csRUFDUCxNQUFPdEYsR0FDUCxPQUFPLEdBTFgsR0FRRnVGLFNBQVUsYUFBY04sS0FDeEJPLFlBQWEsZ0JBQWlCUCxNQU9oQyxHQUFJQyxFQUFRTSxZQUNWLElBQUlDLEVBQWMsQ0FDaEIscUJBQ0Esc0JBQ0EsNkJBQ0Esc0JBQ0EsdUJBQ0Esc0JBQ0EsdUJBQ0Esd0JBQ0EseUJBR0VDLEVBQ0ZDLFlBQVlDLFFBQ1osU0FBU0MsR0FDUCxPQUFPQSxHQUFPSixFQUFZSyxRQUFRaEosT0FBT2tCLFVBQVVpRixTQUFTMUcsS0FBS3NKLEtBQVMsR0FJaEYsU0FBU0UsRUFBY3BKLEdBSXJCLEdBSG9CLGlCQUFUQSxJQUNUQSxFQUFPcUosT0FBT3JKLElBRVosNEJBQTRCc0osS0FBS3RKLEdBQ25DLE1BQU0sSUFBSXVKLFVBQVUsMENBRXRCLE9BQU92SixFQUFLd0osY0FHZCxTQUFTQyxFQUFlL0ksR0FJdEIsTUFIcUIsaUJBQVZBLElBQ1RBLEVBQVEySSxPQUFPM0ksSUFFVkEsRUFJVCxTQUFTZ0osRUFBWUMsR0FDbkIsSUFBSUMsRUFBVyxDQUNiQyxLQUFNLFdBQ0osSUFBSW5KLEVBQVFpSixFQUFNRyxRQUNsQixNQUFPLENBQUNDLFVBQWdCQyxJQUFWdEosRUFBcUJBLE1BQU9BLEtBVTlDLE9BTkk2SCxFQUFRRSxXQUNWbUIsRUFBU3BKLE9BQU9vSixVQUFZLFdBQzFCLE9BQU9BLElBSUpBLEVBR0YsU0FBU0ssRUFBUWxELEdBQ3RCckYsS0FBS3dJLElBQU0sR0FFUG5ELGFBQW1Ca0QsRUFDckJsRCxFQUFRb0QsU0FBUSxTQUFTekosRUFBT1YsR0FDOUIwQixLQUFLMEksT0FBT3BLLEVBQU1VLEtBQ2pCZ0IsTUFDTStDLE1BQU00RixRQUFRdEQsR0FDdkJBLEVBQVFvRCxTQUFRLFNBQVNHLEdBQ3ZCNUksS0FBSzBJLE9BQU9FLEVBQU8sR0FBSUEsRUFBTyxNQUM3QjVJLE1BQ01xRixHQUNUNUcsT0FBT29LLG9CQUFvQnhELEdBQVNvRCxTQUFRLFNBQVNuSyxHQUNuRDBCLEtBQUswSSxPQUFPcEssRUFBTStHLEVBQVEvRyxNQUN6QjBCLE1BZ0VQLFNBQVM4SSxFQUFTdEQsR0FDaEIsR0FBSUEsRUFBS3VELFNBQ1AsT0FBT0MsUUFBUUMsT0FBTyxJQUFJcEIsVUFBVSxpQkFFdENyQyxFQUFLdUQsVUFBVyxFQUdsQixTQUFTRyxFQUFnQkMsR0FDdkIsT0FBTyxJQUFJSCxTQUFRLFNBQVNJLEVBQVNILEdBQ25DRSxFQUFPRSxPQUFTLFdBQ2RELEVBQVFELEVBQU9qRCxTQUVqQmlELEVBQU9HLFFBQVUsV0FDZkwsRUFBT0UsRUFBT0ksV0FLcEIsU0FBU0MsRUFBc0J4QyxHQUM3QixJQUFJbUMsRUFBUyxJQUFJTSxXQUNiQyxFQUFVUixFQUFnQkMsR0FFOUIsT0FEQUEsRUFBT1Esa0JBQWtCM0MsR0FDbEIwQyxFQW9CVCxTQUFTRSxFQUFZQyxHQUNuQixHQUFJQSxFQUFJQyxNQUNOLE9BQU9ELEVBQUlDLE1BQU0sR0FFakIsSUFBSUMsRUFBTyxJQUFJQyxXQUFXSCxFQUFJSSxZQUU5QixPQURBRixFQUFLeEosSUFBSSxJQUFJeUosV0FBV0gsSUFDakJFLEVBQUtHLE9BSWhCLFNBQVNDLElBMEZQLE9BekZBbkssS0FBSytJLFVBQVcsRUFFaEIvSSxLQUFLb0ssVUFBWSxTQUFTNUUsR0FoTTVCLElBQW9CZ0MsRUFpTWhCeEgsS0FBS3FLLFVBQVk3RSxFQUNaQSxFQUVzQixpQkFBVEEsRUFDaEJ4RixLQUFLc0ssVUFBWTlFLEVBQ1JxQixFQUFRRyxNQUFRQyxLQUFLdEgsVUFBVTRLLGNBQWMvRSxHQUN0RHhGLEtBQUt3SyxVQUFZaEYsRUFDUnFCLEVBQVFLLFVBQVl1RCxTQUFTOUssVUFBVTRLLGNBQWMvRSxHQUM5RHhGLEtBQUswSyxjQUFnQmxGLEVBQ1pxQixFQUFRQyxjQUFnQjZELGdCQUFnQmhMLFVBQVU0SyxjQUFjL0UsR0FDekV4RixLQUFLc0ssVUFBWTlFLEVBQUtaLFdBQ2JpQyxFQUFRTSxhQUFlTixFQUFRRyxRQTVNMUJRLEVBNE02Q2hDLElBM01qRG9GLFNBQVNqTCxVQUFVNEssY0FBYy9DLEtBNE0zQ3hILEtBQUs2SyxpQkFBbUJqQixFQUFZcEUsRUFBSzBFLFFBRXpDbEssS0FBS3FLLFVBQVksSUFBSXBELEtBQUssQ0FBQ2pILEtBQUs2SyxvQkFDdkJoRSxFQUFRTSxjQUFnQkcsWUFBWTNILFVBQVU0SyxjQUFjL0UsSUFBUzZCLEVBQWtCN0IsSUFDaEd4RixLQUFLNkssaUJBQW1CakIsRUFBWXBFLEdBRXBDeEYsS0FBS3NLLFVBQVk5RSxFQUFPL0csT0FBT2tCLFVBQVVpRixTQUFTMUcsS0FBS3NILEdBaEJ2RHhGLEtBQUtzSyxVQUFZLEdBbUJkdEssS0FBS3FGLFFBQVF6RyxJQUFJLGtCQUNBLGlCQUFUNEcsRUFDVHhGLEtBQUtxRixRQUFROUUsSUFBSSxlQUFnQiw0QkFDeEJQLEtBQUt3SyxXQUFheEssS0FBS3dLLFVBQVVNLEtBQzFDOUssS0FBS3FGLFFBQVE5RSxJQUFJLGVBQWdCUCxLQUFLd0ssVUFBVU0sTUFDdkNqRSxFQUFRQyxjQUFnQjZELGdCQUFnQmhMLFVBQVU0SyxjQUFjL0UsSUFDekV4RixLQUFLcUYsUUFBUTlFLElBQUksZUFBZ0IscURBS25Dc0csRUFBUUcsT0FDVmhILEtBQUtnSCxLQUFPLFdBQ1YsSUFBSStELEVBQVdqQyxFQUFTOUksTUFDeEIsR0FBSStLLEVBQ0YsT0FBT0EsRUFHVCxHQUFJL0ssS0FBS3dLLFVBQ1AsT0FBT3hCLFFBQVFJLFFBQVFwSixLQUFLd0ssV0FDdkIsR0FBSXhLLEtBQUs2SyxpQkFDZCxPQUFPN0IsUUFBUUksUUFBUSxJQUFJbkMsS0FBSyxDQUFDakgsS0FBSzZLLG9CQUNqQyxHQUFJN0ssS0FBSzBLLGNBQ2QsTUFBTSxJQUFJcEosTUFBTSx3Q0FFaEIsT0FBTzBILFFBQVFJLFFBQVEsSUFBSW5DLEtBQUssQ0FBQ2pILEtBQUtzSyxjQUkxQ3RLLEtBQUttSCxZQUFjLFdBQ2pCLE9BQUluSCxLQUFLNkssaUJBQ0EvQixFQUFTOUksT0FBU2dKLFFBQVFJLFFBQVFwSixLQUFLNkssa0JBRXZDN0ssS0FBS2dILE9BQU9nRSxLQUFLeEIsS0FLOUJ4SixLQUFLaUwsS0FBTyxXQUNWLElBM0ZvQmpFLEVBQ2xCbUMsRUFDQU8sRUF5RkVxQixFQUFXakMsRUFBUzlJLE1BQ3hCLEdBQUkrSyxFQUNGLE9BQU9BLEVBR1QsR0FBSS9LLEtBQUt3SyxVQUNQLE9BakdrQnhELEVBaUdJaEgsS0FBS3dLLFVBaEczQnJCLEVBQVMsSUFBSU0sV0FDYkMsRUFBVVIsRUFBZ0JDLEdBQzlCQSxFQUFPK0IsV0FBV2xFLEdBQ1gwQyxFQThGRSxHQUFJMUosS0FBSzZLLGlCQUNkLE9BQU83QixRQUFRSSxRQTVGckIsU0FBK0JTLEdBSTdCLElBSEEsSUFBSUUsRUFBTyxJQUFJQyxXQUFXSCxHQUN0QnNCLEVBQVEsSUFBSXBJLE1BQU1nSCxFQUFLN0gsUUFFbEJuRSxFQUFJLEVBQUdBLEVBQUlnTSxFQUFLN0gsT0FBUW5FLElBQy9Cb04sRUFBTXBOLEdBQUs0SixPQUFPeUQsYUFBYXJCLEVBQUtoTSxJQUV0QyxPQUFPb04sRUFBTUUsS0FBSyxJQXFGU0MsQ0FBc0J0TCxLQUFLNkssbUJBQzdDLEdBQUk3SyxLQUFLMEssY0FDZCxNQUFNLElBQUlwSixNQUFNLHdDQUVoQixPQUFPMEgsUUFBUUksUUFBUXBKLEtBQUtzSyxZQUk1QnpELEVBQVFLLFdBQ1ZsSCxLQUFLa0gsU0FBVyxXQUNkLE9BQU9sSCxLQUFLaUwsT0FBT0QsS0FBS08sS0FJNUJ2TCxLQUFLNEYsS0FBTyxXQUNWLE9BQU81RixLQUFLaUwsT0FBT0QsS0FBS1EsS0FBS0MsUUFHeEJ6TCxLQTFNVHVJLEVBQVE1SSxVQUFVK0ksT0FBUyxTQUFTcEssRUFBTVUsR0FDeENWLEVBQU9vSixFQUFjcEosR0FDckJVLEVBQVErSSxFQUFlL0ksR0FDdkIsSUFBSTBNLEVBQVcxTCxLQUFLd0ksSUFBSWxLLEdBQ3hCMEIsS0FBS3dJLElBQUlsSyxHQUFRb04sRUFBV0EsRUFBVyxLQUFPMU0sRUFBUUEsR0FHeER1SixFQUFRNUksVUFBa0IsT0FBSSxTQUFTckIsVUFDOUIwQixLQUFLd0ksSUFBSWQsRUFBY3BKLEtBR2hDaUssRUFBUTVJLFVBQVVmLElBQU0sU0FBU04sR0FFL0IsT0FEQUEsRUFBT29KLEVBQWNwSixHQUNkMEIsS0FBSzJMLElBQUlyTixHQUFRMEIsS0FBS3dJLElBQUlsSyxHQUFRLE1BRzNDaUssRUFBUTVJLFVBQVVnTSxJQUFNLFNBQVNyTixHQUMvQixPQUFPMEIsS0FBS3dJLElBQUk1SSxlQUFlOEgsRUFBY3BKLEtBRy9DaUssRUFBUTVJLFVBQVVZLElBQU0sU0FBU2pDLEVBQU1VLEdBQ3JDZ0IsS0FBS3dJLElBQUlkLEVBQWNwSixJQUFTeUosRUFBZS9JLElBR2pEdUosRUFBUTVJLFVBQVU4SSxRQUFVLFNBQVNtRCxFQUFVQyxHQUM3QyxJQUFLLElBQUl2TixLQUFRMEIsS0FBS3dJLElBQ2hCeEksS0FBS3dJLElBQUk1SSxlQUFldEIsSUFDMUJzTixFQUFTMU4sS0FBSzJOLEVBQVM3TCxLQUFLd0ksSUFBSWxLLEdBQU9BLEVBQU0wQixPQUtuRHVJLEVBQVE1SSxVQUFVbU0sS0FBTyxXQUN2QixJQUFJN0QsRUFBUSxHQUlaLE9BSEFqSSxLQUFLeUksU0FBUSxTQUFTekosRUFBT1YsR0FDM0IySixFQUFNaEYsS0FBSzNFLE1BRU4wSixFQUFZQyxJQUdyQk0sRUFBUTVJLFVBQVVvTSxPQUFTLFdBQ3pCLElBQUk5RCxFQUFRLEdBSVosT0FIQWpJLEtBQUt5SSxTQUFRLFNBQVN6SixHQUNwQmlKLEVBQU1oRixLQUFLakUsTUFFTmdKLEVBQVlDLElBR3JCTSxFQUFRNUksVUFBVXFNLFFBQVUsV0FDMUIsSUFBSS9ELEVBQVEsR0FJWixPQUhBakksS0FBS3lJLFNBQVEsU0FBU3pKLEVBQU9WLEdBQzNCMkosRUFBTWhGLEtBQUssQ0FBQzNFLEVBQU1VLE9BRWJnSixFQUFZQyxJQUdqQnBCLEVBQVFFLFdBQ1Z3QixFQUFRNUksVUFBVWIsT0FBT29KLFVBQVlLLEVBQVE1SSxVQUFVcU0sU0FxSnpELElBQUlDLEVBQVUsQ0FBQyxTQUFVLE1BQU8sT0FBUSxVQUFXLE9BQVEsT0FPcEQsU0FBU0MsRUFBUUMsRUFBT2hILEdBRTdCLElBUHVCQyxFQUNuQmdILEVBTUE1RyxHQURKTCxFQUFVQSxHQUFXLElBQ0ZLLEtBRW5CLEdBQUkyRyxhQUFpQkQsRUFBUyxDQUM1QixHQUFJQyxFQUFNcEQsU0FDUixNQUFNLElBQUlsQixVQUFVLGdCQUV0QjdILEtBQUtxTSxJQUFNRixFQUFNRSxJQUNqQnJNLEtBQUtzTSxZQUFjSCxFQUFNRyxZQUNwQm5ILEVBQVFFLFVBQ1hyRixLQUFLcUYsUUFBVSxJQUFJa0QsRUFBUTRELEVBQU05RyxVQUVuQ3JGLEtBQUtvRixPQUFTK0csRUFBTS9HLE9BQ3BCcEYsS0FBS2QsS0FBT2lOLEVBQU1qTixLQUNsQmMsS0FBS3VNLE9BQVNKLEVBQU1JLE9BQ2YvRyxHQUEyQixNQUFuQjJHLEVBQU05QixZQUNqQjdFLEVBQU8yRyxFQUFNOUIsVUFDYjhCLEVBQU1wRCxVQUFXLFFBR25CL0ksS0FBS3FNLElBQU0xRSxPQUFPd0UsR0FZcEIsR0FUQW5NLEtBQUtzTSxZQUFjbkgsRUFBUW1ILGFBQWV0TSxLQUFLc00sYUFBZSxlQUMxRG5ILEVBQVFFLFNBQVlyRixLQUFLcUYsVUFDM0JyRixLQUFLcUYsUUFBVSxJQUFJa0QsRUFBUXBELEVBQVFFLFVBRXJDckYsS0FBS29GLFFBakNrQkEsRUFpQ09ELEVBQVFDLFFBQVVwRixLQUFLb0YsUUFBVSxNQWhDM0RnSCxFQUFVaEgsRUFBT29ILGNBQ2RQLEVBQVF4RSxRQUFRMkUsSUFBWSxFQUFJQSxFQUFVaEgsR0FnQ2pEcEYsS0FBS2QsS0FBT2lHLEVBQVFqRyxNQUFRYyxLQUFLZCxNQUFRLEtBQ3pDYyxLQUFLdU0sT0FBU3BILEVBQVFvSCxRQUFVdk0sS0FBS3VNLE9BQ3JDdk0sS0FBS3lNLFNBQVcsTUFFSyxRQUFoQnpNLEtBQUtvRixRQUFvQyxTQUFoQnBGLEtBQUtvRixTQUFzQkksRUFDdkQsTUFBTSxJQUFJcUMsVUFBVSw2Q0FFdEI3SCxLQUFLb0ssVUFBVTVFLEdBT2pCLFNBQVMrRixFQUFPL0YsR0FDZCxJQUFJa0gsRUFBTyxJQUFJakMsU0FZZixPQVhBakYsRUFDR21ILE9BQ0FDLE1BQU0sS0FDTm5FLFNBQVEsU0FBU29FLEdBQ2hCLEdBQUlBLEVBQU8sQ0FDVCxJQUFJRCxFQUFRQyxFQUFNRCxNQUFNLEtBQ3BCdE8sRUFBT3NPLEVBQU14RSxRQUFRMEUsUUFBUSxNQUFPLEtBQ3BDOU4sRUFBUTROLEVBQU12QixLQUFLLEtBQUt5QixRQUFRLE1BQU8sS0FDM0NKLEVBQUtoRSxPQUFPcUUsbUJBQW1Cek8sR0FBT3lPLG1CQUFtQi9OLFFBR3hEME4sRUFxQkYsU0FBU00sRUFBU0MsRUFBVTlILEdBQzVCQSxJQUNIQSxFQUFVLElBR1puRixLQUFLOEssS0FBTyxVQUNaOUssS0FBS2tOLFlBQTRCNUUsSUFBbkJuRCxFQUFRK0gsT0FBdUIsSUFBTS9ILEVBQVErSCxPQUMzRGxOLEtBQUttTixHQUFLbk4sS0FBS2tOLFFBQVUsS0FBT2xOLEtBQUtrTixPQUFTLElBQzlDbE4sS0FBS29OLFdBQWEsZUFBZ0JqSSxFQUFVQSxFQUFRaUksV0FBYSxLQUNqRXBOLEtBQUtxRixRQUFVLElBQUlrRCxFQUFRcEQsRUFBUUUsU0FDbkNyRixLQUFLcU0sSUFBTWxILEVBQVFrSCxLQUFPLEdBQzFCck0sS0FBS29LLFVBQVU2QyxHQWpEakJmLEVBQVF2TSxVQUFVME4sTUFBUSxXQUN4QixPQUFPLElBQUluQixFQUFRbE0sS0FBTSxDQUFDd0YsS0FBTXhGLEtBQUtxSyxhQW1DdkNGLEVBQUtqTSxLQUFLZ08sRUFBUXZNLFdBZ0JsQndLLEVBQUtqTSxLQUFLOE8sRUFBU3JOLFdBRW5CcU4sRUFBU3JOLFVBQVUwTixNQUFRLFdBQ3pCLE9BQU8sSUFBSUwsRUFBU2hOLEtBQUtxSyxVQUFXLENBQ2xDNkMsT0FBUWxOLEtBQUtrTixPQUNiRSxXQUFZcE4sS0FBS29OLFdBQ2pCL0gsUUFBUyxJQUFJa0QsRUFBUXZJLEtBQUtxRixTQUMxQmdILElBQUtyTSxLQUFLcU0sT0FJZFcsRUFBU3pELE1BQVEsV0FDZixJQUFJNUQsRUFBVyxJQUFJcUgsRUFBUyxLQUFNLENBQUNFLE9BQVEsRUFBR0UsV0FBWSxLQUUxRCxPQURBekgsRUFBU21GLEtBQU8sUUFDVG5GLEdBR1QsSUFBSTJILEVBQW1CLENBQUMsSUFBSyxJQUFLLElBQUssSUFBSyxLQUU1Q04sRUFBU08sU0FBVyxTQUFTbEIsRUFBS2EsR0FDaEMsSUFBMEMsSUFBdENJLEVBQWlCN0YsUUFBUXlGLEdBQzNCLE1BQU0sSUFBSU0sV0FBVyx1QkFHdkIsT0FBTyxJQUFJUixFQUFTLEtBQU0sQ0FBQ0UsT0FBUUEsRUFBUTdILFFBQVMsQ0FBQ29JLFNBQVVwQixNQUcxRCxJQUFJcUIsRUFBZTlHLEtBQUs4RyxhQUMvQixJQUNFLElBQUlBLEVBQ0osTUFBT0MsSUFDUEQsRUFBZSxTQUFTRSxFQUFTdFAsR0FDL0IwQixLQUFLNE4sUUFBVUEsRUFDZjVOLEtBQUsxQixLQUFPQSxFQUNaLElBQUlpTCxFQUFRakksTUFBTXNNLEdBQ2xCNU4sS0FBSzZOLE1BQVF0RSxFQUFNc0UsUUFFUmxPLFVBQVlsQixPQUFPWSxPQUFPaUMsTUFBTTNCLFdBQzdDK04sRUFBYS9OLFVBQVVtTyxZQUFjSixFQUdoQyxTQUFTaEksRUFBTXlHLEVBQU80QixHQUMzQixPQUFPLElBQUkvRSxTQUFRLFNBQVNJLEVBQVNILEdBQ25DLElBQUkrRSxFQUFVLElBQUk5QixFQUFRQyxFQUFPNEIsR0FFakMsR0FBSUMsRUFBUXpCLFFBQVV5QixFQUFRekIsT0FBTzBCLFFBQ25DLE9BQU9oRixFQUFPLElBQUl5RSxFQUFhLFVBQVcsZUFHNUMsSUFBSVEsRUFBTSxJQUFJQyxlQUVkLFNBQVNDLElBQ1BGLEVBQUlHLFFBR05ILEVBQUk3RSxPQUFTLFdBQ1gsSUF4RmdCaUYsRUFDaEJqSixFQXVGSUYsRUFBVSxDQUNaK0gsT0FBUWdCLEVBQUloQixPQUNaRSxXQUFZYyxFQUFJZCxXQUNoQi9ILFNBM0ZjaUosRUEyRlFKLEVBQUlLLHlCQUEyQixHQTFGdkRsSixFQUFVLElBQUlrRCxFQUdRK0YsRUFBV3hCLFFBQVEsZUFBZ0IsS0FDekNGLE1BQU0sU0FBU25FLFNBQVEsU0FBUytGLEdBQ2xELElBQUlDLEVBQVFELEVBQUs1QixNQUFNLEtBQ25CdE4sRUFBTW1QLEVBQU1yRyxRQUFRdUUsT0FDeEIsR0FBSXJOLEVBQUssQ0FDUCxJQUFJTixFQUFReVAsRUFBTXBELEtBQUssS0FBS3NCLE9BQzVCdEgsRUFBUXFELE9BQU9wSixFQUFLTixPQUdqQnFHLElBZ0ZIRixFQUFRa0gsSUFBTSxnQkFBaUI2QixFQUFNQSxFQUFJUSxZQUFjdkosRUFBUUUsUUFBUXpHLElBQUksaUJBQzNFLElBQUk0RyxFQUFPLGFBQWMwSSxFQUFNQSxFQUFJdkksU0FBV3VJLEVBQUlTLGFBQ2xEdkYsRUFBUSxJQUFJNEQsRUFBU3hILEVBQU1MLEtBRzdCK0ksRUFBSTVFLFFBQVUsV0FDWkwsRUFBTyxJQUFJcEIsVUFBVSw0QkFHdkJxRyxFQUFJVSxVQUFZLFdBQ2QzRixFQUFPLElBQUlwQixVQUFVLDRCQUd2QnFHLEVBQUlXLFFBQVUsV0FDWjVGLEVBQU8sSUFBSXlFLEVBQWEsVUFBVyxnQkFHckNRLEVBQUlZLEtBQUtkLEVBQVE1SSxPQUFRNEksRUFBUTNCLEtBQUssR0FFVixZQUF4QjJCLEVBQVExQixZQUNWNEIsRUFBSWEsaUJBQWtCLEVBQ1csU0FBeEJmLEVBQVExQixjQUNqQjRCLEVBQUlhLGlCQUFrQixHQUdwQixpQkFBa0JiLEdBQU9ySCxFQUFRRyxPQUNuQ2tILEVBQUljLGFBQWUsUUFHckJoQixFQUFRM0ksUUFBUW9ELFNBQVEsU0FBU3pKLEVBQU9WLEdBQ3RDNFAsRUFBSWUsaUJBQWlCM1EsRUFBTVUsTUFHekJnUCxFQUFRekIsU0FDVnlCLEVBQVF6QixPQUFPMkMsaUJBQWlCLFFBQVNkLEdBRXpDRixFQUFJaUIsbUJBQXFCLFdBRUEsSUFBbkJqQixFQUFJa0IsWUFDTnBCLEVBQVF6QixPQUFPOEMsb0JBQW9CLFFBQVNqQixLQUtsREYsRUFBSW9CLFVBQWtDLElBQXRCdEIsRUFBUTNELFVBQTRCLEtBQU8yRCxFQUFRM0QsY0FJdkUzRSxFQUFNNkosVUFBVyxFQUVaM0ksS0FBS2xCLFFBQ1JrQixLQUFLbEIsTUFBUUEsRUFDYmtCLEtBQUsyQixRQUFVQSxFQUNmM0IsS0FBS3NGLFFBQVVBLEVBQ2Z0RixLQUFLb0csU0FBV0EsSSw2QkMvZmxCeFAsRUFBT0QsUUFBVSxFQUFRLElBQU1nUyxZLGlCQ0gvQjs7Ozs7OztHQVFDLElBQWtCalMsSUFJWCxXQUFlLGFBT3ZCLFNBQVNrUyxFQUFXQyxHQUNsQixNQUFvQixtQkFBTkEsRUFLaEIsSUFTSTlHLEVBUkE1RixNQUFNNEYsUUFDRzVGLE1BQU00RixRQUVOLFNBQVU4RyxHQUNuQixNQUE2QyxtQkFBdENoUixPQUFPa0IsVUFBVWlGLFNBQVMxRyxLQUFLdVIsSUFNdENuTixFQUFNLEVBQ05vTixPQUFZLEVBQ1pDLE9BQW9CLEVBRXBCQyxFQUFPLFNBQWNoRSxFQUFVaUUsR0FDakMvTixFQUFNUSxHQUFPc0osRUFDYjlKLEVBQU1RLEVBQU0sR0FBS3VOLEVBRUwsS0FEWnZOLEdBQU8sS0FLRHFOLEVBQ0ZBLEVBQWtCRyxHQUVsQkMsTUFhRkMsRUFBa0Msb0JBQVhyUyxPQUF5QkEsWUFBUzJLLEVBQ3pEMkgsRUFBZ0JELEdBQWlCLEdBQ2pDRSxFQUEwQkQsRUFBY0Usa0JBQW9CRixFQUFjRyx1QkFDMUU5UCxFQUF5QixvQkFBVHNHLFdBQTJDLElBQVpwRyxHQUF5RCxxQkFBOUIsR0FBR29FLFNBQVMxRyxLQUFLc0MsR0FHM0Y2UCxFQUF3QyxvQkFBdEJDLG1CQUE4RCxvQkFBbEJDLGVBQTJELG9CQUFuQkMsZUEwQzFHLFNBQVNDLElBR1AsSUFBSUMsRUFBbUJoUCxXQUN2QixPQUFPLFdBQ0wsT0FBT2dQLEVBQWlCWixFQUFPLElBSW5DLElBQUloTyxFQUFRLElBQUlpQixNQUFNLEtBQ3RCLFNBQVMrTSxJQUNQLElBQUssSUFBSS9SLEVBQUksRUFBR0EsRUFBSXVFLEVBQUt2RSxHQUFLLEdBSTVCNk4sRUFIZTlKLEVBQU0vRCxJQUNYK0QsRUFBTS9ELEVBQUksSUFJcEIrRCxFQUFNL0QsUUFBS3VLLEVBQ1h4RyxFQUFNL0QsRUFBSSxRQUFLdUssRUFHakJoRyxFQUFNLEVBYVIsSUF6Q01xTyxFQVpBQyxFQUNBQyxFQUNBQyxFQW1ERmYsT0FBZ0IsRUFjcEIsU0FBUy9FLEVBQUsrRixFQUFlQyxHQUMzQixJQUFJQyxFQUFTalIsS0FFVGtSLEVBQVEsSUFBSWxSLEtBQUs4TixZQUFZbEwsUUFFUDBGLElBQXRCNEksRUFBTUMsSUFDUkMsRUFBWUYsR0FHZCxJQUFJRyxFQUFTSixFQUFPSSxPQUdwQixHQUFJQSxFQUFRLENBQ1YsSUFBSXpGLEVBQVc1SSxVQUFVcU8sRUFBUyxHQUNsQ3pCLEdBQUssV0FDSCxPQUFPMEIsRUFBZUQsRUFBUUgsRUFBT3RGLEVBQVVxRixFQUFPTSxpQkFHeERDLEVBQVVQLEVBQVFDLEVBQU9ILEVBQWVDLEdBRzFDLE9BQU9FLEVBa0NULFNBQVNPLEVBQVVoUyxHQUlqQixHQUFJQSxHQUE0QixpQkFBWEEsR0FBdUJBLEVBQU9xTyxjQUZqQzlOLEtBR2hCLE9BQU9QLEVBR1QsSUFBSWlLLEVBQVUsSUFOSTFKLEtBTVk0QyxHQUU5QixPQURBd0csRUFBUU0sRUFBU2pLLEdBQ1ZpSyxFQTdFTHBKLEVBQ0Z5UCxFQXpFTyxXQUNMLE9BQU92UCxFQUFRcUMsU0FBU2lOLElBeUVqQkksR0F6RExVLEVBQWEsRUFDYkMsRUFBVyxJQUFJWCxFQUF3QkosR0FDdkNnQixFQUFPWSxTQUFTQyxlQUFlLElBQ25DZCxFQUFTZSxRQUFRZCxFQUFNLENBQUVlLGVBQWUsSUF1RHhDOUIsRUFyRE8sV0FDTGUsRUFBS2dCLEtBQU9sQixJQUFlQSxFQUFhLElBcURqQ1AsSUEvQ0xNLEVBQVUsSUFBSUgsZ0JBQ1Z1QixNQUFNQyxVQUFZbEMsRUErQzFCQyxFQTlDTyxXQUNMLE9BQU9ZLEVBQVFzQixNQUFNQyxZQUFZLEtBK0NuQ25DLE9BRDJCekgsSUFBbEIwSCxFQWxCWCxXQUNFLElBQ0UsSUFBSW1DLEVBQVEzTixTQUFTLGNBQVRBLEdBQTBCNE4sUUFBUSxTQUU5QyxZQXpEdUIsS0F3RHZCMUMsRUFBWXlDLEVBQU1FLFdBQWFGLEVBQU1HLGNBdkQ5QixXQUNMNUMsRUFBVUksSUFJUFcsSUFvREwsTUFBTzlPLEdBQ1AsT0FBTzhPLEtBYU84QixHQUVBOUIsSUF1RWxCLElBQUlVLEVBQWF6TSxLQUFLQyxTQUFTQyxTQUFTLElBQUk0TixVQUFVLEdBRXRELFNBQVM1UCxLQUVULElBQUk2UCxPQUFVLEVBQ1ZDLEVBQVksRUFDWkMsRUFBVyxFQTZEZixTQUFTQyxFQUFvQmxKLEVBQVNtSixFQUFlQyxHQUMvQ0QsRUFBYy9FLGNBQWdCcEUsRUFBUW9FLGFBQWVnRixJQUFZOUgsR0FBUTZILEVBQWMvRSxZQUFZMUUsVUFBWXFJLEVBZnJILFNBQTJCL0gsRUFBU3FKLEdBQzlCQSxFQUFTMUIsU0FBV3FCLEVBQ3RCTSxFQUFRdEosRUFBU3FKLEVBQVN4QixTQUNqQndCLEVBQVMxQixTQUFXc0IsRUFDN0IxSixFQUFPUyxFQUFTcUosRUFBU3hCLFNBRXpCQyxFQUFVdUIsT0FBVXpLLEdBQVcsU0FBVXRKLEdBQ3ZDLE9BQU9vSyxFQUFRTSxFQUFTMUssTUFDdkIsU0FBVWlVLEdBQ1gsT0FBT2hLLEVBQU9TLEVBQVN1SixNQU96QkMsQ0FBa0J4SixFQUFTbUosUUFFWHZLLElBQVp3SyxFQUNGRSxFQUFRdEosRUFBU21KLEdBQ1JyRCxFQUFXc0QsR0FqRDFCLFNBQStCcEosRUFBU3FKLEVBQVVELEdBQ2hEbEQsR0FBSyxTQUFVbEcsR0FDYixJQUFJeUosR0FBUyxFQUNUNUosRUFYUixTQUFpQnVKLEVBQVM5VCxFQUFPb1UsRUFBb0JDLEdBQ25ELElBQ0VQLEVBQVE1VSxLQUFLYyxFQUFPb1UsRUFBb0JDLEdBQ3hDLE1BQU8xUixHQUNQLE9BQU9BLEdBT0syUixDQUFRUixFQUFTQyxHQUFVLFNBQVUvVCxHQUMzQ21VLElBR0pBLEdBQVMsRUFDTEosSUFBYS9ULEVBQ2ZvSyxFQUFRTSxFQUFTMUssR0FFakJnVSxFQUFRdEosRUFBUzFLLE9BRWxCLFNBQVVpVSxHQUNQRSxJQUdKQSxHQUFTLEVBRVRsSyxFQUFPUyxFQUFTdUosTUFDRHZKLEVBQVE2SixTQUVwQkosR0FBVTVKLElBQ2I0SixHQUFTLEVBQ1RsSyxFQUFPUyxFQUFTSCxNQUVqQkcsR0F3QkM4SixDQUFzQjlKLEVBQVNtSixFQUFlQyxHQUU5Q0UsRUFBUXRKLEVBQVNtSixHQUt2QixTQUFTekosRUFBUU0sRUFBUzFLLEdBQ3hCLEdBQUkwSyxJQUFZMUssRUFDZGlLLEVBQU9TLEVBMUVGLElBQUk3QixVQUFVLGtEQTJFZCxHQXpTSGlELFNBRG9CMkUsRUEwU0l6USxHQXhTZixPQUFOeVEsR0FBd0IsV0FBVDNFLEdBQThCLGFBQVRBLEVBa1R6Q2tJLEVBQVF0SixFQUFTMUssT0FWaUIsQ0FDbEMsSUFBSThULE9BQVUsRUFDZCxJQUNFQSxFQUFVOVQsRUFBTWdNLEtBQ2hCLE1BQU96QixHQUVQLFlBREFOLEVBQU9TLEVBQVNILEdBR2xCcUosRUFBb0JsSixFQUFTMUssRUFBTzhULEdBbFR4QyxJQUEwQnJELEVBQ3BCM0UsRUF1VE4sU0FBUzJJLEVBQWlCL0osR0FDcEJBLEVBQVFnSyxVQUNWaEssRUFBUWdLLFNBQVNoSyxFQUFRNkgsU0FHM0JvQyxFQUFRakssR0FHVixTQUFTc0osRUFBUXRKLEVBQVMxSyxHQUNwQjBLLEVBQVEySCxTQUFXb0IsSUFJdkIvSSxFQUFRNkgsUUFBVXZTLEVBQ2xCMEssRUFBUTJILE9BQVNxQixFQUVtQixJQUFoQ2hKLEVBQVFrSyxhQUFhMVIsUUFDdkIwTixFQUFLK0QsRUFBU2pLLElBSWxCLFNBQVNULEVBQU9TLEVBQVN1SixHQUNuQnZKLEVBQVEySCxTQUFXb0IsSUFHdkIvSSxFQUFRMkgsT0FBU3NCLEVBQ2pCakosRUFBUTZILFFBQVUwQixFQUVsQnJELEVBQUs2RCxFQUFrQi9KLElBR3pCLFNBQVM4SCxFQUFVUCxFQUFRQyxFQUFPSCxFQUFlQyxHQUMvQyxJQUFJNEMsRUFBZTNDLEVBQU8yQyxhQUN0QjFSLEVBQVMwUixFQUFhMVIsT0FHMUIrTyxFQUFPeUMsU0FBVyxLQUVsQkUsRUFBYTFSLEdBQVVnUCxFQUN2QjBDLEVBQWExUixFQUFTd1EsR0FBYTNCLEVBQ25DNkMsRUFBYTFSLEVBQVN5USxHQUFZM0IsRUFFbkIsSUFBWDlPLEdBQWdCK08sRUFBT0ksUUFDekJ6QixFQUFLK0QsRUFBUzFDLEdBSWxCLFNBQVMwQyxFQUFRakssR0FDZixJQUFJbUssRUFBY25LLEVBQVFrSyxhQUN0QkUsRUFBVXBLLEVBQVEySCxPQUV0QixHQUEyQixJQUF2QndDLEVBQVkzUixPQUFoQixDQVFBLElBSkEsSUFBSWdQLE9BQVEsRUFDUnRGLE9BQVcsRUFDWG1JLEVBQVNySyxFQUFRNkgsUUFFWnhULEVBQUksRUFBR0EsRUFBSThWLEVBQVkzUixPQUFRbkUsR0FBSyxFQUMzQ21ULEVBQVEyQyxFQUFZOVYsR0FDcEI2TixFQUFXaUksRUFBWTlWLEVBQUkrVixHQUV2QjVDLEVBQ0ZJLEVBQWV3QyxFQUFTNUMsRUFBT3RGLEVBQVVtSSxHQUV6Q25JLEVBQVNtSSxHQUlickssRUFBUWtLLGFBQWExUixPQUFTLEdBR2hDLFNBQVNvUCxFQUFld0MsRUFBU3BLLEVBQVNrQyxFQUFVbUksR0FDbEQsSUFBSUMsRUFBY3hFLEVBQVc1RCxHQUN6QjVNLE9BQVEsRUFDUnVLLE9BQVEsRUFDUjBLLEdBQVksRUFFaEIsR0FBSUQsRUFBYSxDQUNmLElBQ0VoVixFQUFRNE0sRUFBU21JLEdBQ2pCLE1BQU9wUyxHQUNQc1MsR0FBWSxFQUNaMUssRUFBUTVILEVBR1YsR0FBSStILElBQVkxSyxFQUVkLFlBREFpSyxFQUFPUyxFQTdLSixJQUFJN0IsVUFBVSw4REFpTG5CN0ksRUFBUStVLEVBR05ySyxFQUFRMkgsU0FBV29CLElBRVp1QixHQUFlQyxFQUN4QjdLLEVBQVFNLEVBQVMxSyxJQUNNLElBQWRpVixFQUNUaEwsRUFBT1MsRUFBU0gsR0FDUHVLLElBQVlwQixFQUNyQk0sRUFBUXRKLEVBQVMxSyxHQUNSOFUsSUFBWW5CLEdBQ3JCMUosRUFBT1MsRUFBUzFLLElBZ0JwQixJQUFJa1YsRUFBSyxFQUtULFNBQVM5QyxFQUFZMUgsR0FDbkJBLEVBQVF5SCxHQUFjK0MsSUFDdEJ4SyxFQUFRMkgsWUFBUy9JLEVBQ2pCb0IsRUFBUTZILGFBQVVqSixFQUNsQm9CLEVBQVFrSyxhQUFlLEdBT3pCLElBQUlPLEVBQWEsV0FDZixTQUFTQSxFQUFXQyxFQUFhakksR0FDL0JuTSxLQUFLcVUscUJBQXVCRCxFQUM1QnBVLEtBQUswSixRQUFVLElBQUkwSyxFQUFZeFIsR0FFMUI1QyxLQUFLMEosUUFBUXlILElBQ2hCQyxFQUFZcFIsS0FBSzBKLFNBR2ZmLEVBQVF3RCxJQUNWbk0sS0FBS2tDLE9BQVNpSyxFQUFNakssT0FDcEJsQyxLQUFLc1UsV0FBYW5JLEVBQU1qSyxPQUV4QmxDLEtBQUt1UixRQUFVLElBQUl4TyxNQUFNL0MsS0FBS2tDLFFBRVYsSUFBaEJsQyxLQUFLa0MsT0FDUDhRLEVBQVFoVCxLQUFLMEosUUFBUzFKLEtBQUt1UixVQUUzQnZSLEtBQUtrQyxPQUFTbEMsS0FBS2tDLFFBQVUsRUFDN0JsQyxLQUFLdVUsV0FBV3BJLEdBQ1EsSUFBcEJuTSxLQUFLc1UsWUFDUHRCLEVBQVFoVCxLQUFLMEosUUFBUzFKLEtBQUt1UixXQUkvQnRJLEVBQU9qSixLQUFLMEosUUE1QlQsSUFBSXBJLE1BQU0sNENBMEdqQixPQTFFQTZTLEVBQVd4VSxVQUFVNFUsV0FBYSxTQUFvQnBJLEdBQ3BELElBQUssSUFBSXBPLEVBQUksRUFBR2lDLEtBQUtxUixTQUFXb0IsR0FBVzFVLEVBQUlvTyxFQUFNakssT0FBUW5FLElBQzNEaUMsS0FBS3dVLFdBQVdySSxFQUFNcE8sR0FBSUEsSUFJOUJvVyxFQUFXeFUsVUFBVTZVLFdBQWEsU0FBb0JDLEVBQU8xVyxHQUMzRCxJQUFJSyxFQUFJNEIsS0FBS3FVLHFCQUNUSyxFQUFhdFcsRUFBRWdMLFFBR25CLEdBQUlzTCxJQUFlakQsRUFBVyxDQUM1QixJQUFJa0QsT0FBUSxFQUNScEwsT0FBUSxFQUNScUwsR0FBVyxFQUNmLElBQ0VELEVBQVFGLEVBQU16SixLQUNkLE1BQU9ySixHQUNQaVQsR0FBVyxFQUNYckwsRUFBUTVILEVBR1YsR0FBSWdULElBQVUzSixHQUFReUosRUFBTXBELFNBQVdvQixFQUNyQ3pTLEtBQUs2VSxXQUFXSixFQUFNcEQsT0FBUXRULEVBQUcwVyxFQUFNbEQsY0FDbEMsR0FBcUIsbUJBQVZvRCxFQUNoQjNVLEtBQUtzVSxhQUNMdFUsS0FBS3VSLFFBQVF4VCxHQUFLMFcsT0FDYixHQUFJclcsSUFBTTBXLEVBQVcsQ0FDMUIsSUFBSXBMLEVBQVUsSUFBSXRMLEVBQUV3RSxHQUNoQmdTLEVBQ0YzTCxFQUFPUyxFQUFTSCxHQUVoQnFKLEVBQW9CbEosRUFBUytLLEVBQU9FLEdBRXRDM1UsS0FBSytVLGNBQWNyTCxFQUFTM0wsUUFFNUJpQyxLQUFLK1UsY0FBYyxJQUFJM1csR0FBRSxTQUFVc1csR0FDakMsT0FBT0EsRUFBV0QsTUFDaEIxVyxRQUdOaUMsS0FBSytVLGNBQWNMLEVBQVdELEdBQVExVyxJQUkxQ29XLEVBQVd4VSxVQUFVa1YsV0FBYSxTQUFvQkcsRUFBT2pYLEVBQUdpQixHQUM5RCxJQUFJMEssRUFBVTFKLEtBQUswSixRQUdmQSxFQUFRMkgsU0FBV29CLElBQ3JCelMsS0FBS3NVLGFBRURVLElBQVVyQyxFQUNaMUosRUFBT1MsRUFBUzFLLEdBRWhCZ0IsS0FBS3VSLFFBQVF4VCxHQUFLaUIsR0FJRSxJQUFwQmdCLEtBQUtzVSxZQUNQdEIsRUFBUXRKLEVBQVMxSixLQUFLdVIsVUFJMUI0QyxFQUFXeFUsVUFBVW9WLGNBQWdCLFNBQXVCckwsRUFBUzNMLEdBQ25FLElBQUlrWCxFQUFhalYsS0FFakJ3UixFQUFVOUgsT0FBU3BCLEdBQVcsU0FBVXRKLEdBQ3RDLE9BQU9pVyxFQUFXSixXQUFXbkMsRUFBVzNVLEVBQUdpQixNQUMxQyxTQUFVaVUsR0FDWCxPQUFPZ0MsRUFBV0osV0FBV2xDLEVBQVU1VSxFQUFHa1YsT0FJdkNrQixFQXZHUSxHQTBZYlcsRUFBWSxXQUNkLFNBQVM5TCxFQUFRa00sR0FDZmxWLEtBQUttUixHQTFaQStDLElBMlpMbFUsS0FBS3VSLFFBQVV2UixLQUFLcVIsWUFBUy9JLEVBQzdCdEksS0FBSzRULGFBQWUsR0FFaEJoUixJQUFTc1MsSUFDUyxtQkFBYkEsR0F2SGIsV0FDRSxNQUFNLElBQUlyTixVQUFVLHNGQXNIa0JzTixHQUNsQ25WLGdCQUFnQmdKLEVBOWF0QixTQUEyQlUsRUFBU3dMLEdBQ2xDLElBQ0VBLEdBQVMsU0FBd0JsVyxHQUMvQm9LLEVBQVFNLEVBQVMxSyxNQUNoQixTQUF1QmlVLEdBQ3hCaEssRUFBT1MsRUFBU3VKLE1BRWxCLE1BQU90UixHQUNQc0gsRUFBT1MsRUFBUy9ILElBc2FZeVQsQ0FBa0JwVixLQUFNa1YsR0FwSHhELFdBQ0UsTUFBTSxJQUFJck4sVUFBVSx5SEFtSDhDd04sSUE2UGxFLE9BL0RBck0sRUFBUXJKLFVBQVUyVixNQUFRLFNBQWdCdEUsR0FDeEMsT0FBT2hSLEtBQUtnTCxLQUFLLEtBQU1nRyxJQTJDekJoSSxFQUFRckosVUFBVTRWLFFBQVUsU0FBa0IzSixHQUM1QyxJQUNJa0MsRUFEVTlOLEtBQ1k4TixZQUUxQixPQUFJMEIsRUFBVzVELEdBSEQ1TCxLQUlHZ0wsTUFBSyxTQUFVaE0sR0FDNUIsT0FBTzhPLEVBQVkxRSxRQUFRd0MsS0FBWVosTUFBSyxXQUMxQyxPQUFPaE0sUUFFUixTQUFVaVUsR0FDWCxPQUFPbkYsRUFBWTFFLFFBQVF3QyxLQUFZWixNQUFLLFdBQzFDLE1BQU1pSSxRQVZFalQsS0FlQ2dMLEtBQUtZLEVBQVVBLElBR3pCNUMsRUFyUU8sR0F1VGhCLE9BL0NBOEwsRUFBVW5WLFVBQVVxTCxLQUFPQSxFQUMzQjhKLEVBQVVVLElBMWZWLFNBQWF4SixHQUNYLE9BQU8sSUFBSW1JLEVBQVduVSxLQUFNZ00sR0FBU3RDLFNBMGZ2Q29MLEVBQVVXLEtBdGJWLFNBQWN6SixHQUVaLElBQUlvSSxFQUFjcFUsS0FFbEIsT0FBSzJJLEVBQVFxRCxHQUtKLElBQUlvSSxHQUFZLFNBQVVoTCxFQUFTSCxHQUV4QyxJQURBLElBQUkvRyxFQUFTOEosRUFBUTlKLE9BQ1puRSxFQUFJLEVBQUdBLEVBQUltRSxFQUFRbkUsSUFDMUJxVyxFQUFZaEwsUUFBUTRDLEVBQVFqTyxJQUFJaU4sS0FBSzVCLEVBQVNILE1BUDNDLElBQUltTCxHQUFZLFNBQVVzQixFQUFHek0sR0FDbEMsT0FBT0EsRUFBTyxJQUFJcEIsVUFBVSx3Q0FpYmxDaU4sRUFBVTFMLFFBQVVxSSxFQUNwQnFELEVBQVU3TCxPQXBZVixTQUFrQmdLLEdBRWhCLElBQ0l2SixFQUFVLElBREkxSixLQUNZNEMsR0FFOUIsT0FEQXFHLEVBQU9TLEVBQVN1SixHQUNUdkosR0FnWVRvTCxFQUFVYSxjQTdpQ1YsU0FBc0JDLEdBQ3BCakcsRUFBb0JpRyxHQTZpQ3RCZCxFQUFVZSxTQTFpQ1YsU0FBaUJDLEdBQ2ZsRyxFQUFPa0csR0EwaUNUaEIsRUFBVWlCLE1BQVFuRyxFQXFDbEJrRixFQUFVdkYsU0FsQ1YsV0FDRSxJQUFJeUcsT0FBUSxFQUVaLFFBQXNCLElBQVhDLEVBQ1RELEVBQVFDLE9BQ0gsR0FBb0Isb0JBQVRyUCxLQUNoQm9QLEVBQVFwUCxVQUVSLElBQ0VvUCxFQUFReFIsU0FBUyxjQUFUQSxHQUNSLE1BQU83QyxHQUNQLE1BQU0sSUFBSUwsTUFBTSw0RUFJcEIsSUFBSTRVLEVBQUlGLEVBQU1oTixRQUVkLEdBQUlrTixFQUFHLENBQ0wsSUFBSUMsRUFBa0IsS0FDdEIsSUFDRUEsRUFBa0IxWCxPQUFPa0IsVUFBVWlGLFNBQVMxRyxLQUFLZ1ksRUFBRTlNLFdBQ25ELE1BQU96SCxJQUlULEdBQXdCLHFCQUFwQndVLElBQTJDRCxFQUFFRSxLQUMvQyxPQUlKSixFQUFNaE4sUUFBVThMLEdBS2xCQSxFQUFVOUwsUUFBVThMLEVBRWJBLEdBdG9DeUR0WCxFQUFPRCxRQUFVRCxNLG1EQ1JqRm1CLE9BQU9DLGVBQWVuQixFQUFTLGFBQWMsQ0FBRXlCLE9BQU8sSyw2QkNBdERQLE9BQU9DLGVBQWVuQixFQUFTLGFBQWMsQ0FBRXlCLE9BQU8sSUFDdEQsTUFBTWdHLEVBQVcsRUFBUSxHQUNuQnFSLEVBQWMsRUFBUSxJQWM1QjlZLEVBQVE4QixPQWJSNkYsZUFBc0JvUixFQUFPeEUsRUFBTXpNLEdBQy9CLE1BQU1rUixFQUFVekUsR0FBUXJULE9BQU9xTixLQUFLZ0csR0FBTTVQLE9BQVMsRUFBSTRQLEVBQU91RSxFQUFZRyw2QkFDcEVyUixFQUFVLENBQ1pDLE9BQVEsT0FDUkMsUUFBUyxDQUNMRSxjQUFlLFVBQVUrUSxFQUFNRyxlQUMvQixlQUFnQixzQkFDYnBSLEdBRVBHLEtBQU1nRyxLQUFLa0wsVUFBVUgsSUFFekIsYUFBYTdRLE1BQU0sR0FBR1YsRUFBUzVFLE9BQU94QixJQUFJLDZDQUE4Q3VHLElBZ0I1RjVILEVBQVFvWixPQWJSelIsZUFBc0JvUixFQUFPcEMsRUFBSXBDLEVBQU16TSxHQUNuQyxNQUFNa1IsRUFBVXpFLEdBQVFyVCxPQUFPcU4sS0FBS2dHLEdBQU01UCxPQUFTLEVBQUk0UCxFQUFPdUUsRUFBWU8sNkJBQ3BFelIsRUFBVSxDQUNaQyxPQUFRLFFBQ1JDLFFBQVMsQ0FDTEUsY0FBZSxVQUFVK1EsRUFBTUcsZUFDL0IsZUFBZ0Isc0JBQ2JwUixHQUVQRyxLQUFNZ0csS0FBS2tMLFVBQVVILElBRXpCLGFBQWE3USxNQUFNLEdBQUdWLEVBQVM1RSxPQUFPeEIsSUFBSSw4Q0FBOENzVixJQUFNL08sSUFjbEc1SCxFQUFRcUIsSUFYUnNHLGVBQW1Cb1IsRUFBT3BDLEVBQUk3TyxHQUMxQixNQUFNRixFQUFVLENBQ1pDLE9BQVEsTUFDUkMsUUFBUyxDQUNMRSxjQUFlLFVBQVUrUSxFQUFNRyxlQUMvQixlQUFnQixzQkFDYnBSLElBR1gsYUFBYUssTUFBTSxHQUFHVixFQUFTNUUsT0FBT3hCLElBQUksOENBQThDc1YsSUFBTS9PLElBZ0JsRzVILEVBQVFzWixVQWJSM1IsZUFBeUJvUixFQUFPcEMsRUFBSXBDLEVBQU16TSxHQUN0QyxNQUFNa1IsRUFBVXpFLEVBQ1YzTSxFQUFVLENBQ1pDLE9BQVEsT0FDUkMsUUFBUyxDQUNMRSxjQUFlLFVBQVUrUSxFQUFNRyxlQUMvQixlQUFnQixzQkFDYnBSLEdBRVBHLEtBQU1nRyxLQUFLa0wsVUFBVUgsSUFFekIsYUFBYTdRLE1BQU0sR0FBR1YsRUFBUzVFLE9BQU94QixJQUFJLDhDQUE4Q3NWLGNBQWdCL08sSUFnQjVHNUgsRUFBUXVaLFFBYlI1UixlQUF1Qm9SLEVBQU9wQyxFQUFJcEMsRUFBTXpNLEdBQ3BDLE1BQU1rUixFQUFVekUsRUFDVjNNLEVBQVUsQ0FDWkMsT0FBUSxPQUNSQyxRQUFTLENBQ0xFLGNBQWUsVUFBVStRLEVBQU1HLGVBQy9CLGVBQWdCLHNCQUNicFIsR0FFUEcsS0FBTWdHLEtBQUtrTCxVQUFVSCxJQUV6QixhQUFhN1EsTUFBTSxHQUFHVixFQUFTNUUsT0FBT3hCLElBQUksOENBQThDc1YsWUFBYy9PLEssaUJDckUxRyx3QkFDRSxhQWNBM0gsRUFBT0QsUUFaUCxTQUFjd1osR0FTWixPQU5JQSxhQUFlQyxFQUNSRCxFQUVBQyxFQUFPQyxLQUFLRixFQUFJblMsV0FBWSxXQUd6QkEsU0FBUyxXQVozQixLLHVEQ0FBOzs7Ozs7O0FBVUEsSUFBSXNTLEVBQVMsRUFBUSxJQUNqQkMsRUFBVSxFQUFRLElBQ2xCeE8sRUFBVSxFQUFRLElBbUR0QixTQUFTeU8sSUFDUCxPQUFPSixFQUFPSyxvQkFDVixXQUNBLFdBR04sU0FBU0MsRUFBY0MsRUFBTXJWLEdBQzNCLEdBQUlrVixJQUFlbFYsRUFDakIsTUFBTSxJQUFJc0wsV0FBVyw4QkFjdkIsT0FaSXdKLEVBQU9LLHFCQUVURSxFQUFPLElBQUl2TixXQUFXOUgsSUFDakJzVixVQUFZUixFQUFPclgsV0FHWCxPQUFUNFgsSUFDRkEsRUFBTyxJQUFJUCxFQUFPOVUsSUFFcEJxVixFQUFLclYsT0FBU0EsR0FHVHFWLEVBYVQsU0FBU1AsRUFBUW5ILEVBQUs0SCxFQUFrQnZWLEdBQ3RDLEtBQUs4VSxFQUFPSyxxQkFBeUJyWCxnQkFBZ0JnWCxHQUNuRCxPQUFPLElBQUlBLEVBQU9uSCxFQUFLNEgsRUFBa0J2VixHQUkzQyxHQUFtQixpQkFBUjJOLEVBQWtCLENBQzNCLEdBQWdDLGlCQUFyQjRILEVBQ1QsTUFBTSxJQUFJblcsTUFDUixxRUFHSixPQUFPb1csRUFBWTFYLEtBQU02UCxHQUUzQixPQUFPb0gsRUFBS2pYLEtBQU02UCxFQUFLNEgsRUFBa0J2VixHQVczQyxTQUFTK1UsRUFBTU0sRUFBTXZZLEVBQU95WSxFQUFrQnZWLEdBQzVDLEdBQXFCLGlCQUFWbEQsRUFDVCxNQUFNLElBQUk2SSxVQUFVLHlDQUd0QixNQUEyQixvQkFBaEJQLGFBQStCdEksYUFBaUJzSSxZQTZIN0QsU0FBMEJpUSxFQUFNNVUsRUFBT2dWLEVBQVl6VixHQUdqRCxHQUZBUyxFQUFNc0gsV0FFRjBOLEVBQWEsR0FBS2hWLEVBQU1zSCxXQUFhME4sRUFDdkMsTUFBTSxJQUFJbkssV0FBVyw2QkFHdkIsR0FBSTdLLEVBQU1zSCxXQUFhME4sR0FBY3pWLEdBQVUsR0FDN0MsTUFBTSxJQUFJc0wsV0FBVyw2QkFJckI3SyxPQURpQjJGLElBQWZxUCxRQUF1Q3JQLElBQVhwRyxFQUN0QixJQUFJOEgsV0FBV3JILFFBQ0gyRixJQUFYcEcsRUFDRCxJQUFJOEgsV0FBV3JILEVBQU9nVixHQUV0QixJQUFJM04sV0FBV3JILEVBQU9nVixFQUFZelYsR0FHeEM4VSxFQUFPSyxxQkFFVEUsRUFBTzVVLEdBQ0Y2VSxVQUFZUixFQUFPclgsVUFHeEI0WCxFQUFPSyxFQUFjTCxFQUFNNVUsR0FFN0IsT0FBTzRVLEVBdkpFTSxDQUFnQk4sRUFBTXZZLEVBQU95WSxFQUFrQnZWLEdBR25DLGlCQUFWbEQsRUF3RmIsU0FBcUJ1WSxFQUFNTyxFQUFRQyxHQUNULGlCQUFiQSxHQUFzQyxLQUFiQSxJQUNsQ0EsRUFBVyxRQUdiLElBQUtmLEVBQU9nQixXQUFXRCxHQUNyQixNQUFNLElBQUlsUSxVQUFVLDhDQUd0QixJQUFJM0YsRUFBd0MsRUFBL0IrSCxFQUFXNk4sRUFBUUMsR0FHNUJFLEdBRkpWLEVBQU9ELEVBQWFDLEVBQU1yVixJQUVSZ1csTUFBTUosRUFBUUMsR0FFNUJFLElBQVcvVixJQUlicVYsRUFBT0EsRUFBS3pOLE1BQU0sRUFBR21PLElBR3ZCLE9BQU9WLEVBNUdFWSxDQUFXWixFQUFNdlksRUFBT3lZLEdBc0puQyxTQUFxQkYsRUFBTS9QLEdBQ3pCLEdBQUl3UCxFQUFPb0IsU0FBUzVRLEdBQU0sQ0FDeEIsSUFBSWxGLEVBQTRCLEVBQXRCK1YsRUFBUTdRLEVBQUl0RixRQUd0QixPQUFvQixLQUZwQnFWLEVBQU9ELEVBQWFDLEVBQU1qVixJQUVqQkosT0FDQXFWLEdBR1QvUCxFQUFJOFEsS0FBS2YsRUFBTSxFQUFHLEVBQUdqVixHQUNkaVYsR0FHVCxHQUFJL1AsRUFBSyxDQUNQLEdBQTRCLG9CQUFoQkYsYUFDUkUsRUFBSTBDLGtCQUFrQjVDLGFBQWdCLFdBQVlFLEVBQ3BELE1BQTBCLGlCQUFmQSxFQUFJdEYsU0ErOENMcVcsRUEvOENrQy9RLEVBQUl0RixTQWc5Q3JDcVcsRUEvOENGakIsRUFBYUMsRUFBTSxHQUVyQkssRUFBY0wsRUFBTS9QLEdBRzdCLEdBQWlCLFdBQWJBLEVBQUlzRCxNQUFxQm5DLEVBQVFuQixFQUFJc0ssTUFDdkMsT0FBTzhGLEVBQWNMLEVBQU0vUCxFQUFJc0ssTUF3OENyQyxJQUFnQnlHLEVBcDhDZCxNQUFNLElBQUkxUSxVQUFVLHNGQTlLYjJRLENBQVdqQixFQUFNdlksR0E0QjFCLFNBQVN5WixFQUFZQyxHQUNuQixHQUFvQixpQkFBVEEsRUFDVCxNQUFNLElBQUk3USxVQUFVLG9DQUNmLEdBQUk2USxFQUFPLEVBQ2hCLE1BQU0sSUFBSWxMLFdBQVcsd0NBNEJ6QixTQUFTa0ssRUFBYUgsRUFBTW1CLEdBRzFCLEdBRkFELEVBQVdDLEdBQ1huQixFQUFPRCxFQUFhQyxFQUFNbUIsRUFBTyxFQUFJLEVBQW9CLEVBQWhCTCxFQUFRSyxLQUM1QzFCLEVBQU9LLG9CQUNWLElBQUssSUFBSXRaLEVBQUksRUFBR0EsRUFBSTJhLElBQVEzYSxFQUMxQndaLEVBQUt4WixHQUFLLEVBR2QsT0FBT3daLEVBd0NULFNBQVNLLEVBQWVMLEVBQU01VSxHQUM1QixJQUFJVCxFQUFTUyxFQUFNVCxPQUFTLEVBQUksRUFBNEIsRUFBeEJtVyxFQUFRMVYsRUFBTVQsUUFDbERxVixFQUFPRCxFQUFhQyxFQUFNclYsR0FDMUIsSUFBSyxJQUFJbkUsRUFBSSxFQUFHQSxFQUFJbUUsRUFBUW5FLEdBQUssRUFDL0J3WixFQUFLeFosR0FBZ0IsSUFBWDRFLEVBQU01RSxHQUVsQixPQUFPd1osRUErRFQsU0FBU2MsRUFBU25XLEdBR2hCLEdBQUlBLEdBQVVrVixJQUNaLE1BQU0sSUFBSTVKLFdBQVcsMERBQ2E0SixJQUFheFMsU0FBUyxJQUFNLFVBRWhFLE9BQWdCLEVBQVQxQyxFQXNGVCxTQUFTK0gsRUFBWTZOLEVBQVFDLEdBQzNCLEdBQUlmLEVBQU9vQixTQUFTTixHQUNsQixPQUFPQSxFQUFPNVYsT0FFaEIsR0FBMkIsb0JBQWhCb0YsYUFBNkQsbUJBQXZCQSxZQUFZQyxTQUN4REQsWUFBWUMsT0FBT3VRLElBQVdBLGFBQWtCeFEsYUFDbkQsT0FBT3dRLEVBQU83TixXQUVNLGlCQUFYNk4sSUFDVEEsRUFBUyxHQUFLQSxHQUdoQixJQUFJeFYsRUFBTXdWLEVBQU81VixPQUNqQixHQUFZLElBQVJJLEVBQVcsT0FBTyxFQUl0QixJQURBLElBQUlxVyxHQUFjLElBRWhCLE9BQVFaLEdBQ04sSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLFNBQ0gsT0FBT3pWLEVBQ1QsSUFBSyxPQUNMLElBQUssUUFDTCxVQUFLZ0csRUFDSCxPQUFPc1EsRUFBWWQsR0FBUTVWLE9BQzdCLElBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssV0FDSCxPQUFhLEVBQU5JLEVBQ1QsSUFBSyxNQUNILE9BQU9BLElBQVEsRUFDakIsSUFBSyxTQUNILE9BQU91VyxFQUFjZixHQUFRNVYsT0FDL0IsUUFDRSxHQUFJeVcsRUFBYSxPQUFPQyxFQUFZZCxHQUFRNVYsT0FDNUM2VixHQUFZLEdBQUtBLEdBQVVqUSxjQUMzQjZRLEdBQWMsR0FNdEIsU0FBU0csRUFBY2YsRUFBVWdCLEVBQU9DLEdBQ3RDLElBQUlMLEdBQWMsRUFjbEIsU0FMY3JRLElBQVZ5USxHQUF1QkEsRUFBUSxLQUNqQ0EsRUFBUSxHQUlOQSxFQUFRL1ksS0FBS2tDLE9BQ2YsTUFBTyxHQU9ULFNBSllvRyxJQUFSMFEsR0FBcUJBLEVBQU1oWixLQUFLa0MsVUFDbEM4VyxFQUFNaFosS0FBS2tDLFFBR1Q4VyxHQUFPLEVBQ1QsTUFBTyxHQU9ULElBSEFBLEtBQVMsS0FDVEQsS0FBVyxHQUdULE1BQU8sR0FLVCxJQUZLaEIsSUFBVUEsRUFBVyxVQUd4QixPQUFRQSxHQUNOLElBQUssTUFDSCxPQUFPa0IsRUFBU2paLEtBQU0rWSxFQUFPQyxHQUUvQixJQUFLLE9BQ0wsSUFBSyxRQUNILE9BQU9FLEVBQVVsWixLQUFNK1ksRUFBT0MsR0FFaEMsSUFBSyxRQUNILE9BQU9HLEVBQVduWixLQUFNK1ksRUFBT0MsR0FFakMsSUFBSyxTQUNMLElBQUssU0FDSCxPQUFPSSxFQUFZcFosS0FBTStZLEVBQU9DLEdBRWxDLElBQUssU0FDSCxPQUFPSyxFQUFZclosS0FBTStZLEVBQU9DLEdBRWxDLElBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssV0FDSCxPQUFPTSxFQUFhdFosS0FBTStZLEVBQU9DLEdBRW5DLFFBQ0UsR0FBSUwsRUFBYSxNQUFNLElBQUk5USxVQUFVLHFCQUF1QmtRLEdBQzVEQSxHQUFZQSxFQUFXLElBQUlqUSxjQUMzQjZRLEdBQWMsR0FTdEIsU0FBU1ksRUFBTUMsRUFBR2hhLEVBQUdyQixHQUNuQixJQUFJSixFQUFJeWIsRUFBRWhhLEdBQ1ZnYSxFQUFFaGEsR0FBS2dhLEVBQUVyYixHQUNUcWIsRUFBRXJiLEdBQUtKLEVBbUlULFNBQVMwYixFQUFzQnZQLEVBQVFxTyxFQUFLWixFQUFZSSxFQUFVMVQsR0FFaEUsR0FBc0IsSUFBbEI2RixFQUFPaEksT0FBYyxPQUFRLEVBbUJqQyxHQWhCMEIsaUJBQWZ5VixHQUNUSSxFQUFXSixFQUNYQSxFQUFhLEdBQ0pBLEVBQWEsV0FDdEJBLEVBQWEsV0FDSkEsR0FBYyxhQUN2QkEsR0FBYyxZQUVoQkEsR0FBY0EsRUFDVitCLE1BQU0vQixLQUVSQSxFQUFhdFQsRUFBTSxFQUFLNkYsRUFBT2hJLE9BQVMsR0FJdEN5VixFQUFhLElBQUdBLEVBQWF6TixFQUFPaEksT0FBU3lWLEdBQzdDQSxHQUFjek4sRUFBT2hJLE9BQVEsQ0FDL0IsR0FBSW1DLEVBQUssT0FBUSxFQUNac1QsRUFBYXpOLEVBQU9oSSxPQUFTLE9BQzdCLEdBQUl5VixFQUFhLEVBQUcsQ0FDekIsSUFBSXRULEVBQ0MsT0FBUSxFQURKc1QsRUFBYSxFQVV4QixHQUxtQixpQkFBUlksSUFDVEEsRUFBTXZCLEVBQU9DLEtBQUtzQixFQUFLUixJQUlyQmYsRUFBT29CLFNBQVNHLEdBRWxCLE9BQW1CLElBQWZBLEVBQUlyVyxRQUNFLEVBRUh5WCxFQUFhelAsRUFBUXFPLEVBQUtaLEVBQVlJLEVBQVUxVCxHQUNsRCxHQUFtQixpQkFBUmtVLEVBRWhCLE9BREFBLEdBQVksSUFDUnZCLEVBQU9LLHFCQUNpQyxtQkFBakNyTixXQUFXckssVUFBVThILFFBQzFCcEQsRUFDSzJGLFdBQVdySyxVQUFVOEgsUUFBUXZKLEtBQUtnTSxFQUFRcU8sRUFBS1osR0FFL0MzTixXQUFXckssVUFBVWlhLFlBQVkxYixLQUFLZ00sRUFBUXFPLEVBQUtaLEdBR3ZEZ0MsRUFBYXpQLEVBQVEsQ0FBRXFPLEdBQU9aLEVBQVlJLEVBQVUxVCxHQUc3RCxNQUFNLElBQUl3RCxVQUFVLHdDQUd0QixTQUFTOFIsRUFBY0UsRUFBS3RCLEVBQUtaLEVBQVlJLEVBQVUxVCxHQUNyRCxJQTBCSXRHLEVBMUJBK2IsRUFBWSxFQUNaQyxFQUFZRixFQUFJM1gsT0FDaEI4WCxFQUFZekIsRUFBSXJXLE9BRXBCLFFBQWlCb0csSUFBYnlQLElBRWUsVUFEakJBLEVBQVdwUSxPQUFPb1EsR0FBVWpRLGdCQUNZLFVBQWJpUSxHQUNWLFlBQWJBLEdBQXVDLGFBQWJBLEdBQXlCLENBQ3JELEdBQUk4QixFQUFJM1gsT0FBUyxHQUFLcVcsRUFBSXJXLE9BQVMsRUFDakMsT0FBUSxFQUVWNFgsRUFBWSxFQUNaQyxHQUFhLEVBQ2JDLEdBQWEsRUFDYnJDLEdBQWMsRUFJbEIsU0FBU3NDLEVBQU1wUSxFQUFLOUwsR0FDbEIsT0FBa0IsSUFBZCtiLEVBQ0tqUSxFQUFJOUwsR0FFSjhMLEVBQUlxUSxhQUFhbmMsRUFBSStiLEdBS2hDLEdBQUl6VixFQUFLLENBQ1AsSUFBSThWLEdBQWMsRUFDbEIsSUFBS3BjLEVBQUk0WixFQUFZNVosRUFBSWdjLEVBQVdoYyxJQUNsQyxHQUFJa2MsRUFBS0osRUFBSzliLEtBQU9rYyxFQUFLMUIsR0FBcUIsSUFBaEI0QixFQUFvQixFQUFJcGMsRUFBSW9jLElBRXpELElBRG9CLElBQWhCQSxJQUFtQkEsRUFBYXBjLEdBQ2hDQSxFQUFJb2MsRUFBYSxJQUFNSCxFQUFXLE9BQU9HLEVBQWFMLE9BRXRDLElBQWhCSyxJQUFtQnBjLEdBQUtBLEVBQUlvYyxHQUNoQ0EsR0FBYyxPQUtsQixJQURJeEMsRUFBYXFDLEVBQVlELElBQVdwQyxFQUFhb0MsRUFBWUMsR0FDNURqYyxFQUFJNFosRUFBWTVaLEdBQUssRUFBR0EsSUFBSyxDQUVoQyxJQURBLElBQUlxYyxHQUFRLEVBQ0hDLEVBQUksRUFBR0EsRUFBSUwsRUFBV0ssSUFDN0IsR0FBSUosRUFBS0osRUFBSzliLEVBQUlzYyxLQUFPSixFQUFLMUIsRUFBSzhCLEdBQUksQ0FDckNELEdBQVEsRUFDUixNQUdKLEdBQUlBLEVBQU8sT0FBT3JjLEVBSXRCLE9BQVEsRUFlVixTQUFTdWMsRUFBVXpRLEVBQUtpTyxFQUFReUMsRUFBUXJZLEdBQ3RDcVksRUFBU0MsT0FBT0QsSUFBVyxFQUMzQixJQUFJRSxFQUFZNVEsRUFBSTNILE9BQVNxWSxFQUN4QnJZLEdBR0hBLEVBQVNzWSxPQUFPdFksSUFDSHVZLElBQ1h2WSxFQUFTdVksR0FKWHZZLEVBQVN1WSxFQVNYLElBQUlDLEVBQVM1QyxFQUFPNVYsT0FDcEIsR0FBSXdZLEVBQVMsR0FBTSxFQUFHLE1BQU0sSUFBSTdTLFVBQVUsc0JBRXRDM0YsRUFBU3dZLEVBQVMsSUFDcEJ4WSxFQUFTd1ksRUFBUyxHQUVwQixJQUFLLElBQUkzYyxFQUFJLEVBQUdBLEVBQUltRSxJQUFVbkUsRUFBRyxDQUMvQixJQUFJNGMsRUFBU0MsU0FBUzlDLEVBQU8rQyxPQUFXLEVBQUo5YyxFQUFPLEdBQUksSUFDL0MsR0FBSTJiLE1BQU1pQixHQUFTLE9BQU81YyxFQUMxQjhMLEVBQUkwUSxFQUFTeGMsR0FBSzRjLEVBRXBCLE9BQU81YyxFQUdULFNBQVMrYyxFQUFXalIsRUFBS2lPLEVBQVF5QyxFQUFRclksR0FDdkMsT0FBTzZZLEVBQVduQyxFQUFZZCxFQUFRak8sRUFBSTNILE9BQVNxWSxHQUFTMVEsRUFBSzBRLEVBQVFyWSxHQUczRSxTQUFTOFksRUFBWW5SLEVBQUtpTyxFQUFReUMsRUFBUXJZLEdBQ3hDLE9BQU82WSxFQXE2QlQsU0FBdUJoRSxHQUVyQixJQURBLElBQUlrRSxFQUFZLEdBQ1BsZCxFQUFJLEVBQUdBLEVBQUlnWixFQUFJN1UsU0FBVW5FLEVBRWhDa2QsRUFBVWhZLEtBQXlCLElBQXBCOFQsRUFBSW1FLFdBQVduZCxJQUVoQyxPQUFPa2QsRUEzNkJXRSxDQUFhckQsR0FBU2pPLEVBQUswUSxFQUFRclksR0FHdkQsU0FBU2taLEVBQWF2UixFQUFLaU8sRUFBUXlDLEVBQVFyWSxHQUN6QyxPQUFPOFksRUFBV25SLEVBQUtpTyxFQUFReUMsRUFBUXJZLEdBR3pDLFNBQVNtWixFQUFheFIsRUFBS2lPLEVBQVF5QyxFQUFRclksR0FDekMsT0FBTzZZLEVBQVdsQyxFQUFjZixHQUFTak8sRUFBSzBRLEVBQVFyWSxHQUd4RCxTQUFTb1osRUFBV3pSLEVBQUtpTyxFQUFReUMsRUFBUXJZLEdBQ3ZDLE9BQU82WSxFQWs2QlQsU0FBeUJoRSxFQUFLd0UsR0FHNUIsSUFGQSxJQUFJbmQsRUFBR29kLEVBQUlDLEVBQ1BSLEVBQVksR0FDUGxkLEVBQUksRUFBR0EsRUFBSWdaLEVBQUk3VSxXQUNqQnFaLEdBQVMsR0FBSyxLQURheGQsRUFHaENLLEVBQUkyWSxFQUFJbUUsV0FBV25kLEdBQ25CeWQsRUFBS3BkLEdBQUssRUFDVnFkLEVBQUtyZCxFQUFJLElBQ1Q2YyxFQUFVaFksS0FBS3dZLEdBQ2ZSLEVBQVVoWSxLQUFLdVksR0FHakIsT0FBT1AsRUEvNkJXUyxDQUFlNUQsRUFBUWpPLEVBQUkzSCxPQUFTcVksR0FBUzFRLEVBQUswUSxFQUFRclksR0FrRjlFLFNBQVNtWCxFQUFheFAsRUFBS2tQLEVBQU9DLEdBQ2hDLE9BQWMsSUFBVkQsR0FBZUMsSUFBUW5QLEVBQUkzSCxPQUN0QmdWLEVBQU95RSxjQUFjOVIsR0FFckJxTixFQUFPeUUsY0FBYzlSLEVBQUlDLE1BQU1pUCxFQUFPQyxJQUlqRCxTQUFTRSxFQUFXclAsRUFBS2tQLEVBQU9DLEdBQzlCQSxFQUFNdFUsS0FBS2tYLElBQUkvUixFQUFJM0gsT0FBUThXLEdBSTNCLElBSEEsSUFBSXZULEVBQU0sR0FFTjFILEVBQUlnYixFQUNEaGIsRUFBSWliLEdBQUssQ0FDZCxJQVFNNkMsRUFBWUMsRUFBV0MsRUFBWUMsRUFSckNDLEVBQVlwUyxFQUFJOUwsR0FDaEJtZSxFQUFZLEtBQ1pDLEVBQW9CRixFQUFZLElBQVEsRUFDdkNBLEVBQVksSUFBUSxFQUNwQkEsRUFBWSxJQUFRLEVBQ3JCLEVBRUosR0FBSWxlLEVBQUlvZSxHQUFvQm5ELEVBRzFCLE9BQVFtRCxHQUNOLEtBQUssRUFDQ0YsRUFBWSxNQUNkQyxFQUFZRCxHQUVkLE1BQ0YsS0FBSyxFQUV5QixNQUFWLEtBRGxCSixFQUFhaFMsRUFBSTlMLEVBQUksT0FFbkJpZSxHQUE2QixHQUFaQyxJQUFxQixFQUFvQixHQUFiSixHQUN6QixNQUNsQkssRUFBWUYsR0FHaEIsTUFDRixLQUFLLEVBQ0hILEVBQWFoUyxFQUFJOUwsRUFBSSxHQUNyQitkLEVBQVlqUyxFQUFJOUwsRUFBSSxHQUNRLE1BQVYsSUFBYjhkLElBQXNELE1BQVYsSUFBWkMsS0FDbkNFLEdBQTZCLEdBQVpDLElBQW9CLElBQW9CLEdBQWJKLElBQXNCLEVBQW1CLEdBQVpDLEdBQ3JELE9BQVVFLEVBQWdCLE9BQVVBLEVBQWdCLFNBQ3RFRSxFQUFZRixHQUdoQixNQUNGLEtBQUssRUFDSEgsRUFBYWhTLEVBQUk5TCxFQUFJLEdBQ3JCK2QsRUFBWWpTLEVBQUk5TCxFQUFJLEdBQ3BCZ2UsRUFBYWxTLEVBQUk5TCxFQUFJLEdBQ08sTUFBVixJQUFiOGQsSUFBc0QsTUFBVixJQUFaQyxJQUFzRCxNQUFWLElBQWJDLEtBQ2xFQyxHQUE2QixHQUFaQyxJQUFvQixJQUFxQixHQUFiSixJQUFzQixJQUFtQixHQUFaQyxJQUFxQixFQUFvQixHQUFiQyxHQUNsRixPQUFVQyxFQUFnQixVQUM1Q0UsRUFBWUYsR0FNSixPQUFkRSxHQUdGQSxFQUFZLE1BQ1pDLEVBQW1CLEdBQ1ZELEVBQVksUUFFckJBLEdBQWEsTUFDYnpXLEVBQUl4QyxLQUFLaVosSUFBYyxHQUFLLEtBQVEsT0FDcENBLEVBQVksTUFBcUIsS0FBWkEsR0FHdkJ6VyxFQUFJeEMsS0FBS2laLEdBQ1RuZSxHQUFLb2UsRUFHUCxPQVFGLFNBQWdDQyxHQUM5QixJQUFJOVosRUFBTThaLEVBQVdsYSxPQUNyQixHQUFJSSxHQUFPK1osRUFDVCxPQUFPMVUsT0FBT3lELGFBQWFsSSxNQUFNeUUsT0FBUXlVLEdBSTNDLElBQUkzVyxFQUFNLEdBQ04xSCxFQUFJLEVBQ1IsS0FBT0EsRUFBSXVFLEdBQ1RtRCxHQUFPa0MsT0FBT3lELGFBQWFsSSxNQUN6QnlFLE9BQ0F5VSxFQUFXdFMsTUFBTS9MLEVBQUdBLEdBQUtzZSxJQUc3QixPQUFPNVcsRUF2QkE2VyxDQUFzQjdXLEdBOThCL0JsSSxFQUFReVosT0FBU0EsRUFDakJ6WixFQUFRZ2YsV0FvVFIsU0FBcUJyYSxJQUNkQSxHQUFVQSxJQUNiQSxFQUFTLEdBRVgsT0FBTzhVLEVBQU93RixPQUFPdGEsSUF2VHZCM0UsRUFBUWtmLGtCQUFvQixHQTBCNUJ6RixFQUFPSyx5QkFBcUQvTyxJQUEvQjJOLEVBQU9vQixvQkFDaENwQixFQUFPb0Isb0JBUVgsV0FDRSxJQUNFLElBQUl3QyxFQUFNLElBQUk3UCxXQUFXLEdBRXpCLE9BREE2UCxFQUFJckMsVUFBWSxDQUFDQSxVQUFXeE4sV0FBV3JLLFVBQVcrYyxJQUFLLFdBQWMsT0FBTyxLQUN2RCxLQUFkN0MsRUFBSTZDLE9BQ2lCLG1CQUFqQjdDLEVBQUk4QyxVQUN1QixJQUFsQzlDLEVBQUk4QyxTQUFTLEVBQUcsR0FBRzFTLFdBQ3ZCLE1BQU90SSxHQUNQLE9BQU8sR0FmUGliLEdBS0pyZixFQUFRNlosV0FBYUEsSUFrRXJCSixFQUFPNkYsU0FBVyxLQUdsQjdGLEVBQU84RixTQUFXLFNBQVVqRCxHQUUxQixPQURBQSxFQUFJckMsVUFBWVIsRUFBT3JYLFVBQ2hCa2EsR0EyQlQ3QyxFQUFPQyxLQUFPLFNBQVVqWSxFQUFPeVksRUFBa0J2VixHQUMvQyxPQUFPK1UsRUFBSyxLQUFNalksRUFBT3lZLEVBQWtCdlYsSUFHekM4VSxFQUFPSyxzQkFDVEwsRUFBT3JYLFVBQVU2WCxVQUFZeE4sV0FBV3JLLFVBQ3hDcVgsRUFBT1EsVUFBWXhOLFdBQ0csb0JBQVhsTCxRQUEwQkEsT0FBT2llLFNBQ3hDL0YsRUFBT2xZLE9BQU9pZSxXQUFhL0YsR0FFN0J2WSxPQUFPQyxlQUFlc1ksRUFBUWxZLE9BQU9pZSxRQUFTLENBQzVDL2QsTUFBTyxLQUNQZ2UsY0FBYyxLQWlDcEJoRyxFQUFPd0YsTUFBUSxTQUFVOUQsRUFBTXVFLEVBQU1sRixHQUNuQyxPQXJCRixTQUFnQlIsRUFBTW1CLEVBQU11RSxFQUFNbEYsR0FFaEMsT0FEQVUsRUFBV0MsR0FDUEEsR0FBUSxFQUNIcEIsRUFBYUMsRUFBTW1CLFFBRWZwUSxJQUFUMlUsRUFJeUIsaUJBQWJsRixFQUNWVCxFQUFhQyxFQUFNbUIsR0FBTXVFLEtBQUtBLEVBQU1sRixHQUNwQ1QsRUFBYUMsRUFBTW1CLEdBQU11RSxLQUFLQSxHQUU3QjNGLEVBQWFDLEVBQU1tQixHQVFuQjhELENBQU0sS0FBTTlELEVBQU11RSxFQUFNbEYsSUFpQmpDZixFQUFPVSxZQUFjLFNBQVVnQixHQUM3QixPQUFPaEIsRUFBWSxLQUFNZ0IsSUFLM0IxQixFQUFPa0csZ0JBQWtCLFNBQVV4RSxHQUNqQyxPQUFPaEIsRUFBWSxLQUFNZ0IsSUFpSDNCMUIsRUFBT29CLFNBQVcsU0FBbUJvQixHQUNuQyxRQUFlLE1BQUxBLElBQWFBLEVBQUUyRCxZQUczQm5HLEVBQU9vRyxRQUFVLFNBQWtCQyxFQUFHN0QsR0FDcEMsSUFBS3hDLEVBQU9vQixTQUFTaUYsS0FBT3JHLEVBQU9vQixTQUFTb0IsR0FDMUMsTUFBTSxJQUFJM1IsVUFBVSw2QkFHdEIsR0FBSXdWLElBQU03RCxFQUFHLE9BQU8sRUFLcEIsSUFIQSxJQUFJL0osRUFBSTROLEVBQUVuYixPQUNOb2IsRUFBSTlELEVBQUV0WCxPQUVEbkUsRUFBSSxFQUFHdUUsRUFBTW9DLEtBQUtrWCxJQUFJbk0sRUFBRzZOLEdBQUl2ZixFQUFJdUUsSUFBT3ZFLEVBQy9DLEdBQUlzZixFQUFFdGYsS0FBT3liLEVBQUV6YixHQUFJLENBQ2pCMFIsRUFBSTROLEVBQUV0ZixHQUNOdWYsRUFBSTlELEVBQUV6YixHQUNOLE1BSUosT0FBSTBSLEVBQUk2TixHQUFXLEVBQ2ZBLEVBQUk3TixFQUFVLEVBQ1gsR0FHVHVILEVBQU9nQixXQUFhLFNBQXFCRCxHQUN2QyxPQUFRcFEsT0FBT29RLEdBQVVqUSxlQUN2QixJQUFLLE1BQ0wsSUFBSyxPQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxPQUNMLElBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNILE9BQU8sRUFDVCxRQUNFLE9BQU8sSUFJYmtQLEVBQU83VSxPQUFTLFNBQWlCb2IsRUFBTXJiLEdBQ3JDLElBQUt5RyxFQUFRNFUsR0FDWCxNQUFNLElBQUkxVixVQUFVLCtDQUd0QixHQUFvQixJQUFoQjBWLEVBQUtyYixPQUNQLE9BQU84VSxFQUFPd0YsTUFBTSxHQUd0QixJQUFJemUsRUFDSixRQUFldUssSUFBWHBHLEVBRUYsSUFEQUEsRUFBUyxFQUNKbkUsRUFBSSxFQUFHQSxFQUFJd2YsRUFBS3JiLFNBQVVuRSxFQUM3Qm1FLEdBQVVxYixFQUFLeGYsR0FBR21FLE9BSXRCLElBQUlnSSxFQUFTOE0sRUFBT1UsWUFBWXhWLEdBQzVCc2IsRUFBTSxFQUNWLElBQUt6ZixFQUFJLEVBQUdBLEVBQUl3ZixFQUFLcmIsU0FBVW5FLEVBQUcsQ0FDaEMsSUFBSThMLEVBQU0wVCxFQUFLeGYsR0FDZixJQUFLaVosRUFBT29CLFNBQVN2TyxHQUNuQixNQUFNLElBQUloQyxVQUFVLCtDQUV0QmdDLEVBQUl5TyxLQUFLcE8sRUFBUXNULEdBQ2pCQSxHQUFPM1QsRUFBSTNILE9BRWIsT0FBT2dJLEdBOENUOE0sRUFBTy9NLFdBQWFBLEVBMEVwQitNLEVBQU9yWCxVQUFVd2QsV0FBWSxFQVE3Qm5HLEVBQU9yWCxVQUFVOGQsT0FBUyxXQUN4QixJQUFJbmIsRUFBTXRDLEtBQUtrQyxPQUNmLEdBQUlJLEVBQU0sR0FBTSxFQUNkLE1BQU0sSUFBSWtMLFdBQVcsNkNBRXZCLElBQUssSUFBSXpQLEVBQUksRUFBR0EsRUFBSXVFLEVBQUt2RSxHQUFLLEVBQzVCd2IsRUFBS3ZaLEtBQU1qQyxFQUFHQSxFQUFJLEdBRXBCLE9BQU9pQyxNQUdUZ1gsRUFBT3JYLFVBQVUrZCxPQUFTLFdBQ3hCLElBQUlwYixFQUFNdEMsS0FBS2tDLE9BQ2YsR0FBSUksRUFBTSxHQUFNLEVBQ2QsTUFBTSxJQUFJa0wsV0FBVyw2Q0FFdkIsSUFBSyxJQUFJelAsRUFBSSxFQUFHQSxFQUFJdUUsRUFBS3ZFLEdBQUssRUFDNUJ3YixFQUFLdlosS0FBTWpDLEVBQUdBLEVBQUksR0FDbEJ3YixFQUFLdlosS0FBTWpDLEVBQUksRUFBR0EsRUFBSSxHQUV4QixPQUFPaUMsTUFHVGdYLEVBQU9yWCxVQUFVZ2UsT0FBUyxXQUN4QixJQUFJcmIsRUFBTXRDLEtBQUtrQyxPQUNmLEdBQUlJLEVBQU0sR0FBTSxFQUNkLE1BQU0sSUFBSWtMLFdBQVcsNkNBRXZCLElBQUssSUFBSXpQLEVBQUksRUFBR0EsRUFBSXVFLEVBQUt2RSxHQUFLLEVBQzVCd2IsRUFBS3ZaLEtBQU1qQyxFQUFHQSxFQUFJLEdBQ2xCd2IsRUFBS3ZaLEtBQU1qQyxFQUFJLEVBQUdBLEVBQUksR0FDdEJ3YixFQUFLdlosS0FBTWpDLEVBQUksRUFBR0EsRUFBSSxHQUN0QndiLEVBQUt2WixLQUFNakMsRUFBSSxFQUFHQSxFQUFJLEdBRXhCLE9BQU9pQyxNQUdUZ1gsRUFBT3JYLFVBQVVpRixTQUFXLFdBQzFCLElBQUkxQyxFQUF1QixFQUFkbEMsS0FBS2tDLE9BQ2xCLE9BQWUsSUFBWEEsRUFBcUIsR0FDQSxJQUFyQmMsVUFBVWQsT0FBcUJnWCxFQUFVbFosS0FBTSxFQUFHa0MsR0FDL0M0VyxFQUFhNVYsTUFBTWxELEtBQU1nRCxZQUdsQ2dVLEVBQU9yWCxVQUFVaWUsT0FBUyxTQUFpQnBFLEdBQ3pDLElBQUt4QyxFQUFPb0IsU0FBU29CLEdBQUksTUFBTSxJQUFJM1IsVUFBVSw2QkFDN0MsT0FBSTdILE9BQVN3WixHQUNzQixJQUE1QnhDLEVBQU9vRyxRQUFRcGQsS0FBTXdaLElBRzlCeEMsRUFBT3JYLFVBQVVrZSxRQUFVLFdBQ3pCLElBQUk5RyxFQUFNLEdBQ04rRyxFQUFNdmdCLEVBQVFrZixrQkFLbEIsT0FKSXpjLEtBQUtrQyxPQUFTLElBQ2hCNlUsRUFBTS9XLEtBQUs0RSxTQUFTLE1BQU8sRUFBR2taLEdBQUtDLE1BQU0sU0FBUzFTLEtBQUssS0FDbkRyTCxLQUFLa0MsT0FBUzRiLElBQUsvRyxHQUFPLFVBRXpCLFdBQWFBLEVBQU0sS0FHNUJDLEVBQU9yWCxVQUFVeWQsUUFBVSxTQUFrQlksRUFBUWpGLEVBQU9DLEVBQUtpRixFQUFXQyxHQUMxRSxJQUFLbEgsRUFBT29CLFNBQVM0RixHQUNuQixNQUFNLElBQUluVyxVQUFVLDZCQWdCdEIsUUFiY1MsSUFBVnlRLElBQ0ZBLEVBQVEsUUFFRXpRLElBQVIwUSxJQUNGQSxFQUFNZ0YsRUFBU0EsRUFBTzliLE9BQVMsUUFFZm9HLElBQWQyVixJQUNGQSxFQUFZLFFBRUUzVixJQUFaNFYsSUFDRkEsRUFBVWxlLEtBQUtrQyxRQUdiNlcsRUFBUSxHQUFLQyxFQUFNZ0YsRUFBTzliLFFBQVUrYixFQUFZLEdBQUtDLEVBQVVsZSxLQUFLa0MsT0FDdEUsTUFBTSxJQUFJc0wsV0FBVyxzQkFHdkIsR0FBSXlRLEdBQWFDLEdBQVduRixHQUFTQyxFQUNuQyxPQUFPLEVBRVQsR0FBSWlGLEdBQWFDLEVBQ2YsT0FBUSxFQUVWLEdBQUluRixHQUFTQyxFQUNYLE9BQU8sRUFRVCxHQUFJaFosT0FBU2dlLEVBQVEsT0FBTyxFQVM1QixJQVBBLElBQUl2TyxHQUpKeU8sS0FBYSxJQURiRCxLQUFlLEdBTVhYLEdBUEp0RSxLQUFTLElBRFRELEtBQVcsR0FTUHpXLEVBQU1vQyxLQUFLa1gsSUFBSW5NLEVBQUc2TixHQUVsQmEsRUFBV25lLEtBQUs4SixNQUFNbVUsRUFBV0MsR0FDakNFLEVBQWFKLEVBQU9sVSxNQUFNaVAsRUFBT0MsR0FFNUJqYixFQUFJLEVBQUdBLEVBQUl1RSxJQUFPdkUsRUFDekIsR0FBSW9nQixFQUFTcGdCLEtBQU9xZ0IsRUFBV3JnQixHQUFJLENBQ2pDMFIsRUFBSTBPLEVBQVNwZ0IsR0FDYnVmLEVBQUljLEVBQVdyZ0IsR0FDZixNQUlKLE9BQUkwUixFQUFJNk4sR0FBVyxFQUNmQSxFQUFJN04sRUFBVSxFQUNYLEdBNkhUdUgsRUFBT3JYLFVBQVUwZSxTQUFXLFNBQW1COUYsRUFBS1osRUFBWUksR0FDOUQsT0FBb0QsSUFBN0MvWCxLQUFLeUgsUUFBUThRLEVBQUtaLEVBQVlJLElBR3ZDZixFQUFPclgsVUFBVThILFFBQVUsU0FBa0I4USxFQUFLWixFQUFZSSxHQUM1RCxPQUFPMEIsRUFBcUJ6WixLQUFNdVksRUFBS1osRUFBWUksR0FBVSxJQUcvRGYsRUFBT3JYLFVBQVVpYSxZQUFjLFNBQXNCckIsRUFBS1osRUFBWUksR0FDcEUsT0FBTzBCLEVBQXFCelosS0FBTXVZLEVBQUtaLEVBQVlJLEdBQVUsSUFrRC9EZixFQUFPclgsVUFBVXVZLE1BQVEsU0FBZ0JKLEVBQVF5QyxFQUFRclksRUFBUTZWLEdBRS9ELFFBQWV6UCxJQUFYaVMsRUFDRnhDLEVBQVcsT0FDWDdWLEVBQVNsQyxLQUFLa0MsT0FDZHFZLEVBQVMsT0FFSixRQUFlalMsSUFBWHBHLEdBQTBDLGlCQUFYcVksRUFDeEN4QyxFQUFXd0MsRUFDWHJZLEVBQVNsQyxLQUFLa0MsT0FDZHFZLEVBQVMsTUFFSixLQUFJK0QsU0FBUy9ELEdBV2xCLE1BQU0sSUFBSWpaLE1BQ1IsMkVBWEZpWixHQUFrQixFQUNkK0QsU0FBU3BjLElBQ1hBLEdBQWtCLE9BQ0RvRyxJQUFieVAsSUFBd0JBLEVBQVcsVUFFdkNBLEVBQVc3VixFQUNYQSxPQUFTb0csR0FTYixJQUFJbVMsRUFBWXphLEtBQUtrQyxPQUFTcVksRUFHOUIsU0FGZWpTLElBQVhwRyxHQUF3QkEsRUFBU3VZLEtBQVd2WSxFQUFTdVksR0FFcEQzQyxFQUFPNVYsT0FBUyxJQUFNQSxFQUFTLEdBQUtxWSxFQUFTLElBQU9BLEVBQVN2YSxLQUFLa0MsT0FDckUsTUFBTSxJQUFJc0wsV0FBVywwQ0FHbEJ1SyxJQUFVQSxFQUFXLFFBRzFCLElBREEsSUFBSVksR0FBYyxJQUVoQixPQUFRWixHQUNOLElBQUssTUFDSCxPQUFPdUMsRUFBU3RhLEtBQU04WCxFQUFReUMsRUFBUXJZLEdBRXhDLElBQUssT0FDTCxJQUFLLFFBQ0gsT0FBTzRZLEVBQVU5YSxLQUFNOFgsRUFBUXlDLEVBQVFyWSxHQUV6QyxJQUFLLFFBQ0gsT0FBTzhZLEVBQVdoYixLQUFNOFgsRUFBUXlDLEVBQVFyWSxHQUUxQyxJQUFLLFNBQ0wsSUFBSyxTQUNILE9BQU9rWixFQUFZcGIsS0FBTThYLEVBQVF5QyxFQUFRclksR0FFM0MsSUFBSyxTQUVILE9BQU9tWixFQUFZcmIsS0FBTThYLEVBQVF5QyxFQUFRclksR0FFM0MsSUFBSyxPQUNMLElBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNILE9BQU9vWixFQUFVdGIsS0FBTThYLEVBQVF5QyxFQUFRclksR0FFekMsUUFDRSxHQUFJeVcsRUFBYSxNQUFNLElBQUk5USxVQUFVLHFCQUF1QmtRLEdBQzVEQSxHQUFZLEdBQUtBLEdBQVVqUSxjQUMzQjZRLEdBQWMsSUFLdEIzQixFQUFPclgsVUFBVTRlLE9BQVMsV0FDeEIsTUFBTyxDQUNMelQsS0FBTSxTQUNOZ0gsS0FBTS9PLE1BQU1wRCxVQUFVbUssTUFBTTVMLEtBQUs4QixLQUFLd2UsTUFBUXhlLEtBQU0sS0F3RnhELElBQUlxYyxFQUF1QixLQW9CM0IsU0FBU2xELEVBQVl0UCxFQUFLa1AsRUFBT0MsR0FDL0IsSUFBSXlGLEVBQU0sR0FDVnpGLEVBQU10VSxLQUFLa1gsSUFBSS9SLEVBQUkzSCxPQUFROFcsR0FFM0IsSUFBSyxJQUFJamIsRUFBSWdiLEVBQU9oYixFQUFJaWIsSUFBT2piLEVBQzdCMGdCLEdBQU85VyxPQUFPeUQsYUFBc0IsSUFBVHZCLEVBQUk5TCxJQUVqQyxPQUFPMGdCLEVBR1QsU0FBU3JGLEVBQWF2UCxFQUFLa1AsRUFBT0MsR0FDaEMsSUFBSXlGLEVBQU0sR0FDVnpGLEVBQU10VSxLQUFLa1gsSUFBSS9SLEVBQUkzSCxPQUFROFcsR0FFM0IsSUFBSyxJQUFJamIsRUFBSWdiLEVBQU9oYixFQUFJaWIsSUFBT2piLEVBQzdCMGdCLEdBQU85VyxPQUFPeUQsYUFBYXZCLEVBQUk5TCxJQUVqQyxPQUFPMGdCLEVBR1QsU0FBU3hGLEVBQVVwUCxFQUFLa1AsRUFBT0MsR0FDN0IsSUFBSTFXLEVBQU11SCxFQUFJM0gsU0FFVDZXLEdBQVNBLEVBQVEsS0FBR0EsRUFBUSxLQUM1QkMsR0FBT0EsRUFBTSxHQUFLQSxFQUFNMVcsS0FBSzBXLEVBQU0xVyxHQUd4QyxJQURBLElBQUlvYyxFQUFNLEdBQ0QzZ0IsRUFBSWdiLEVBQU9oYixFQUFJaWIsSUFBT2piLEVBQzdCMmdCLEdBQU9DLEVBQU05VSxFQUFJOUwsSUFFbkIsT0FBTzJnQixFQUdULFNBQVNwRixFQUFjelAsRUFBS2tQLEVBQU9DLEdBR2pDLElBRkEsSUFBSW5NLEVBQVFoRCxFQUFJQyxNQUFNaVAsRUFBT0MsR0FDekJ2VCxFQUFNLEdBQ0QxSCxFQUFJLEVBQUdBLEVBQUk4TyxFQUFNM0ssT0FBUW5FLEdBQUssRUFDckMwSCxHQUFPa0MsT0FBT3lELGFBQWF5QixFQUFNOU8sR0FBb0IsSUFBZjhPLEVBQU05TyxFQUFJLElBRWxELE9BQU8wSCxFQTBDVCxTQUFTbVosRUFBYXJFLEVBQVFzRSxFQUFLM2MsR0FDakMsR0FBS3FZLEVBQVMsR0FBTyxHQUFLQSxFQUFTLEVBQUcsTUFBTSxJQUFJL00sV0FBVyxzQkFDM0QsR0FBSStNLEVBQVNzRSxFQUFNM2MsRUFBUSxNQUFNLElBQUlzTCxXQUFXLHlDQStKbEQsU0FBU3NSLEVBQVVqVixFQUFLN0ssRUFBT3ViLEVBQVFzRSxFQUFLZixFQUFLbEMsR0FDL0MsSUFBSzVFLEVBQU9vQixTQUFTdk8sR0FBTSxNQUFNLElBQUloQyxVQUFVLCtDQUMvQyxHQUFJN0ksRUFBUThlLEdBQU85ZSxFQUFRNGMsRUFBSyxNQUFNLElBQUlwTyxXQUFXLHFDQUNyRCxHQUFJK00sRUFBU3NFLEVBQU1oVixFQUFJM0gsT0FBUSxNQUFNLElBQUlzTCxXQUFXLHNCQWtEdEQsU0FBU3VSLEVBQW1CbFYsRUFBSzdLLEVBQU91YixFQUFReUUsR0FDMUNoZ0IsRUFBUSxJQUFHQSxFQUFRLE1BQVNBLEVBQVEsR0FDeEMsSUFBSyxJQUFJakIsRUFBSSxFQUFHc2MsRUFBSTNWLEtBQUtrWCxJQUFJL1IsRUFBSTNILE9BQVNxWSxFQUFRLEdBQUl4YyxFQUFJc2MsSUFBS3RjLEVBQzdEOEwsRUFBSTBRLEVBQVN4YyxJQUFNaUIsRUFBUyxLQUFTLEdBQUtnZ0IsRUFBZWpoQixFQUFJLEVBQUlBLE1BQ2xDLEdBQTVCaWhCLEVBQWVqaEIsRUFBSSxFQUFJQSxHQThCOUIsU0FBU2toQixFQUFtQnBWLEVBQUs3SyxFQUFPdWIsRUFBUXlFLEdBQzFDaGdCLEVBQVEsSUFBR0EsRUFBUSxXQUFhQSxFQUFRLEdBQzVDLElBQUssSUFBSWpCLEVBQUksRUFBR3NjLEVBQUkzVixLQUFLa1gsSUFBSS9SLEVBQUkzSCxPQUFTcVksRUFBUSxHQUFJeGMsRUFBSXNjLElBQUt0YyxFQUM3RDhMLEVBQUkwUSxFQUFTeGMsR0FBTWlCLElBQXVDLEdBQTVCZ2dCLEVBQWVqaEIsRUFBSSxFQUFJQSxHQUFVLElBbUpuRSxTQUFTbWhCLEVBQWNyVixFQUFLN0ssRUFBT3ViLEVBQVFzRSxFQUFLZixFQUFLbEMsR0FDbkQsR0FBSXJCLEVBQVNzRSxFQUFNaFYsRUFBSTNILE9BQVEsTUFBTSxJQUFJc0wsV0FBVyxzQkFDcEQsR0FBSStNLEVBQVMsRUFBRyxNQUFNLElBQUkvTSxXQUFXLHNCQUd2QyxTQUFTMlIsRUFBWXRWLEVBQUs3SyxFQUFPdWIsRUFBUXlFLEVBQWNJLEdBS3JELE9BSktBLEdBQ0hGLEVBQWFyVixFQUFLN0ssRUFBT3ViLEVBQVEsR0FFbkNwRCxFQUFRZSxNQUFNck8sRUFBSzdLLEVBQU91YixFQUFReUUsRUFBYyxHQUFJLEdBQzdDekUsRUFBUyxFQVdsQixTQUFTOEUsRUFBYXhWLEVBQUs3SyxFQUFPdWIsRUFBUXlFLEVBQWNJLEdBS3RELE9BSktBLEdBQ0hGLEVBQWFyVixFQUFLN0ssRUFBT3ViLEVBQVEsR0FFbkNwRCxFQUFRZSxNQUFNck8sRUFBSzdLLEVBQU91YixFQUFReUUsRUFBYyxHQUFJLEdBQzdDekUsRUFBUyxFQS9jbEJ2RCxFQUFPclgsVUFBVW1LLE1BQVEsU0FBZ0JpUCxFQUFPQyxHQUM5QyxJQW9CSXNHLEVBcEJBaGQsRUFBTXRDLEtBQUtrQyxPQXFCZixJQXBCQTZXLElBQVVBLEdBR0UsR0FDVkEsR0FBU3pXLEdBQ0csSUFBR3lXLEVBQVEsR0FDZEEsRUFBUXpXLElBQ2pCeVcsRUFBUXpXLElBTlYwVyxPQUFjMVEsSUFBUjBRLEVBQW9CMVcsSUFBUTBXLEdBU3hCLEdBQ1JBLEdBQU8xVyxHQUNHLElBQUcwVyxFQUFNLEdBQ1ZBLEVBQU0xVyxJQUNmMFcsRUFBTTFXLEdBR0owVyxFQUFNRCxJQUFPQyxFQUFNRCxHQUduQi9CLEVBQU9LLHFCQUNUaUksRUFBU3RmLEtBQUsyYyxTQUFTNUQsRUFBT0MsSUFDdkJ4QixVQUFZUixFQUFPclgsY0FDckIsQ0FDTCxJQUFJNGYsRUFBV3ZHLEVBQU1ELEVBQ3JCdUcsRUFBUyxJQUFJdEksRUFBT3VJLE9BQVVqWCxHQUM5QixJQUFLLElBQUl2SyxFQUFJLEVBQUdBLEVBQUl3aEIsSUFBWXhoQixFQUM5QnVoQixFQUFPdmhCLEdBQUtpQyxLQUFLakMsRUFBSWdiLEdBSXpCLE9BQU91RyxHQVdUdEksRUFBT3JYLFVBQVU2ZixXQUFhLFNBQXFCakYsRUFBUXRRLEVBQVltVixHQUNyRTdFLEdBQWtCLEVBQ2xCdFEsR0FBMEIsRUFDckJtVixHQUFVUixFQUFZckUsRUFBUXRRLEVBQVlqSyxLQUFLa0MsUUFLcEQsSUFIQSxJQUFJcVcsRUFBTXZZLEtBQUt1YSxHQUNYa0YsRUFBTSxFQUNOMWhCLEVBQUksSUFDQ0EsRUFBSWtNLElBQWV3VixHQUFPLE1BQ2pDbEgsR0FBT3ZZLEtBQUt1YSxFQUFTeGMsR0FBSzBoQixFQUc1QixPQUFPbEgsR0FHVHZCLEVBQU9yWCxVQUFVK2YsV0FBYSxTQUFxQm5GLEVBQVF0USxFQUFZbVYsR0FDckU3RSxHQUFrQixFQUNsQnRRLEdBQTBCLEVBQ3JCbVYsR0FDSFIsRUFBWXJFLEVBQVF0USxFQUFZakssS0FBS2tDLFFBS3ZDLElBRkEsSUFBSXFXLEVBQU12WSxLQUFLdWEsSUFBV3RRLEdBQ3RCd1YsRUFBTSxFQUNIeFYsRUFBYSxJQUFNd1YsR0FBTyxNQUMvQmxILEdBQU92WSxLQUFLdWEsSUFBV3RRLEdBQWN3VixFQUd2QyxPQUFPbEgsR0FHVHZCLEVBQU9yWCxVQUFVZ2dCLFVBQVksU0FBb0JwRixFQUFRNkUsR0FFdkQsT0FES0EsR0FBVVIsRUFBWXJFLEVBQVEsRUFBR3ZhLEtBQUtrQyxRQUNwQ2xDLEtBQUt1YSxJQUdkdkQsRUFBT3JYLFVBQVVpZ0IsYUFBZSxTQUF1QnJGLEVBQVE2RSxHQUU3RCxPQURLQSxHQUFVUixFQUFZckUsRUFBUSxFQUFHdmEsS0FBS2tDLFFBQ3BDbEMsS0FBS3VhLEdBQVd2YSxLQUFLdWEsRUFBUyxJQUFNLEdBRzdDdkQsRUFBT3JYLFVBQVV1YSxhQUFlLFNBQXVCSyxFQUFRNkUsR0FFN0QsT0FES0EsR0FBVVIsRUFBWXJFLEVBQVEsRUFBR3ZhLEtBQUtrQyxRQUNuQ2xDLEtBQUt1YSxJQUFXLEVBQUt2YSxLQUFLdWEsRUFBUyxJQUc3Q3ZELEVBQU9yWCxVQUFVa2dCLGFBQWUsU0FBdUJ0RixFQUFRNkUsR0FHN0QsT0FGS0EsR0FBVVIsRUFBWXJFLEVBQVEsRUFBR3ZhLEtBQUtrQyxTQUVsQ2xDLEtBQUt1YSxHQUNUdmEsS0FBS3VhLEVBQVMsSUFBTSxFQUNwQnZhLEtBQUt1YSxFQUFTLElBQU0sSUFDRCxTQUFuQnZhLEtBQUt1YSxFQUFTLElBR3JCdkQsRUFBT3JYLFVBQVVtZ0IsYUFBZSxTQUF1QnZGLEVBQVE2RSxHQUc3RCxPQUZLQSxHQUFVUixFQUFZckUsRUFBUSxFQUFHdmEsS0FBS2tDLFFBRXBCLFNBQWZsQyxLQUFLdWEsSUFDVHZhLEtBQUt1YSxFQUFTLElBQU0sR0FDckJ2YSxLQUFLdWEsRUFBUyxJQUFNLEVBQ3JCdmEsS0FBS3VhLEVBQVMsS0FHbEJ2RCxFQUFPclgsVUFBVW9nQixVQUFZLFNBQW9CeEYsRUFBUXRRLEVBQVltVixHQUNuRTdFLEdBQWtCLEVBQ2xCdFEsR0FBMEIsRUFDckJtVixHQUFVUixFQUFZckUsRUFBUXRRLEVBQVlqSyxLQUFLa0MsUUFLcEQsSUFIQSxJQUFJcVcsRUFBTXZZLEtBQUt1YSxHQUNYa0YsRUFBTSxFQUNOMWhCLEVBQUksSUFDQ0EsRUFBSWtNLElBQWV3VixHQUFPLE1BQ2pDbEgsR0FBT3ZZLEtBQUt1YSxFQUFTeGMsR0FBSzBoQixFQU01QixPQUZJbEgsSUFGSmtILEdBQU8sT0FFU2xILEdBQU83VCxLQUFLc2IsSUFBSSxFQUFHLEVBQUkvVixJQUVoQ3NPLEdBR1R2QixFQUFPclgsVUFBVXNnQixVQUFZLFNBQW9CMUYsRUFBUXRRLEVBQVltVixHQUNuRTdFLEdBQWtCLEVBQ2xCdFEsR0FBMEIsRUFDckJtVixHQUFVUixFQUFZckUsRUFBUXRRLEVBQVlqSyxLQUFLa0MsUUFLcEQsSUFIQSxJQUFJbkUsRUFBSWtNLEVBQ0p3VixFQUFNLEVBQ05sSCxFQUFNdlksS0FBS3VhLElBQVd4YyxHQUNuQkEsRUFBSSxJQUFNMGhCLEdBQU8sTUFDdEJsSCxHQUFPdlksS0FBS3VhLElBQVd4YyxHQUFLMGhCLEVBTTlCLE9BRklsSCxJQUZKa0gsR0FBTyxPQUVTbEgsR0FBTzdULEtBQUtzYixJQUFJLEVBQUcsRUFBSS9WLElBRWhDc08sR0FHVHZCLEVBQU9yWCxVQUFVdWdCLFNBQVcsU0FBbUIzRixFQUFRNkUsR0FFckQsT0FES0EsR0FBVVIsRUFBWXJFLEVBQVEsRUFBR3ZhLEtBQUtrQyxRQUN0QixJQUFmbEMsS0FBS3VhLElBQzBCLEdBQTVCLElBQU92YSxLQUFLdWEsR0FBVSxHQURLdmEsS0FBS3VhLElBSTNDdkQsRUFBT3JYLFVBQVV3Z0IsWUFBYyxTQUFzQjVGLEVBQVE2RSxHQUN0REEsR0FBVVIsRUFBWXJFLEVBQVEsRUFBR3ZhLEtBQUtrQyxRQUMzQyxJQUFJcVcsRUFBTXZZLEtBQUt1YSxHQUFXdmEsS0FBS3VhLEVBQVMsSUFBTSxFQUM5QyxPQUFjLE1BQU5oQyxFQUFzQixXQUFOQSxFQUFtQkEsR0FHN0N2QixFQUFPclgsVUFBVXlnQixZQUFjLFNBQXNCN0YsRUFBUTZFLEdBQ3REQSxHQUFVUixFQUFZckUsRUFBUSxFQUFHdmEsS0FBS2tDLFFBQzNDLElBQUlxVyxFQUFNdlksS0FBS3VhLEVBQVMsR0FBTXZhLEtBQUt1YSxJQUFXLEVBQzlDLE9BQWMsTUFBTmhDLEVBQXNCLFdBQU5BLEVBQW1CQSxHQUc3Q3ZCLEVBQU9yWCxVQUFVMGdCLFlBQWMsU0FBc0I5RixFQUFRNkUsR0FHM0QsT0FGS0EsR0FBVVIsRUFBWXJFLEVBQVEsRUFBR3ZhLEtBQUtrQyxRQUVuQ2xDLEtBQUt1YSxHQUNWdmEsS0FBS3VhLEVBQVMsSUFBTSxFQUNwQnZhLEtBQUt1YSxFQUFTLElBQU0sR0FDcEJ2YSxLQUFLdWEsRUFBUyxJQUFNLElBR3pCdkQsRUFBT3JYLFVBQVUyZ0IsWUFBYyxTQUFzQi9GLEVBQVE2RSxHQUczRCxPQUZLQSxHQUFVUixFQUFZckUsRUFBUSxFQUFHdmEsS0FBS2tDLFFBRW5DbEMsS0FBS3VhLElBQVcsR0FDckJ2YSxLQUFLdWEsRUFBUyxJQUFNLEdBQ3BCdmEsS0FBS3VhLEVBQVMsSUFBTSxFQUNwQnZhLEtBQUt1YSxFQUFTLElBR25CdkQsRUFBT3JYLFVBQVU0Z0IsWUFBYyxTQUFzQmhHLEVBQVE2RSxHQUUzRCxPQURLQSxHQUFVUixFQUFZckUsRUFBUSxFQUFHdmEsS0FBS2tDLFFBQ3BDaVYsRUFBUThDLEtBQUtqYSxLQUFNdWEsR0FBUSxFQUFNLEdBQUksSUFHOUN2RCxFQUFPclgsVUFBVTZnQixZQUFjLFNBQXNCakcsRUFBUTZFLEdBRTNELE9BREtBLEdBQVVSLEVBQVlyRSxFQUFRLEVBQUd2YSxLQUFLa0MsUUFDcENpVixFQUFROEMsS0FBS2phLEtBQU11YSxHQUFRLEVBQU8sR0FBSSxJQUcvQ3ZELEVBQU9yWCxVQUFVOGdCLGFBQWUsU0FBdUJsRyxFQUFRNkUsR0FFN0QsT0FES0EsR0FBVVIsRUFBWXJFLEVBQVEsRUFBR3ZhLEtBQUtrQyxRQUNwQ2lWLEVBQVE4QyxLQUFLamEsS0FBTXVhLEdBQVEsRUFBTSxHQUFJLElBRzlDdkQsRUFBT3JYLFVBQVUrZ0IsYUFBZSxTQUF1Qm5HLEVBQVE2RSxHQUU3RCxPQURLQSxHQUFVUixFQUFZckUsRUFBUSxFQUFHdmEsS0FBS2tDLFFBQ3BDaVYsRUFBUThDLEtBQUtqYSxLQUFNdWEsR0FBUSxFQUFPLEdBQUksSUFTL0N2RCxFQUFPclgsVUFBVWdoQixZQUFjLFNBQXNCM2hCLEVBQU91YixFQUFRdFEsRUFBWW1WLElBQzlFcGdCLEdBQVNBLEVBQ1R1YixHQUFrQixFQUNsQnRRLEdBQTBCLEVBQ3JCbVYsSUFFSE4sRUFBUzllLEtBQU1oQixFQUFPdWIsRUFBUXRRLEVBRGZ2RixLQUFLc2IsSUFBSSxFQUFHLEVBQUkvVixHQUFjLEVBQ08sR0FHdEQsSUFBSXdWLEVBQU0sRUFDTjFoQixFQUFJLEVBRVIsSUFEQWlDLEtBQUt1YSxHQUFrQixJQUFSdmIsSUFDTmpCLEVBQUlrTSxJQUFld1YsR0FBTyxNQUNqQ3pmLEtBQUt1YSxFQUFTeGMsR0FBTWlCLEVBQVF5Z0IsRUFBTyxJQUdyQyxPQUFPbEYsRUFBU3RRLEdBR2xCK00sRUFBT3JYLFVBQVVpaEIsWUFBYyxTQUFzQjVoQixFQUFPdWIsRUFBUXRRLEVBQVltVixJQUM5RXBnQixHQUFTQSxFQUNUdWIsR0FBa0IsRUFDbEJ0USxHQUEwQixFQUNyQm1WLElBRUhOLEVBQVM5ZSxLQUFNaEIsRUFBT3ViLEVBQVF0USxFQURmdkYsS0FBS3NiLElBQUksRUFBRyxFQUFJL1YsR0FBYyxFQUNPLEdBR3RELElBQUlsTSxFQUFJa00sRUFBYSxFQUNqQndWLEVBQU0sRUFFVixJQURBemYsS0FBS3VhLEVBQVN4YyxHQUFhLElBQVJpQixJQUNWakIsR0FBSyxJQUFNMGhCLEdBQU8sTUFDekJ6ZixLQUFLdWEsRUFBU3hjLEdBQU1pQixFQUFReWdCLEVBQU8sSUFHckMsT0FBT2xGLEVBQVN0USxHQUdsQitNLEVBQU9yWCxVQUFVa2hCLFdBQWEsU0FBcUI3aEIsRUFBT3ViLEVBQVE2RSxHQU1oRSxPQUxBcGdCLEdBQVNBLEVBQ1R1YixHQUFrQixFQUNiNkUsR0FBVU4sRUFBUzllLEtBQU1oQixFQUFPdWIsRUFBUSxFQUFHLElBQU0sR0FDakR2RCxFQUFPSyxzQkFBcUJyWSxFQUFRMEYsS0FBS0ksTUFBTTlGLElBQ3BEZ0IsS0FBS3VhLEdBQW1CLElBQVJ2YixFQUNUdWIsRUFBUyxHQVdsQnZELEVBQU9yWCxVQUFVbWhCLGNBQWdCLFNBQXdCOWhCLEVBQU91YixFQUFRNkUsR0FVdEUsT0FUQXBnQixHQUFTQSxFQUNUdWIsR0FBa0IsRUFDYjZFLEdBQVVOLEVBQVM5ZSxLQUFNaEIsRUFBT3ViLEVBQVEsRUFBRyxNQUFRLEdBQ3BEdkQsRUFBT0sscUJBQ1RyWCxLQUFLdWEsR0FBbUIsSUFBUnZiLEVBQ2hCZ0IsS0FBS3VhLEVBQVMsR0FBTXZiLElBQVUsR0FFOUIrZixFQUFrQi9lLEtBQU1oQixFQUFPdWIsR0FBUSxHQUVsQ0EsRUFBUyxHQUdsQnZELEVBQU9yWCxVQUFVb2hCLGNBQWdCLFNBQXdCL2hCLEVBQU91YixFQUFRNkUsR0FVdEUsT0FUQXBnQixHQUFTQSxFQUNUdWIsR0FBa0IsRUFDYjZFLEdBQVVOLEVBQVM5ZSxLQUFNaEIsRUFBT3ViLEVBQVEsRUFBRyxNQUFRLEdBQ3BEdkQsRUFBT0sscUJBQ1RyWCxLQUFLdWEsR0FBV3ZiLElBQVUsRUFDMUJnQixLQUFLdWEsRUFBUyxHQUFjLElBQVJ2YixHQUVwQitmLEVBQWtCL2UsS0FBTWhCLEVBQU91YixHQUFRLEdBRWxDQSxFQUFTLEdBVWxCdkQsRUFBT3JYLFVBQVVxaEIsY0FBZ0IsU0FBd0JoaUIsRUFBT3ViLEVBQVE2RSxHQVl0RSxPQVhBcGdCLEdBQVNBLEVBQ1R1YixHQUFrQixFQUNiNkUsR0FBVU4sRUFBUzllLEtBQU1oQixFQUFPdWIsRUFBUSxFQUFHLFdBQVksR0FDeER2RCxFQUFPSyxxQkFDVHJYLEtBQUt1YSxFQUFTLEdBQU12YixJQUFVLEdBQzlCZ0IsS0FBS3VhLEVBQVMsR0FBTXZiLElBQVUsR0FDOUJnQixLQUFLdWEsRUFBUyxHQUFNdmIsSUFBVSxFQUM5QmdCLEtBQUt1YSxHQUFtQixJQUFSdmIsR0FFaEJpZ0IsRUFBa0JqZixLQUFNaEIsRUFBT3ViLEdBQVEsR0FFbENBLEVBQVMsR0FHbEJ2RCxFQUFPclgsVUFBVXNoQixjQUFnQixTQUF3QmppQixFQUFPdWIsRUFBUTZFLEdBWXRFLE9BWEFwZ0IsR0FBU0EsRUFDVHViLEdBQWtCLEVBQ2I2RSxHQUFVTixFQUFTOWUsS0FBTWhCLEVBQU91YixFQUFRLEVBQUcsV0FBWSxHQUN4RHZELEVBQU9LLHFCQUNUclgsS0FBS3VhLEdBQVd2YixJQUFVLEdBQzFCZ0IsS0FBS3VhLEVBQVMsR0FBTXZiLElBQVUsR0FDOUJnQixLQUFLdWEsRUFBUyxHQUFNdmIsSUFBVSxFQUM5QmdCLEtBQUt1YSxFQUFTLEdBQWMsSUFBUnZiLEdBRXBCaWdCLEVBQWtCamYsS0FBTWhCLEVBQU91YixHQUFRLEdBRWxDQSxFQUFTLEdBR2xCdkQsRUFBT3JYLFVBQVV1aEIsV0FBYSxTQUFxQmxpQixFQUFPdWIsRUFBUXRRLEVBQVltVixHQUc1RSxHQUZBcGdCLEdBQVNBLEVBQ1R1YixHQUFrQixHQUNiNkUsRUFBVSxDQUNiLElBQUkrQixFQUFRemMsS0FBS3NiLElBQUksRUFBRyxFQUFJL1YsRUFBYSxHQUV6QzZVLEVBQVM5ZSxLQUFNaEIsRUFBT3ViLEVBQVF0USxFQUFZa1gsRUFBUSxHQUFJQSxHQUd4RCxJQUFJcGpCLEVBQUksRUFDSjBoQixFQUFNLEVBQ04yQixFQUFNLEVBRVYsSUFEQXBoQixLQUFLdWEsR0FBa0IsSUFBUnZiLElBQ05qQixFQUFJa00sSUFBZXdWLEdBQU8sTUFDN0J6Z0IsRUFBUSxHQUFhLElBQVJvaUIsR0FBc0MsSUFBekJwaEIsS0FBS3VhLEVBQVN4YyxFQUFJLEtBQzlDcWpCLEVBQU0sR0FFUnBoQixLQUFLdWEsRUFBU3hjLElBQU9pQixFQUFReWdCLEdBQVEsR0FBSzJCLEVBQU0sSUFHbEQsT0FBTzdHLEVBQVN0USxHQUdsQitNLEVBQU9yWCxVQUFVMGhCLFdBQWEsU0FBcUJyaUIsRUFBT3ViLEVBQVF0USxFQUFZbVYsR0FHNUUsR0FGQXBnQixHQUFTQSxFQUNUdWIsR0FBa0IsR0FDYjZFLEVBQVUsQ0FDYixJQUFJK0IsRUFBUXpjLEtBQUtzYixJQUFJLEVBQUcsRUFBSS9WLEVBQWEsR0FFekM2VSxFQUFTOWUsS0FBTWhCLEVBQU91YixFQUFRdFEsRUFBWWtYLEVBQVEsR0FBSUEsR0FHeEQsSUFBSXBqQixFQUFJa00sRUFBYSxFQUNqQndWLEVBQU0sRUFDTjJCLEVBQU0sRUFFVixJQURBcGhCLEtBQUt1YSxFQUFTeGMsR0FBYSxJQUFSaUIsSUFDVmpCLEdBQUssSUFBTTBoQixHQUFPLE1BQ3JCemdCLEVBQVEsR0FBYSxJQUFSb2lCLEdBQXNDLElBQXpCcGhCLEtBQUt1YSxFQUFTeGMsRUFBSSxLQUM5Q3FqQixFQUFNLEdBRVJwaEIsS0FBS3VhLEVBQVN4YyxJQUFPaUIsRUFBUXlnQixHQUFRLEdBQUsyQixFQUFNLElBR2xELE9BQU83RyxFQUFTdFEsR0FHbEIrTSxFQUFPclgsVUFBVTJoQixVQUFZLFNBQW9CdGlCLEVBQU91YixFQUFRNkUsR0FPOUQsT0FOQXBnQixHQUFTQSxFQUNUdWIsR0FBa0IsRUFDYjZFLEdBQVVOLEVBQVM5ZSxLQUFNaEIsRUFBT3ViLEVBQVEsRUFBRyxLQUFPLEtBQ2xEdkQsRUFBT0ssc0JBQXFCclksRUFBUTBGLEtBQUtJLE1BQU05RixJQUNoREEsRUFBUSxJQUFHQSxFQUFRLElBQU9BLEVBQVEsR0FDdENnQixLQUFLdWEsR0FBbUIsSUFBUnZiLEVBQ1R1YixFQUFTLEdBR2xCdkQsRUFBT3JYLFVBQVU0aEIsYUFBZSxTQUF1QnZpQixFQUFPdWIsRUFBUTZFLEdBVXBFLE9BVEFwZ0IsR0FBU0EsRUFDVHViLEdBQWtCLEVBQ2I2RSxHQUFVTixFQUFTOWUsS0FBTWhCLEVBQU91YixFQUFRLEVBQUcsT0FBUyxPQUNyRHZELEVBQU9LLHFCQUNUclgsS0FBS3VhLEdBQW1CLElBQVJ2YixFQUNoQmdCLEtBQUt1YSxFQUFTLEdBQU12YixJQUFVLEdBRTlCK2YsRUFBa0IvZSxLQUFNaEIsRUFBT3ViLEdBQVEsR0FFbENBLEVBQVMsR0FHbEJ2RCxFQUFPclgsVUFBVTZoQixhQUFlLFNBQXVCeGlCLEVBQU91YixFQUFRNkUsR0FVcEUsT0FUQXBnQixHQUFTQSxFQUNUdWIsR0FBa0IsRUFDYjZFLEdBQVVOLEVBQVM5ZSxLQUFNaEIsRUFBT3ViLEVBQVEsRUFBRyxPQUFTLE9BQ3JEdkQsRUFBT0sscUJBQ1RyWCxLQUFLdWEsR0FBV3ZiLElBQVUsRUFDMUJnQixLQUFLdWEsRUFBUyxHQUFjLElBQVJ2YixHQUVwQitmLEVBQWtCL2UsS0FBTWhCLEVBQU91YixHQUFRLEdBRWxDQSxFQUFTLEdBR2xCdkQsRUFBT3JYLFVBQVU4aEIsYUFBZSxTQUF1QnppQixFQUFPdWIsRUFBUTZFLEdBWXBFLE9BWEFwZ0IsR0FBU0EsRUFDVHViLEdBQWtCLEVBQ2I2RSxHQUFVTixFQUFTOWUsS0FBTWhCLEVBQU91YixFQUFRLEVBQUcsWUFBYSxZQUN6RHZELEVBQU9LLHFCQUNUclgsS0FBS3VhLEdBQW1CLElBQVJ2YixFQUNoQmdCLEtBQUt1YSxFQUFTLEdBQU12YixJQUFVLEVBQzlCZ0IsS0FBS3VhLEVBQVMsR0FBTXZiLElBQVUsR0FDOUJnQixLQUFLdWEsRUFBUyxHQUFNdmIsSUFBVSxJQUU5QmlnQixFQUFrQmpmLEtBQU1oQixFQUFPdWIsR0FBUSxHQUVsQ0EsRUFBUyxHQUdsQnZELEVBQU9yWCxVQUFVK2hCLGFBQWUsU0FBdUIxaUIsRUFBT3ViLEVBQVE2RSxHQWFwRSxPQVpBcGdCLEdBQVNBLEVBQ1R1YixHQUFrQixFQUNiNkUsR0FBVU4sRUFBUzllLEtBQU1oQixFQUFPdWIsRUFBUSxFQUFHLFlBQWEsWUFDekR2YixFQUFRLElBQUdBLEVBQVEsV0FBYUEsRUFBUSxHQUN4Q2dZLEVBQU9LLHFCQUNUclgsS0FBS3VhLEdBQVd2YixJQUFVLEdBQzFCZ0IsS0FBS3VhLEVBQVMsR0FBTXZiLElBQVUsR0FDOUJnQixLQUFLdWEsRUFBUyxHQUFNdmIsSUFBVSxFQUM5QmdCLEtBQUt1YSxFQUFTLEdBQWMsSUFBUnZiLEdBRXBCaWdCLEVBQWtCamYsS0FBTWhCLEVBQU91YixHQUFRLEdBRWxDQSxFQUFTLEdBZ0JsQnZELEVBQU9yWCxVQUFVZ2lCLGFBQWUsU0FBdUIzaUIsRUFBT3ViLEVBQVE2RSxHQUNwRSxPQUFPRCxFQUFXbmYsS0FBTWhCLEVBQU91YixHQUFRLEVBQU02RSxJQUcvQ3BJLEVBQU9yWCxVQUFVaWlCLGFBQWUsU0FBdUI1aUIsRUFBT3ViLEVBQVE2RSxHQUNwRSxPQUFPRCxFQUFXbmYsS0FBTWhCLEVBQU91YixHQUFRLEVBQU82RSxJQVdoRHBJLEVBQU9yWCxVQUFVa2lCLGNBQWdCLFNBQXdCN2lCLEVBQU91YixFQUFRNkUsR0FDdEUsT0FBT0MsRUFBWXJmLEtBQU1oQixFQUFPdWIsR0FBUSxFQUFNNkUsSUFHaERwSSxFQUFPclgsVUFBVW1pQixjQUFnQixTQUF3QjlpQixFQUFPdWIsRUFBUTZFLEdBQ3RFLE9BQU9DLEVBQVlyZixLQUFNaEIsRUFBT3ViLEdBQVEsRUFBTzZFLElBSWpEcEksRUFBT3JYLFVBQVUyWSxLQUFPLFNBQWUwRixFQUFRK0QsRUFBYWhKLEVBQU9DLEdBUWpFLEdBUEtELElBQU9BLEVBQVEsR0FDZkMsR0FBZSxJQUFSQSxJQUFXQSxFQUFNaFosS0FBS2tDLFFBQzlCNmYsR0FBZS9ELEVBQU85YixTQUFRNmYsRUFBYy9ELEVBQU85YixRQUNsRDZmLElBQWFBLEVBQWMsR0FDNUIvSSxFQUFNLEdBQUtBLEVBQU1ELElBQU9DLEVBQU1ELEdBRzlCQyxJQUFRRCxFQUFPLE9BQU8sRUFDMUIsR0FBc0IsSUFBbEJpRixFQUFPOWIsUUFBZ0MsSUFBaEJsQyxLQUFLa0MsT0FBYyxPQUFPLEVBR3JELEdBQUk2ZixFQUFjLEVBQ2hCLE1BQU0sSUFBSXZVLFdBQVcsNkJBRXZCLEdBQUl1TCxFQUFRLEdBQUtBLEdBQVMvWSxLQUFLa0MsT0FBUSxNQUFNLElBQUlzTCxXQUFXLDZCQUM1RCxHQUFJd0wsRUFBTSxFQUFHLE1BQU0sSUFBSXhMLFdBQVcsMkJBRzlCd0wsRUFBTWhaLEtBQUtrQyxTQUFROFcsRUFBTWhaLEtBQUtrQyxRQUM5QjhiLEVBQU85YixPQUFTNmYsRUFBYy9JLEVBQU1ELElBQ3RDQyxFQUFNZ0YsRUFBTzliLE9BQVM2ZixFQUFjaEosR0FHdEMsSUFDSWhiLEVBREF1RSxFQUFNMFcsRUFBTUQsRUFHaEIsR0FBSS9ZLE9BQVNnZSxHQUFVakYsRUFBUWdKLEdBQWVBLEVBQWMvSSxFQUUxRCxJQUFLamIsRUFBSXVFLEVBQU0sRUFBR3ZFLEdBQUssSUFBS0EsRUFDMUJpZ0IsRUFBT2pnQixFQUFJZ2tCLEdBQWUvaEIsS0FBS2pDLEVBQUlnYixRQUVoQyxHQUFJelcsRUFBTSxNQUFTMFUsRUFBT0ssb0JBRS9CLElBQUt0WixFQUFJLEVBQUdBLEVBQUl1RSxJQUFPdkUsRUFDckJpZ0IsRUFBT2pnQixFQUFJZ2tCLEdBQWUvaEIsS0FBS2pDLEVBQUlnYixRQUdyQy9PLFdBQVdySyxVQUFVWSxJQUFJckMsS0FDdkI4ZixFQUNBaGUsS0FBSzJjLFNBQVM1RCxFQUFPQSxFQUFRelcsR0FDN0J5ZixHQUlKLE9BQU96ZixHQU9UMFUsRUFBT3JYLFVBQVVzZCxLQUFPLFNBQWUxRSxFQUFLUSxFQUFPQyxFQUFLakIsR0FFdEQsR0FBbUIsaUJBQVJRLEVBQWtCLENBUzNCLEdBUnFCLGlCQUFWUSxHQUNUaEIsRUFBV2dCLEVBQ1hBLEVBQVEsRUFDUkMsRUFBTWhaLEtBQUtrQyxRQUNhLGlCQUFSOFcsSUFDaEJqQixFQUFXaUIsRUFDWEEsRUFBTWhaLEtBQUtrQyxRQUVNLElBQWZxVyxFQUFJclcsT0FBYyxDQUNwQixJQUFJOGYsRUFBT3pKLEVBQUkyQyxXQUFXLEdBQ3RCOEcsRUFBTyxNQUNUekosRUFBTXlKLEdBR1YsUUFBaUIxWixJQUFieVAsR0FBOEMsaUJBQWJBLEVBQ25DLE1BQU0sSUFBSWxRLFVBQVUsNkJBRXRCLEdBQXdCLGlCQUFia1EsSUFBMEJmLEVBQU9nQixXQUFXRCxHQUNyRCxNQUFNLElBQUlsUSxVQUFVLHFCQUF1QmtRLE9BRXJCLGlCQUFSUSxJQUNoQkEsR0FBWSxLQUlkLEdBQUlRLEVBQVEsR0FBSy9ZLEtBQUtrQyxPQUFTNlcsR0FBUy9ZLEtBQUtrQyxPQUFTOFcsRUFDcEQsTUFBTSxJQUFJeEwsV0FBVyxzQkFHdkIsR0FBSXdMLEdBQU9ELEVBQ1QsT0FBTy9ZLEtBUVQsSUFBSWpDLEVBQ0osR0FOQWdiLEtBQWtCLEVBQ2xCQyxPQUFjMVEsSUFBUjBRLEVBQW9CaFosS0FBS2tDLE9BQVM4VyxJQUFRLEVBRTNDVCxJQUFLQSxFQUFNLEdBR0csaUJBQVJBLEVBQ1QsSUFBS3hhLEVBQUlnYixFQUFPaGIsRUFBSWliLElBQU9qYixFQUN6QmlDLEtBQUtqQyxHQUFLd2EsTUFFUCxDQUNMLElBQUkxTCxFQUFRbUssRUFBT29CLFNBQVNHLEdBQ3hCQSxFQUNBSyxFQUFZLElBQUk1QixFQUFPdUIsRUFBS1IsR0FBVW5ULFlBQ3RDdEMsRUFBTXVLLEVBQU0zSyxPQUNoQixJQUFLbkUsRUFBSSxFQUFHQSxFQUFJaWIsRUFBTUQsSUFBU2hiLEVBQzdCaUMsS0FBS2pDLEVBQUlnYixHQUFTbE0sRUFBTTlPLEVBQUl1RSxHQUloQyxPQUFPdEMsTUFNVCxJQUFJaWlCLEVBQW9CLHFCQW1CeEIsU0FBU3RELEVBQU9uZixHQUNkLE9BQUlBLEVBQUksR0FBVyxJQUFNQSxFQUFFb0YsU0FBUyxJQUM3QnBGLEVBQUVvRixTQUFTLElBR3BCLFNBQVNnVSxFQUFhZCxFQUFReUQsR0FFNUIsSUFBSVcsRUFESlgsRUFBUUEsR0FBUzJHLElBTWpCLElBSkEsSUFBSWhnQixFQUFTNFYsRUFBTzVWLE9BQ2hCaWdCLEVBQWdCLEtBQ2hCdFYsRUFBUSxHQUVIOU8sRUFBSSxFQUFHQSxFQUFJbUUsSUFBVW5FLEVBQUcsQ0FJL0IsSUFIQW1lLEVBQVlwRSxFQUFPb0QsV0FBV25kLElBR2QsT0FBVW1lLEVBQVksTUFBUSxDQUU1QyxJQUFLaUcsRUFBZSxDQUVsQixHQUFJakcsRUFBWSxNQUFRLEVBRWpCWCxHQUFTLElBQU0sR0FBRzFPLEVBQU01SixLQUFLLElBQU0sSUFBTSxLQUM5QyxTQUNLLEdBQUlsRixFQUFJLElBQU1tRSxFQUFRLEVBRXRCcVosR0FBUyxJQUFNLEdBQUcxTyxFQUFNNUosS0FBSyxJQUFNLElBQU0sS0FDOUMsU0FJRmtmLEVBQWdCakcsRUFFaEIsU0FJRixHQUFJQSxFQUFZLE1BQVEsRUFDakJYLEdBQVMsSUFBTSxHQUFHMU8sRUFBTTVKLEtBQUssSUFBTSxJQUFNLEtBQzlDa2YsRUFBZ0JqRyxFQUNoQixTQUlGQSxFQUFrRSxPQUFyRGlHLEVBQWdCLE9BQVUsR0FBS2pHLEVBQVksWUFDL0NpRyxJQUVKNUcsR0FBUyxJQUFNLEdBQUcxTyxFQUFNNUosS0FBSyxJQUFNLElBQU0sS0FNaEQsR0FIQWtmLEVBQWdCLEtBR1pqRyxFQUFZLElBQU0sQ0FDcEIsSUFBS1gsR0FBUyxHQUFLLEVBQUcsTUFDdEIxTyxFQUFNNUosS0FBS2laLFFBQ04sR0FBSUEsRUFBWSxLQUFPLENBQzVCLElBQUtYLEdBQVMsR0FBSyxFQUFHLE1BQ3RCMU8sRUFBTTVKLEtBQ0ppWixHQUFhLEVBQU0sSUFDUCxHQUFaQSxFQUFtQixVQUVoQixHQUFJQSxFQUFZLE1BQVMsQ0FDOUIsSUFBS1gsR0FBUyxHQUFLLEVBQUcsTUFDdEIxTyxFQUFNNUosS0FDSmlaLEdBQWEsR0FBTSxJQUNuQkEsR0FBYSxFQUFNLEdBQU8sSUFDZCxHQUFaQSxFQUFtQixTQUVoQixNQUFJQSxFQUFZLFNBU3JCLE1BQU0sSUFBSTVhLE1BQU0sc0JBUmhCLElBQUtpYSxHQUFTLEdBQUssRUFBRyxNQUN0QjFPLEVBQU01SixLQUNKaVosR0FBYSxHQUFPLElBQ3BCQSxHQUFhLEdBQU0sR0FBTyxJQUMxQkEsR0FBYSxFQUFNLEdBQU8sSUFDZCxHQUFaQSxFQUFtQixNQU96QixPQUFPclAsRUE0QlQsU0FBU2dNLEVBQWU5QixHQUN0QixPQUFPRyxFQUFPa0wsWUFoSWhCLFNBQXNCckwsR0FJcEIsSUFGQUEsRUFVRixTQUFxQkEsR0FDbkIsT0FBSUEsRUFBSXBLLEtBQWFvSyxFQUFJcEssT0FDbEJvSyxFQUFJakssUUFBUSxhQUFjLElBWjNCdVYsQ0FBV3RMLEdBQUtqSyxRQUFRbVYsRUFBbUIsS0FFekMvZixPQUFTLEVBQUcsTUFBTyxHQUUzQixLQUFPNlUsRUFBSTdVLE9BQVMsR0FBTSxHQUN4QjZVLEdBQVksSUFFZCxPQUFPQSxFQXVIbUJ1TCxDQUFZdkwsSUFHeEMsU0FBU2dFLEVBQVl3SCxFQUFLQyxFQUFLakksRUFBUXJZLEdBQ3JDLElBQUssSUFBSW5FLEVBQUksRUFBR0EsRUFBSW1FLEtBQ2JuRSxFQUFJd2MsR0FBVWlJLEVBQUl0Z0IsUUFBWW5FLEdBQUt3a0IsRUFBSXJnQixVQURoQm5FLEVBRTVCeWtCLEVBQUl6a0IsRUFBSXdjLEdBQVVnSSxFQUFJeGtCLEdBRXhCLE9BQU9BLEssOENDcnZEVFIsRUFBUTBNLFdBdUNSLFNBQXFCd1ksR0FDbkIsSUFBSUMsRUFBT0MsRUFBUUYsR0FDZkcsRUFBV0YsRUFBSyxHQUNoQkcsRUFBa0JILEVBQUssR0FDM0IsT0FBdUMsR0FBOUJFLEVBQVdDLEdBQXVCLEVBQUtBLEdBMUNsRHRsQixFQUFRNmtCLFlBaURSLFNBQXNCSyxHQUNwQixJQUFJSyxFQWNBL2tCLEVBYkEya0IsRUFBT0MsRUFBUUYsR0FDZkcsRUFBV0YsRUFBSyxHQUNoQkcsRUFBa0JILEVBQUssR0FFdkI3SSxFQUFNLElBQUlrSixFQVZoQixTQUFzQk4sRUFBS0csRUFBVUMsR0FDbkMsT0FBdUMsR0FBOUJELEVBQVdDLEdBQXVCLEVBQUtBLEVBUzlCRyxDQUFZUCxFQUFLRyxFQUFVQyxJQUV6Q0ksRUFBVSxFQUdWM2dCLEVBQU11Z0IsRUFBa0IsRUFDeEJELEVBQVcsRUFDWEEsRUFHSixJQUFLN2tCLEVBQUksRUFBR0EsRUFBSXVFLEVBQUt2RSxHQUFLLEVBQ3hCK2tCLEVBQ0dJLEVBQVVULEVBQUl2SCxXQUFXbmQsS0FBTyxHQUNoQ21sQixFQUFVVCxFQUFJdkgsV0FBV25kLEVBQUksS0FBTyxHQUNwQ21sQixFQUFVVCxFQUFJdkgsV0FBV25kLEVBQUksS0FBTyxFQUNyQ21sQixFQUFVVCxFQUFJdkgsV0FBV25kLEVBQUksSUFDL0I4YixFQUFJb0osS0FBY0gsR0FBTyxHQUFNLElBQy9CakosRUFBSW9KLEtBQWNILEdBQU8sRUFBSyxJQUM5QmpKLEVBQUlvSixLQUFtQixJQUFOSCxFQUdLLElBQXBCRCxJQUNGQyxFQUNHSSxFQUFVVCxFQUFJdkgsV0FBV25kLEtBQU8sRUFDaENtbEIsRUFBVVQsRUFBSXZILFdBQVduZCxFQUFJLEtBQU8sRUFDdkM4YixFQUFJb0osS0FBbUIsSUFBTkgsR0FHSyxJQUFwQkQsSUFDRkMsRUFDR0ksRUFBVVQsRUFBSXZILFdBQVduZCxLQUFPLEdBQ2hDbWxCLEVBQVVULEVBQUl2SCxXQUFXbmQsRUFBSSxLQUFPLEVBQ3BDbWxCLEVBQVVULEVBQUl2SCxXQUFXbmQsRUFBSSxLQUFPLEVBQ3ZDOGIsRUFBSW9KLEtBQWNILEdBQU8sRUFBSyxJQUM5QmpKLEVBQUlvSixLQUFtQixJQUFOSCxHQUduQixPQUFPakosR0EzRlR0YyxFQUFRb2UsY0FrSFIsU0FBd0J3SCxHQVF0QixJQVBBLElBQUlMLEVBQ0F4Z0IsRUFBTTZnQixFQUFNamhCLE9BQ1praEIsRUFBYTlnQixFQUFNLEVBQ25CbU0sRUFBUSxHQUlIMVEsRUFBSSxFQUFHc2xCLEVBQU8vZ0IsRUFBTThnQixFQUFZcmxCLEVBQUlzbEIsRUFBTXRsQixHQUg5QixNQUluQjBRLEVBQU14TCxLQUFLcWdCLEVBQ1RILEVBQU9wbEIsRUFBSUEsRUFMTSxNQUtnQnNsQixFQUFPQSxFQUFRdGxCLEVBTC9CLFFBVUYsSUFBZnFsQixHQUNGTixFQUFNSyxFQUFNN2dCLEVBQU0sR0FDbEJtTSxFQUFNeEwsS0FDSnNnQixFQUFPVCxHQUFPLEdBQ2RTLEVBQVFULEdBQU8sRUFBSyxJQUNwQixPQUVzQixJQUFmTSxJQUNUTixHQUFPSyxFQUFNN2dCLEVBQU0sSUFBTSxHQUFLNmdCLEVBQU03Z0IsRUFBTSxHQUMxQ21NLEVBQU14TCxLQUNKc2dCLEVBQU9ULEdBQU8sSUFDZFMsRUFBUVQsR0FBTyxFQUFLLElBQ3BCUyxFQUFRVCxHQUFPLEVBQUssSUFDcEIsTUFJSixPQUFPclUsRUFBTXBELEtBQUssS0EzSXBCLElBTEEsSUFBSWtZLEVBQVMsR0FDVEwsRUFBWSxHQUNaSCxFQUE0QixvQkFBZi9ZLFdBQTZCQSxXQUFhakgsTUFFdkRpZixFQUFPLG1FQUNGamtCLEVBQUksRUFBR3VFLEVBQU0wZixFQUFLOWYsT0FBUW5FLEVBQUl1RSxJQUFPdkUsRUFDNUN3bEIsRUFBT3hsQixHQUFLaWtCLEVBQUtqa0IsR0FDakJtbEIsRUFBVWxCLEVBQUs5RyxXQUFXbmQsSUFBTUEsRUFRbEMsU0FBUzRrQixFQUFTRixHQUNoQixJQUFJbmdCLEVBQU1tZ0IsRUFBSXZnQixPQUVkLEdBQUlJLEVBQU0sRUFBSSxFQUNaLE1BQU0sSUFBSWhCLE1BQU0sa0RBS2xCLElBQUlzaEIsRUFBV0gsRUFBSWhiLFFBQVEsS0FPM0IsT0FOa0IsSUFBZG1iLElBQWlCQSxFQUFXdGdCLEdBTXpCLENBQUNzZ0IsRUFKY0EsSUFBYXRnQixFQUMvQixFQUNBLEVBQUtzZ0IsRUFBVyxHQXNFdEIsU0FBU1UsRUFBYUgsRUFBT3BLLEVBQU9DLEdBR2xDLElBRkEsSUFBSThKLEVBUm9CVSxFQVNwQkMsRUFBUyxHQUNKMWxCLEVBQUlnYixFQUFPaGIsRUFBSWliLEVBQUtqYixHQUFLLEVBQ2hDK2tCLEdBQ0lLLEVBQU1wbEIsSUFBTSxHQUFNLFdBQ2xCb2xCLEVBQU1wbEIsRUFBSSxJQUFNLEVBQUssUUFDUCxJQUFmb2xCLEVBQU1wbEIsRUFBSSxJQUNiMGxCLEVBQU94Z0IsS0FkRnNnQixHQURpQkMsRUFlTVYsSUFkVCxHQUFLLElBQ3hCUyxFQUFPQyxHQUFPLEdBQUssSUFDbkJELEVBQU9DLEdBQU8sRUFBSSxJQUNsQkQsRUFBYSxHQUFOQyxJQWFULE9BQU9DLEVBQU9wWSxLQUFLLElBakdyQjZYLEVBQVUsSUFBSWhJLFdBQVcsSUFBTSxHQUMvQmdJLEVBQVUsSUFBSWhJLFdBQVcsSUFBTSxJLGNDbkIvQjNkLEVBQVEwYyxLQUFPLFNBQVUvUCxFQUFRcVEsRUFBUW1KLEVBQU1DLEVBQU1DLEdBQ25ELElBQUlqaUIsRUFBR3hELEVBQ0gwbEIsRUFBaUIsRUFBVEQsRUFBY0QsRUFBTyxFQUM3QkcsR0FBUSxHQUFLRCxHQUFRLEVBQ3JCRSxFQUFRRCxHQUFRLEVBQ2hCRSxHQUFTLEVBQ1RqbUIsRUFBSTJsQixFQUFRRSxFQUFTLEVBQUssRUFDMUJ2bEIsRUFBSXFsQixHQUFRLEVBQUksRUFDaEI1akIsRUFBSW9LLEVBQU9xUSxFQUFTeGMsR0FPeEIsSUFMQUEsR0FBS00sRUFFTHNELEVBQUk3QixHQUFNLElBQU9ra0IsR0FBVSxFQUMzQmxrQixLQUFRa2tCLEVBQ1JBLEdBQVNILEVBQ0ZHLEVBQVEsRUFBR3JpQixFQUFTLElBQUpBLEVBQVd1SSxFQUFPcVEsRUFBU3hjLEdBQUlBLEdBQUtNLEVBQUcybEIsR0FBUyxHQUt2RSxJQUhBN2xCLEVBQUl3RCxHQUFNLElBQU9xaUIsR0FBVSxFQUMzQnJpQixLQUFRcWlCLEVBQ1JBLEdBQVNMLEVBQ0ZLLEVBQVEsRUFBRzdsQixFQUFTLElBQUpBLEVBQVcrTCxFQUFPcVEsRUFBU3hjLEdBQUlBLEdBQUtNLEVBQUcybEIsR0FBUyxHQUV2RSxHQUFVLElBQU5yaUIsRUFDRkEsRUFBSSxFQUFJb2lCLE1BQ0gsSUFBSXBpQixJQUFNbWlCLEVBQ2YsT0FBTzNsQixFQUFJOGxCLElBQXNCL0IsS0FBZHBpQixHQUFLLEVBQUksR0FFNUIzQixHQUFRdUcsS0FBS3NiLElBQUksRUFBRzJELEdBQ3BCaGlCLEdBQVFvaUIsRUFFVixPQUFRamtCLEdBQUssRUFBSSxHQUFLM0IsRUFBSXVHLEtBQUtzYixJQUFJLEVBQUdyZSxFQUFJZ2lCLElBRzVDcG1CLEVBQVEyYSxNQUFRLFNBQVVoTyxFQUFRbEwsRUFBT3ViLEVBQVFtSixFQUFNQyxFQUFNQyxHQUMzRCxJQUFJamlCLEVBQUd4RCxFQUFHQyxFQUNOeWxCLEVBQWlCLEVBQVRELEVBQWNELEVBQU8sRUFDN0JHLEdBQVEsR0FBS0QsR0FBUSxFQUNyQkUsRUFBUUQsR0FBUSxFQUNoQkksRUFBZSxLQUFUUCxFQUFjamYsS0FBS3NiLElBQUksR0FBSSxJQUFNdGIsS0FBS3NiLElBQUksR0FBSSxJQUFNLEVBQzFEamlCLEVBQUkybEIsRUFBTyxFQUFLRSxFQUFTLEVBQ3pCdmxCLEVBQUlxbEIsRUFBTyxHQUFLLEVBQ2hCNWpCLEVBQUlkLEVBQVEsR0FBZ0IsSUFBVkEsR0FBZSxFQUFJQSxFQUFRLEVBQUssRUFBSSxFQW1DMUQsSUFqQ0FBLEVBQVEwRixLQUFLeWYsSUFBSW5sQixHQUViMGEsTUFBTTFhLElBQVVBLElBQVVrakIsS0FDNUIvakIsRUFBSXViLE1BQU0xYSxHQUFTLEVBQUksRUFDdkIyQyxFQUFJbWlCLElBRUpuaUIsRUFBSStDLEtBQUtJLE1BQU1KLEtBQUswZixJQUFJcGxCLEdBQVMwRixLQUFLMmYsS0FDbENybEIsR0FBU1osRUFBSXNHLEtBQUtzYixJQUFJLEdBQUlyZSxJQUFNLElBQ2xDQSxJQUNBdkQsR0FBSyxJQUdMWSxHQURFMkMsRUFBSW9pQixHQUFTLEVBQ05HLEVBQUs5bEIsRUFFTDhsQixFQUFLeGYsS0FBS3NiLElBQUksRUFBRyxFQUFJK0QsSUFFcEIzbEIsR0FBSyxJQUNmdUQsSUFDQXZELEdBQUssR0FHSHVELEVBQUlvaUIsR0FBU0QsR0FDZjNsQixFQUFJLEVBQ0p3RCxFQUFJbWlCLEdBQ0tuaUIsRUFBSW9pQixHQUFTLEdBQ3RCNWxCLEdBQU1hLEVBQVFaLEVBQUssR0FBS3NHLEtBQUtzYixJQUFJLEVBQUcyRCxHQUNwQ2hpQixHQUFRb2lCLElBRVI1bEIsRUFBSWEsRUFBUTBGLEtBQUtzYixJQUFJLEVBQUcrRCxFQUFRLEdBQUtyZixLQUFLc2IsSUFBSSxFQUFHMkQsR0FDakRoaUIsRUFBSSxJQUlEZ2lCLEdBQVEsRUFBR3paLEVBQU9xUSxFQUFTeGMsR0FBUyxJQUFKSSxFQUFVSixHQUFLTSxFQUFHRixHQUFLLElBQUt3bEIsR0FBUSxHQUkzRSxJQUZBaGlCLEVBQUtBLEdBQUtnaUIsRUFBUXhsQixFQUNsQjBsQixHQUFRRixFQUNERSxFQUFPLEVBQUczWixFQUFPcVEsRUFBU3hjLEdBQVMsSUFBSjRELEVBQVU1RCxHQUFLTSxFQUFHc0QsR0FBSyxJQUFLa2lCLEdBQVEsR0FFMUUzWixFQUFPcVEsRUFBU3hjLEVBQUlNLElBQVUsSUFBSnlCLEksY0NsRjVCLElBQUk4RSxFQUFXLEdBQUdBLFNBRWxCcEgsRUFBT0QsUUFBVXdGLE1BQU00RixTQUFXLFNBQVVrUixHQUMxQyxNQUE2QixrQkFBdEJqVixFQUFTMUcsS0FBSzJiLEssOEJDSHZCLFlBRUFwYixPQUFPQyxlQUFlbkIsRUFBUyxhQUFjLENBQzNDeUIsT0FBTyxJQUdULElBQUlzbEIsRUFBNEIsbUJBQVh4bEIsUUFBb0QsaUJBQXBCQSxPQUFPb0osU0FBd0IsU0FBVVYsR0FBTyxjQUFjQSxHQUFTLFNBQVVBLEdBQU8sT0FBT0EsR0FBeUIsbUJBQVgxSSxRQUF5QjBJLEVBQUlzRyxjQUFnQmhQLFFBQVUwSSxJQUFRMUksT0FBT2EsVUFBWSxnQkFBa0I2SCxHQUlsUXpHLEVBQThCLG9CQUFYcEQsYUFBcUQsSUFBcEJBLE9BQU8rVCxTQUczRDZTLEVBQThFLFlBQS9DLG9CQUFUM2QsS0FBdUIsWUFBYzBkLEVBQVExZCxRQUF1QkEsS0FBS2tILGFBQXlDLCtCQUExQmxILEtBQUtrSCxZQUFZeFAsS0FHL0hnQyxPQUE0QixJQUFaRSxHQUErQyxNQUFwQkEsRUFBUStDLFVBQTZDLE1BQXpCL0MsRUFBUStDLFNBQVN1TixLQUU1RnZULEVBQVF3RCxVQUFZQSxFQUNwQnhELEVBQVFnbkIsWUFBY0EsRUFDdEJobkIsRUFBUStDLE9BQVNBLEksOENDbkJqQjdCLE9BQU9DLGVBQWVuQixFQUFTLGFBQWMsQ0FBRXlCLE9BQU8sSUFDdER6QixFQUFRaVosNkJBQStCLENBQ25DZ08sT0FBUSxZQUNSQyxlQUFnQixDQUNaLENBQ0lDLFlBQWEsZUFDYkMsT0FBUSxDQUNKQyxjQUFlLE1BQ2Y1bEIsTUFBTyxhQUt2QnpCLEVBQVFxWiw2QkFBK0IsQ0FDbkMsQ0FDSWlPLEdBQUksVUFDSkMsS0FBTSx1REFDTjlsQixNQUFPLGtCLDZCQ2pCZlAsT0FBT0MsZUFBZW5CLEVBQVMsYUFBYyxDQUFFeUIsT0FBTyxJQUN0RCxNQUFNcVgsRUFBYyxFQUFRLElBQ3RCclIsRUFBVyxFQUFRLEdBZ0J6QnpILEVBQVF3bkIsWUFmUjdmLGVBQTJCb1IsRUFBT3hFLEVBQU16TSxHQUNwQyxNQUFNa1IsRUFBVXpFLEdBQVFyVCxPQUFPcU4sS0FBS2dHLEdBQU01UCxPQUFTLEVBQzdDNFAsRUFDQXVFLEVBQVkyTywrQ0FDWjdmLEVBQVUsQ0FDWkMsT0FBUSxPQUNSQyxRQUFTLENBQ0xFLGNBQWUsVUFBVStRLEVBQU1HLGVBQy9CLGVBQWdCLHNCQUNicFIsR0FFUEcsS0FBTWdHLEtBQUtrTCxVQUFVSCxJQUV6QixhQUFhN1EsTUFBTSxHQUFHVixFQUFTNUUsT0FBT3hCLElBQUksaUVBQWtFdUcsSUFlaEg1SCxFQUFROEIsT0FaUjZGLGVBQXNCb1IsRUFBTzJPLEVBQVU1ZixHQUNuQyxNQUFNRixFQUFVLENBQ1pDLE9BQVEsT0FDUkMsUUFBUyxDQUNMRSxjQUFlLFVBQVUrUSxFQUFNRyxlQUMvQixlQUFnQixzQkFDYnBSLEdBRVBHLEtBQU1nRyxLQUFLa0wsVUFBVSxDQUFFdU8sY0FFM0IsYUFBYXZmLE1BQU0sR0FBR1YsRUFBUzVFLE9BQU94QixJQUFJLDJEQUE0RHVHLEssNkJDN0IxRzFHLE9BQU9DLGVBQWVuQixFQUFTLGFBQWMsQ0FBRXlCLE9BQU8sSUFDdER6QixFQUFReW5CLCtDQUFpRCxDQUNyRE4sWUFBYSxvQkFDYlEsaUJBQWtCLENBQ2RDLE1BQU8sMEJBQ1BDLEtBQU0sV0FDTnBRLE1BQU8sS0FDUHFRLFlBQWEsUUFDYkMsYUFBYyxLQUNkQyxlQUFnQixZQUVwQkMsTUFBTyxDQUNIQyxlQUFnQixVQUVwQkMsS0FBTSxDQUNGNWEsS0FBTSw2QkFDTjZhLHFCQUFzQixDQUNsQkMsV0FBWSw2QkFDWkMsV0FBWSw2QkFDWkMsV0FBWSw2QkFDWkMsbUJBQW9CLFVBQ3BCQyx1QkFBdUIsRUFDdkJDLDRCQUE0QixLQUl4QzFvQixFQUFRMm9CLHNEQUF3RCxDQUM1RDFCLE9BQVEsT0FDUmdCLE1BQU8sQ0FDSEMsZUFBZ0IsU0FDaEJVLG9CQUFxQixDQUNqQixDQUNJQyxRQUFTLENBQ0xDLHFCQUFzQiwwQkFLdENDLGFBQWMsQ0FDVixDQUNJM0IsT0FBUSxDQUNKNEIsU0FBVSxNQUNWQyxNQUFPLFFBRVg5QixZQUFhLHVCQUNiK0IsT0FBUSx3QkFDUkMsY0FBZSx1QkFDZkMsZUFBZ0IsZ0JBQ2hCQyxVQUFXLENBQ1AzZSxNQUFPLENBQ0gsQ0FDSTRlLElBQUssYUFDTHZvQixLQUFNLFVBQ05vbUIsWUFBYSx3QkFDYm9DLFNBQVUsSUFDVkMsTUFBTyxPQUNQUixTQUFVLE1BQ1ZTLElBQUssSUFDTDNhLElBQUssNEJBTXpCNGEsY0FBZSxDQUNYckIsV0FBWSw2QkFDWkMsV0FBWSxnQyw2QkNsRXBCLElBQUk1ZixFQUFnQmpHLE1BQVFBLEtBQUtpRyxjQUFpQixTQUFVaEcsR0FDeEQsR0FBSUEsR0FBT0EsRUFBSWQsV0FBWSxPQUFPYyxFQUNsQyxJQUFJaUcsRUFBUyxHQUNiLEdBQVcsTUFBUGpHLEVBQWEsSUFBSyxJQUFJa0csS0FBS2xHLEVBQVN4QixPQUFPbUIsZUFBZTFCLEtBQUsrQixFQUFLa0csS0FBSUQsRUFBT0MsR0FBS2xHLEVBQUlrRyxJQUU1RixPQURBRCxFQUFnQixRQUFJakcsRUFDYmlHLEdBRVh6SCxPQUFPQyxlQUFlbkIsRUFBUyxhQUFjLENBQUV5QixPQUFPLElBQ3RELE1BQU1rb0IsRUFBS2poQixFQUFhLEVBQVEsS0FDaEMxSSxFQUFRMnBCLEdBQUtBLEVBQ2IsTUFBTUMsRUFBS2xoQixFQUFhLEVBQVEsS0FDaEMxSSxFQUFRNHBCLEdBQUtBLEcsNkJDWGIxb0IsT0FBT0MsZUFBZW5CLEVBQVMsYUFBYyxDQUFFeUIsT0FBTyxJQUN0RCxNQUFNZ0csRUFBVyxFQUFRLEdBQ25CcVIsRUFBYyxFQUFRLElBZ0I1QjlZLEVBQVE4QixPQWZSNkYsZUFBc0JvUixFQUFPeEUsRUFBTXpNLEdBQy9CLE1BQU1rUixFQUFVekUsR0FBUXJULE9BQU9xTixLQUFLZ0csR0FBTTVQLE9BQVMsRUFDN0M0UCxFQUNBdUUsRUFBWStRLCtCQUNaamlCLEVBQVUsQ0FDWkMsT0FBUSxPQUNSQyxRQUFTLENBQ0xFLGNBQWUsVUFBVStRLEVBQU1HLGVBQy9CLGVBQWdCLHNCQUNicFIsR0FFUEcsS0FBTWdHLEtBQUtrTCxVQUFVSCxJQUV6QixhQUFhN1EsTUFBTSxHQUFHVixFQUFTNUUsT0FBT3hCLElBQUksOENBQStDdUcsSUFrQjdGNUgsRUFBUXVaLFFBZlI1UixlQUF1Qm9SLEVBQU9wQyxFQUFJcEMsRUFBTXpNLEdBQ3BDLE1BQU1rUixFQUFVekUsR0FBUXJULE9BQU9xTixLQUFLZ0csR0FBTTVQLE9BQVMsRUFDN0M0UCxFQUNBdUUsRUFBWWdSLGdDQUNabGlCLEVBQVUsQ0FDWkMsT0FBUSxPQUNSQyxRQUFTLENBQ0xFLGNBQWUsVUFBVStRLEVBQU1HLGVBQy9CLGVBQWdCLHNCQUNicFIsR0FFUEcsS0FBTWdHLEtBQUtrTCxVQUFVSCxJQUV6QixhQUFhN1EsTUFBTSxHQUFHVixFQUFTNUUsT0FBT3hCLElBQUksc0RBQXNEc1YsWUFBYy9PLElBa0JsSDVILEVBQVFvWixPQWZSelIsZUFBc0JvUixFQUFPcEMsRUFBSXBDLEVBQU16TSxHQUNuQyxNQUFNa1IsRUFBVXpFLEdBQVFyVCxPQUFPcU4sS0FBS2dHLEdBQU01UCxPQUFTLEVBQzdDNFAsRUFDQXVFLEVBQVlpUiwrQkFDWm5pQixFQUFVLENBQ1pDLE9BQVEsUUFDUkMsUUFBUyxDQUNMRSxjQUFlLFVBQVUrUSxFQUFNRyxlQUMvQixlQUFnQixzQkFDYnBSLEdBRVBHLEtBQU1nRyxLQUFLa0wsVUFBVUgsSUFFekIsYUFBYTdRLE1BQU0sR0FBR1YsRUFBUzVFLE9BQU94QixJQUFJLCtDQUErQ3NWLElBQU0vTyxJQW1Cbkc1SCxFQUFRZ3FCLHFCQWhCUnJpQixlQUFvQ29SLEVBQU9rUixFQUFvQjFWLEVBQU16TSxHQUNqRSxNQUFNa1IsRUFBVXpFLEdBQVFyVCxPQUFPcU4sS0FBS2dHLEdBQU01UCxPQUFTLEVBQzdDNFAsRUFDQXVFLEVBQVlvUixzQ0FDbEJsUixFQUFRaVAsTUFBTVcsb0JBQW9CLEdBQUdDLFFBQVFDLHFCQUF1Qm1CLEVBQ3BFLE1BQU1yaUIsRUFBVSxDQUNaQyxPQUFRLE9BQ1JDLFFBQVMsQ0FDTEUsY0FBZSxVQUFVK1EsRUFBTUcsZUFDL0IsZUFBZ0Isc0JBQ2JwUixHQUVQRyxLQUFNZ0csS0FBS2tMLFVBQVVILElBRXpCLGFBQWE3USxNQUFNLEdBQUdWLEVBQVM1RSxPQUFPeEIsSUFBSSw4Q0FBK0N1RyxLLDZCQ2pFN0YxRyxPQUFPQyxlQUFlbkIsRUFBUyxhQUFjLENBQUV5QixPQUFPLElBQ3REekIsRUFBUTZwQiwrQkFBaUMsQ0FDckM1QyxPQUFRLE9BQ1JnQixNQUFPLENBQ0hDLGVBQWdCLFVBRXBCYSxhQUFjLENBQ1YsQ0FDSTNCLE9BQVEsQ0FDSjZCLE1BQU8sUUFDUEQsU0FBVSxNQUNWbUIsUUFBUyxDQUNMQyxTQUFVLFFBQ1ZYLElBQUssT0FDTFksU0FBVSxPQUNWQyxhQUFjLE9BQ2RDLGtCQUFtQixRQUNuQkMsVUFBVyxTQUduQnJELFlBQWEsdUNBQ2IrQixPQUFRLDBCQUNSRSxlQUFnQixjQUNoQnFCLGdCQUFpQixDQUNiQyx1QkFBd0IsMEJBRTVCQyxnQkFBaUIsY0FDakJ0QixVQUFXLENBQ1AzZSxNQUFPLENBQ0gsQ0FDSTNKLEtBQU0sTUFDTm9tQixZQUFhLGFBQ2JvQyxTQUFVLElBQ1ZDLE1BQU8sSUFDUEMsSUFBSyxPQUNMSCxJQUFLLElBQ0xOLFNBQVUsT0FFZCxDQUNJam9CLEtBQU0sVUFDTm9tQixZQUFhLGlCQUNib0MsU0FBVSxJQUNWQyxNQUFPLEtBQ1BDLElBQUssT0FDTEgsSUFBSyxZQUNMTixTQUFVLFFBR2xCckIsaUJBQWtCLENBQ2RLLGVBQWdCLGlCQUNoQkosTUFBTyxZQUNQZ0QsTUFBTyxXQUNQL0MsS0FBTSxXQUNORSxhQUFjLEtBQ2RELFlBQWEsUUFDYitDLE1BQU8sa0JBQ1BwVCxNQUFPLFNBS3ZCcVQsY0FBZSw4Q0FDZnBCLGNBQWUsQ0FDWHJCLFdBQVksNkJBQ1pDLFdBQVksK0JBR3BCdG9CLEVBQVE4cEIsZ0NBQWtDLENBQ3RDMUMsT0FBUSxDQUNKM2xCLE1BQU8sT0FDUDRsQixjQUFlLE9BRW5CMEQsZUFBZSxHQUVuQi9xQixFQUFRK3BCLCtCQUFpQyxDQUNyQyxDQUNJekMsR0FBSSxVQUNKQyxLQUFNLHlCQUNOOWxCLE1BQU8sQ0FDSHduQixNQUFPLFFBQ1BELFNBQVUsTUFDVm1CLFFBQVMsQ0FDTEMsU0FBVSxRQUNWWCxJQUFLLE9BQ0xZLFNBQVUsT0FDVkMsYUFBYyxPQUNkQyxrQkFBbUIsUUFDbkJDLFVBQVcsVUFJdkIsQ0FDSWxELEdBQUksTUFDSkMsS0FBTSw2Q0FDTjlsQixNQUFPLENBQ0h1bUIsZUFBZ0IsaUJBQ2hCSixNQUFPLGNBQ1BDLEtBQU0sZ0JBQ05DLFlBQWEsUUFDYkMsYUFBYyxLQUNkdFEsTUFBTyxRQUluQnpYLEVBQVFrcUIsc0NBQXdDLENBQzVDakQsT0FBUSxPQUNSZ0IsTUFBTyxDQUNIQyxlQUFnQixTQUNoQlUsb0JBQXFCLENBQ2pCLENBQ0lDLFFBQVMsQ0FDTEMscUJBQXNCLDBCQUt0Q0MsYUFBYyxDQUNWLENBQ0kzQixPQUFRLENBQ0o0QixTQUFVLE1BQ1ZDLE1BQU8sWSw2QkN4SHZCL25CLE9BQU9DLGVBQWVuQixFQUFTLGFBQWMsQ0FBRXlCLE9BQU8sSUFDdEQsTUFBTWdHLEVBQVcsRUFBUSxHQWN6QnpILEVBQVF1WixRQWJSNVIsZUFBdUJvUixFQUFPcEMsRUFBSXBDLEVBQU16TSxHQUNwQyxNQUFNa1IsRUFBVXpFLEdBQVEsR0FDbEIzTSxFQUFVLENBQ1pDLE9BQVEsT0FDUkMsUUFBUyxDQUNMRSxjQUFlLFVBQVUrUSxFQUFNRyxlQUMvQixlQUFnQixzQkFDYnBSLEdBRVBHLEtBQU1nRyxLQUFLa0wsVUFBVUgsSUFFekIsYUFBYTdRLE1BQU0sR0FBR1YsRUFBUzVFLE9BQU94QixJQUFJLHNEQUFzRHNWLFlBQWMvTyxJQWdCbEg1SCxFQUFRZ3JCLE9BYlJyakIsZUFBc0JvUixFQUFPcEMsRUFBSXBDLEVBQU16TSxHQUNuQyxNQUFNa1IsRUFBVXpFLEdBQVEsR0FDbEIzTSxFQUFVLENBQ1pDLE9BQVEsT0FDUkMsUUFBUyxDQUNMRSxjQUFlLFVBQVUrUSxFQUFNRyxlQUMvQixlQUFnQixzQkFDYnBSLEdBRVBHLEtBQU1nRyxLQUFLa0wsVUFBVUgsSUFFekIsYUFBYTdRLE1BQU0sR0FBR1YsRUFBUzVFLE9BQU94QixJQUFJLGdEQUFnRHNWLFdBQWEvTyxJQWMzRzVILEVBQVFpckIsT0FYUnRqQixlQUFzQm9SLEVBQU9wQyxFQUFJN08sR0FDN0IsTUFBTUYsRUFBVSxDQUNaQyxPQUFRLE9BQ1JDLFFBQVMsQ0FDTEUsY0FBZSxVQUFVK1EsRUFBTUcsZUFDL0IsZUFBZ0Isc0JBQ2JwUixJQUdYLGFBQWFLLE1BQU0sR0FBR1YsRUFBUzVFLE9BQU94QixJQUFJLHNEQUFzRHNWLFNBQVcvTyxLLDZCQ3ZDL0cxRyxPQUFPQyxlQUFlbkIsRUFBUyxhQUFjLENBQUV5QixPQUFPLElBQ3RELE1BQU1nRyxFQUFXLEVBQVEsR0FXekJ6SCxFQUFRZ2dCLEtBVlJyWSxlQUFvQm9SLEdBQ2hCLE1BQU1uUixFQUFVLENBQ1pDLE9BQVEsTUFDUkMsUUFBUyxDQUNMRSxjQUFlLFVBQVUrUSxFQUFNRyxlQUMvQixlQUFnQixxQkFHeEIsYUFBYS9RLE1BQU0sR0FBR1YsRUFBUzVFLE9BQU94QixJQUFJLG9EQUFxRHVHLElBYW5HNUgsRUFBUWtyQixlQVZSdmpCLGVBQThCb1IsR0FDMUIsTUFBTW5SLEVBQVUsQ0FDWkMsT0FBUSxNQUNSQyxRQUFTLENBQ0xFLGNBQWUsVUFBVStRLEVBQU1HLGVBQy9CLGVBQWdCLHFCQUd4QixhQUFhL1EsTUFBTSxHQUFHVixFQUFTNUUsT0FBT3hCLElBQUksZ0VBQWlFdUcsSUFjL0c1SCxFQUFROEIsT0FYUjZGLGVBQXNCb1IsRUFBT2pLLEVBQUtxYyxHQUM5QixNQUFNdmpCLEVBQVUsQ0FDWkMsT0FBUSxPQUNSQyxRQUFTLENBQ0xFLGNBQWUsVUFBVStRLEVBQU1HLGVBQy9CLGVBQWdCLG9CQUVwQmpSLEtBQU1nRyxLQUFLa0wsVUFBVSxDQUFFckssTUFBS3FjLGlCQUVoQyxhQUFhaGpCLE1BQU0sR0FBR1YsRUFBUzVFLE9BQU94QixJQUFJLG9EQUFxRHVHLElBYW5HNUgsRUFBUW9yQixPQVZSempCLGVBQXNCb1IsRUFBT3BDLEdBQ3pCLE1BQU0vTyxFQUFVLENBQ1pDLE9BQVEsU0FDUkMsUUFBUyxDQUNMRSxjQUFlLFVBQVUrUSxFQUFNRyxlQUMvQixlQUFnQixxQkFHeEIsYUFBYS9RLE1BQU0sR0FBR1YsRUFBUzVFLE9BQU94QixJQUFJLHFEQUFxRHNWLElBQU0vTyxJQXVCekc1SCxFQUFRcXJCLE9BcEJSMWpCLGVBQXNCb1IsRUFBT3VTLEVBQVl4akIsRUFBU3lqQixHQUM5QyxNQUFNdlMsRUFBVSxDQUNad1MsZ0JBQWlCMWpCLEVBQVEsMEJBQ3pCMmpCLGtCQUFtQjNqQixFQUFRLDRCQUMzQjRqQixTQUFVNWpCLEVBQVEsbUJBQ2xCNmpCLFVBQVc3akIsRUFBUSxvQkFDbkI4akIsaUJBQWtCOWpCLEVBQVEsMkJBQzFCd2pCLGFBQ0FDLGlCQUVFM2pCLEVBQVUsQ0FDWkMsT0FBUSxPQUNSQyxRQUFTLENBQ0xFLGNBQWUsVUFBVStRLEVBQU1HLGVBQy9CLGVBQWdCLG9CQUVwQmpSLEtBQU1nRyxLQUFLa0wsVUFBVUgsSUFFekIsYUFBYTdRLE1BQU0sR0FBR1YsRUFBUzVFLE9BQU94QixJQUFJLG9FQUFxRXVHLEssNkJDakVuSDFHLE9BQU9DLGVBQWVuQixFQUFTLGFBQWMsQ0FBRXlCLE9BQU8sSUFDdEQsTUFBTW9xQixFQUFVLEVBQVEsR0FDeEIsSUFBSUMsRUFRSjlyQixFQUFRK3JCLHNCQVBScGtCLGVBQXFDcWtCLEVBQUs5akIsRUFBSzBDLEdBSzNDLFFBSktraEIsR0FBZUEsRUFBWXhqQixXQUFhQyxLQUFLQyxTQUM5Q3NqQixRQUFvQkQsRUFBUW5rQixxQkFFaENza0IsRUFBSUMsa0JBQW9CSCxFQUNqQmxoQixNLDZCQ1JYLElBQUlsQyxFQUFnQmpHLE1BQVFBLEtBQUtpRyxjQUFpQixTQUFVaEcsR0FDeEQsR0FBSUEsR0FBT0EsRUFBSWQsV0FBWSxPQUFPYyxFQUNsQyxJQUFJaUcsRUFBUyxHQUNiLEdBQVcsTUFBUGpHLEVBQWEsSUFBSyxJQUFJa0csS0FBS2xHLEVBQVN4QixPQUFPbUIsZUFBZTFCLEtBQUsrQixFQUFLa0csS0FBSUQsRUFBT0MsR0FBS2xHLEVBQUlrRyxJQUU1RixPQURBRCxFQUFnQixRQUFJakcsRUFDYmlHLEdBRVh6SCxPQUFPQyxlQUFlbkIsRUFBUyxhQUFjLENBQUV5QixPQUFPLElBQ3RELE1BQU1rb0IsRUFBS2poQixFQUFhLEVBQVEsS0FDaEMxSSxFQUFRMnBCLEdBQUtBLEVBQ2IsTUFBTUMsRUFBS2xoQixFQUFhLEVBQVEsS0FDaEMxSSxFQUFRNHBCLEdBQUtBLEcsNkJDWGIxb0IsT0FBT0MsZUFBZW5CLEVBQVMsYUFBYyxDQUFFeUIsT0FBTyxJQUN0RCxNQUFNZ0csRUFBVyxFQUFRLEdBV3pCekgsRUFBUWtzQixVQVZSdmtCLGVBQXlCb1IsRUFBT3BDLEVBQUk3TyxHQUNoQyxNQUFNRixFQUFVLENBQ1pDLE9BQVEsTUFDUkMsUUFBUyxDQUNMRSxjQUFlLFVBQVUrUSxFQUFNRyxrQkFDNUJwUixJQUdYLGFBQWFLLE1BQU0sR0FBR1YsRUFBUzVFLE9BQU94QixJQUFJLGdEQUFnRG9HLEVBQVM1RSxPQUFPeEIsSUFBSSwwREFBMERzVixJQUFNL08sSyw2QkNWbEwsSUFBSWMsRUFBZ0JqRyxNQUFRQSxLQUFLaUcsY0FBaUIsU0FBVWhHLEdBQ3hELEdBQUlBLEdBQU9BLEVBQUlkLFdBQVksT0FBT2MsRUFDbEMsSUFBSWlHLEVBQVMsR0FDYixHQUFXLE1BQVBqRyxFQUFhLElBQUssSUFBSWtHLEtBQUtsRyxFQUFTeEIsT0FBT21CLGVBQWUxQixLQUFLK0IsRUFBS2tHLEtBQUlELEVBQU9DLEdBQUtsRyxFQUFJa0csSUFFNUYsT0FEQUQsRUFBZ0IsUUFBSWpHLEVBQ2JpRyxHQUVYekgsT0FBT0MsZUFBZW5CLEVBQVMsYUFBYyxDQUFFeUIsT0FBTyxJQUN0RCxNQUFNMHFCLEVBQVd6akIsRUFBYSxFQUFRLEtBQ3RDMUksRUFBUW1zQixTQUFXQSxHLDZCQ1RuQmpyQixPQUFPQyxlQUFlbkIsRUFBUyxhQUFjLENBQUV5QixPQUFPLElBQ3RELE1BQU1nRyxFQUFXLEVBQVEsR0FDbkJxUixFQUFjLEVBQVEsSUFDdEJzVCxFQUFTLEVBQVEsR0FpQnZCcHNCLEVBQVE4QixPQWhCUjZGLGVBQXNCb1IsRUFBT3NULEVBQVk5WCxFQUFNek0sR0FDM0MsTUFBTWtSLEVBQVV6RSxHQUFRclQsT0FBT3FOLEtBQUtnRyxHQUFNNVAsT0FBUyxFQUM3QzRQLEVBQ0F1RSxFQUFZd1QsZ0NBQ2xCdFQsRUFBUXVULFlBQWNGLEdBQTBCRCxFQUFPbGxCLGVBQ3ZELE1BQU1VLEVBQVUsQ0FDWkMsT0FBUSxPQUNSQyxRQUFTLENBQ0xFLGNBQWUsVUFBVStRLEVBQU1HLGVBQy9CLGVBQWdCLHNCQUNicFIsR0FFUEcsS0FBTWdHLEtBQUtrTCxVQUFVSCxJQUV6QixhQUFhN1EsTUFBTSxHQUFHVixFQUFTNUUsT0FBT3hCLElBQUksd0RBQXlEdUcsSyw2QkNsQnZHMUcsT0FBT0MsZUFBZW5CLEVBQVMsYUFBYyxDQUFFeUIsT0FBTyxJQUN0RCxNQUFNK3FCLEVBQWUsRUFBUSxJQUM3QnhzQixFQUFRc3NCLGdDQUFrQyxDQUN0Q0csV0FBWSxDQUNSLENBQ0lDLFVBQVcsa0JBQ1hDLDJCQUE0QixDQUN4QkMscUJBQXNCLENBQ2xCQyxtQkFBb0IsU0FDcEJDLGlCQUFrQixjQUNsQkMsb0JBQXFCLENBQ2pCQyxTQUFVLENBQUMsVUFBVyxlQU0xQ0MsU0FBVSxDQUFDVCxFQUFhVSxZQUFZQyxrQkFDcENDLGVBQWdCLENBQ1osQ0FDSTdmLEtBQU0scUJBQ044ZixTQUFTLE0sNkJDckJyQm5zQixPQUFPQyxlQUFlbkIsRUFBUyxhQUFjLENBQUV5QixPQUFPLElBRXRELFNBQVd5ckIsR0FDUEEsRUFBOEIsaUJBQUksbUJBQ2xDQSxFQUFvQixPQUFJLFNBQ3hCQSxFQUFpQyxvQkFBSSxzQkFDckNBLEVBQWtCLEtBQUksT0FKMUIsQ0FLaUJsdEIsRUFBUWt0QixjQUFnQmx0QixFQUFRa3RCLFlBQWMiLCJmaWxlIjoicGF5cGFsLWlzb21vcnBoaWMtZnVuY3Rpb25zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wicGF5cGFsRnVuY3Rpb25zXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInBheXBhbEZ1bmN0aW9uc1wiXSA9IGZhY3RvcnkoKTtcbn0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDUpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBidG9hXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJ0b2FcIikpO1xuY29uc3QgYnJvd3Nlcl9vcl9ub2RlXzEgPSByZXF1aXJlKFwiYnJvd3Nlci1vci1ub2RlXCIpO1xuZXhwb3J0cy5DT05GSUcgPSBuZXcgTWFwKCk7XG5pZiAoYnJvd3Nlcl9vcl9ub2RlXzEuaXNOb2RlKSB7XG4gICAgZXhwb3J0cy5DT05GSUcuc2V0KFwiUEFZUEFMX0NMSUVOVF9JRFwiLCBwcm9jZXNzLmVudi5QQVlQQUxfQ0xJRU5UX0lEKTtcbiAgICBleHBvcnRzLkNPTkZJRy5zZXQoXCJQQVlQQUxfQ0xJRU5UX1NFQ1JFVFwiLCBwcm9jZXNzLmVudi5QQVlQQUxfQ0xJRU5UX1NFQ1JFVCk7XG4gICAgZXhwb3J0cy5DT05GSUcuc2V0KFwiUEFZUEFMX0VOVklST05NRU5UXCIsIHByb2Nlc3MuZW52LlBBWVBBTF9FTlZJUk9OTUVOVCk7XG4gICAgZXhwb3J0cy5DT05GSUcuc2V0KFwiUEFZUEFMX0FDQ09VTlRfSURcIiwgcHJvY2Vzcy5lbnYuUEFZUEFMX0FDQ09VTlRfSUQpO1xuICAgIGV4cG9ydHMuQ09ORklHLnNldChcIlBBWVBBTF9SRVNUX0JFQVJFUlwiLCBidG9hXzEuZGVmYXVsdChgJHtwcm9jZXNzLmVudi5QQVlQQUxfQ0xJRU5UX0lEfToke3Byb2Nlc3MuZW52LlBBWVBBTF9DTElFTlRfU0VDUkVUfWApKTtcbn1cbmVsc2UgaWYgKGJyb3dzZXJfb3Jfbm9kZV8xLmlzQnJvd3Nlcikge1xuICAgIGV4cG9ydHMuQ09ORklHLnNldChcIlBBWVBBTF9DTElFTlRfSURcIiwgd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiUEFZUEFMX0NMSUVOVF9JRFwiKSk7XG4gICAgZXhwb3J0cy5DT05GSUcuc2V0KFwiUEFZUEFMX0NMSUVOVF9TRUNSRVRcIiwgd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiUEFZUEFMX0NMSUVOVF9TRUNSRVRcIikpO1xuICAgIGV4cG9ydHMuQ09ORklHLnNldChcIlBBWVBBTF9FTlZJUk9OTUVOVFwiLCB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJQQVlQQUxfRU5WSVJPTk1FTlRcIikpO1xuICAgIGV4cG9ydHMuQ09ORklHLnNldChcIlBBWVBBTF9BQ0NPVU5UX0lEXCIsIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIlBBWVBBTF9BQ0NPVU5UX0lEXCIpKTtcbiAgICBleHBvcnRzLkNPTkZJRy5zZXQoXCJQQVlQQUxfUkVTVF9CRUFSRVJcIiwgd2luZG93LmJ0b2EoYCR7d2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiUEFZUEFMX0NMSUVOVF9JRFwiKX06JHt3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJQQVlQQUxfQ0xJRU5UX1NFQ1JFVFwiKX1gKSk7XG59XG5leHBvcnRzLkNPTkZJRy5zZXQoXCJQQVlQQUxfUkVTVF9IT1NUTkFNRVwiLCBleHBvcnRzLkNPTkZJRy5nZXQoXCJQQVlQQUxfRU5WSVJPTk1FTlRcIikgPT09IFwicHJvZHVjdGlvblwiXG4gICAgPyBcImh0dHBzOi8vYXBpLnBheXBhbC5jb21cIlxuICAgIDogXCJodHRwczovL2FwaS5zYW5kYm94LnBheXBhbC5jb21cIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICAgIHJldHVybiAoTWF0aC5yYW5kb20oKSAqIDFlMTgpLnRvU3RyaW5nKDM2KTtcbn1cbmV4cG9ydHMucmFuZG9tU3RyaW5nID0gcmFuZG9tU3RyaW5nO1xuZnVuY3Rpb24gcmFuZG9tQW1vdW50KCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDApICsgMTtcbn1cbmV4cG9ydHMucmFuZG9tQW1vdW50ID0gcmFuZG9tQW1vdW50O1xuZnVuY3Rpb24gcmFuZG9tQW1vdW50YXNTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGAke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCkgKyAxfS4wMGA7XG59XG5leHBvcnRzLnJhbmRvbUFtb3VudGFzU3RyaW5nID0gcmFuZG9tQW1vdW50YXNTdHJpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29uZmlnXzEgPSByZXF1aXJlKFwiLi4vY29uZmlnXCIpO1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlQWNjZXNzVG9rZW4oKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIFwiQWNjZXB0LUxhbmd1YWdlXCI6IFwiZW5fVVNcIixcbiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCYXNpYyAke2NvbmZpZ18xLkNPTkZJRy5nZXQoXCJQQVlQQUxfUkVTVF9CRUFSRVJcIil9YCxcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogXCJncmFudF90eXBlPWNsaWVudF9jcmVkZW50aWFscyZyZXNwb25zZV90eXBlPXRva2VuXCJcbiAgICB9O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke2NvbmZpZ18xLkNPTkZJRy5nZXQoXCJQQVlQQUxfUkVTVF9IT1NUTkFNRVwiKX0vdjEvb2F1dGgyL3Rva2VuYCwgb3B0aW9ucyk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJlc3BvbnNlLmV4cGlyZXNfYXQgPSBEYXRlLm5vdygpICsgcmVzcG9uc2UuZXhwaXJlc19pbjtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5leHBvcnRzLmNyZWF0ZUFjY2Vzc1Rva2VuID0gY3JlYXRlQWNjZXNzVG9rZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XG4gICAgcmVzdWx0W1wiZGVmYXVsdFwiXSA9IG1vZDtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnJlcXVpcmUoXCIuL3BvbHlmaWxsc1wiKTtcbnJlcXVpcmUoXCIuL2ludGVyZmFjZXNcIik7XG5jb25zdCBVdGlscyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsXCIpKTtcbmV4cG9ydHMuVXRpbHMgPSBVdGlscztcbmNvbnN0IE9yZGVycyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9vcmRlcnNcIikpO1xuZXhwb3J0cy5PcmRlcnMgPSBPcmRlcnM7XG5jb25zdCBCaWxsaW5nQWdyZWVtZW50cyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9iaWxsaW5nLWFncmVlbWVudHNcIikpO1xuZXhwb3J0cy5CaWxsaW5nQWdyZWVtZW50cyA9IEJpbGxpbmdBZ3JlZW1lbnRzO1xuY29uc3QgT2F1dGggPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vb2F1dGhcIikpO1xuZXhwb3J0cy5PYXV0aCA9IE9hdXRoO1xuY29uc3QgUGF5bWVudHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vcGF5bWVudHNcIikpO1xuZXhwb3J0cy5QYXltZW50cyA9IFBheW1lbnRzO1xuY29uc3QgV2ViaG9va3MgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vd2ViaG9va3NcIikpO1xuZXhwb3J0cy5XZWJob29rcyA9IFdlYmhvb2tzO1xuY29uc3QgTWlkZGxld2FyZSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9taWRkbGV3YXJlXCIpKTtcbmV4cG9ydHMuTWlkZGxld2FyZSA9IE1pZGRsZXdhcmU7XG5jb25zdCBQYXJ0bmVyID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3BhcnRuZXJcIikpO1xuZXhwb3J0cy5QYXJ0bmVyID0gUGFydG5lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xucmVxdWlyZShcImlzb21vcnBoaWMtZmV0Y2hcIik7XG5yZXF1aXJlKFwiZXM2LXByb21pc2UvYXV0b1wiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvbHlmaWxscy5qcy5tYXAiLCIvLyB0aGUgd2hhdHdnLWZldGNoIHBvbHlmaWxsIGluc3RhbGxzIHRoZSBmZXRjaCgpIGZ1bmN0aW9uXG4vLyBvbiB0aGUgZ2xvYmFsIG9iamVjdCAod2luZG93IG9yIHNlbGYpXG4vL1xuLy8gUmV0dXJuIHRoYXQgYXMgdGhlIGV4cG9ydCBmb3IgdXNlIGluIFdlYnBhY2ssIEJyb3dzZXJpZnkgZXRjLlxucmVxdWlyZSgnd2hhdHdnLWZldGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHNlbGYuZmV0Y2guYmluZChzZWxmKTtcbiIsInZhciBzdXBwb3J0ID0ge1xuICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIHNlbGYsXG4gIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICBibG9iOlxuICAgICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmXG4gICAgJ0Jsb2InIGluIHNlbGYgJiZcbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGZcbn1cblxuZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG59XG5cbmlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICBdXG5cbiAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gIH1cbiAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgfVxuICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG5mdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG4gICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvclxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpdGVyYXRvclxufVxuXG5leHBvcnQgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gIHRoaXMubWFwID0ge31cblxuICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICB9LCB0aGlzKVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSArICcsICcgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbkhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgaWYgKHRoaXMubWFwLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgIH1cbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2gobmFtZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaXRlbXMucHVzaCh2YWx1ZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5pZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllc1xufVxuXG5mdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gIGlmIChib2R5LmJvZHlVc2VkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICB9XG4gIGJvZHkuYm9keVVzZWQgPSB0cnVlXG59XG5cbmZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICB9XG4gICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEFycmF5QnVmZmVyQXNUZXh0KGJ1Zikge1xuICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICB9XG4gIHJldHVybiBjaGFycy5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgaWYgKGJ1Zi5zbGljZSkge1xuICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zi5ieXRlTGVuZ3RoKVxuICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gIH1cbn1cblxuZnVuY3Rpb24gQm9keSgpIHtcbiAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cbiAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keS5idWZmZXIpXG4gICAgICAvLyBJRSAxMC0xMSBjYW4ndCBoYW5kbGUgYSBEYXRhVmlldyBib2R5LlxuICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5ID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGJvZHkpXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBjb25zdW1lZCh0aGlzKSB8fCBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbnZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICByZXR1cm4gbWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEgPyB1cGNhc2VkIDogbWV0aG9kXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG5cbiAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICB9XG4gICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2RcbiAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgdGhpcy5zaWduYWwgPSBpbnB1dC5zaWduYWxcbiAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLnVybCA9IFN0cmluZyhpbnB1dClcbiAgfVxuXG4gIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ3NhbWUtb3JpZ2luJ1xuICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIH1cbiAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbFxuICB0aGlzLnNpZ25hbCA9IG9wdGlvbnMuc2lnbmFsIHx8IHRoaXMuc2lnbmFsXG4gIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgfVxuICB0aGlzLl9pbml0Qm9keShib2R5KVxufVxuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywge2JvZHk6IHRoaXMuX2JvZHlJbml0fSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICBib2R5XG4gICAgLnRyaW0oKVxuICAgIC5zcGxpdCgnJicpXG4gICAgLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gIHJldHVybiBmb3JtXG59XG5cbmZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuICAvLyBSZXBsYWNlIGluc3RhbmNlcyBvZiBcXHJcXG4gYW5kIFxcbiBmb2xsb3dlZCBieSBhdCBsZWFzdCBvbmUgc3BhY2Ugb3IgaG9yaXpvbnRhbCB0YWIgd2l0aCBhIHNwYWNlXG4gIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMwI3NlY3Rpb24tMy4yXG4gIHZhciBwcmVQcm9jZXNzZWRIZWFkZXJzID0gcmF3SGVhZGVycy5yZXBsYWNlKC9cXHI/XFxuW1xcdCBdKy9nLCAnICcpXG4gIHByZVByb2Nlc3NlZEhlYWRlcnMuc3BsaXQoL1xccj9cXG4vKS5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICBpZiAoa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIGhlYWRlcnNcbn1cblxuQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG5leHBvcnQgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXNcbiAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICB0aGlzLnN0YXR1c1RleHQgPSAnc3RhdHVzVGV4dCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzVGV4dCA6ICdPSydcbiAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxufVxuXG5Cb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG5SZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgdXJsOiB0aGlzLnVybFxuICB9KVxufVxuXG5SZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICByZXR1cm4gcmVzcG9uc2Vcbn1cblxudmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cblJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxufVxuXG5leHBvcnQgdmFyIERPTUV4Y2VwdGlvbiA9IHNlbGYuRE9NRXhjZXB0aW9uXG50cnkge1xuICBuZXcgRE9NRXhjZXB0aW9uKClcbn0gY2F0Y2ggKGVycikge1xuICBET01FeGNlcHRpb24gPSBmdW5jdGlvbihtZXNzYWdlLCBuYW1lKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZVxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKVxuICAgIHRoaXMuc3RhY2sgPSBlcnJvci5zdGFja1xuICB9XG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSlcbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERPTUV4Y2VwdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2goaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwgJiYgcmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgIGZ1bmN0aW9uIGFib3J0WGhyKCkge1xuICAgICAgeGhyLmFib3J0KClcbiAgICB9XG5cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMudXJsID0gJ3Jlc3BvbnNlVVJMJyBpbiB4aHIgPyB4aHIucmVzcG9uc2VVUkwgOiBvcHRpb25zLmhlYWRlcnMuZ2V0KCdYLVJlcXVlc3QtVVJMJylcbiAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICB9XG5cbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICB9XG5cbiAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgIH1cblxuICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgfVxuXG4gICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKVxuXG4gICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICB9IGVsc2UgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdvbWl0Jykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICB9XG5cbiAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgfSlcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcblxuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBET05FIChzdWNjZXNzIG9yIGZhaWx1cmUpXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICB9KVxufVxuXG5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcblxuaWYgKCFzZWxmLmZldGNoKSB7XG4gIHNlbGYuZmV0Y2ggPSBmZXRjaFxuICBzZWxmLkhlYWRlcnMgPSBIZWFkZXJzXG4gIHNlbGYuUmVxdWVzdCA9IFJlcXVlc3RcbiAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlXG59XG4iLCIvLyBUaGlzIGZpbGUgY2FuIGJlIHJlcXVpcmVkIGluIEJyb3dzZXJpZnkgYW5kIE5vZGUuanMgZm9yIGF1dG9tYXRpYyBwb2x5ZmlsbFxuLy8gVG8gdXNlIGl0OiAgcmVxdWlyZSgnZXM2LXByb21pc2UvYXV0bycpO1xuJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLycpLnBvbHlmaWxsKCk7XG4iLCIvKiFcbiAqIEBvdmVydmlldyBlczYtcHJvbWlzZSAtIGEgdGlueSBpbXBsZW1lbnRhdGlvbiBvZiBQcm9taXNlcy9BKy5cbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE0IFllaHVkYSBLYXR6LCBUb20gRGFsZSwgU3RlZmFuIFBlbm5lciBhbmQgY29udHJpYnV0b3JzIChDb252ZXJzaW9uIHRvIEVTNiBBUEkgYnkgSmFrZSBBcmNoaWJhbGQpXG4gKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlXG4gKiAgICAgICAgICAgIFNlZSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc3RlZmFucGVubmVyL2VzNi1wcm9taXNlL21hc3Rlci9MSUNFTlNFXG4gKiBAdmVyc2lvbiAgIHY0LjIuOCsxZTY4ZGNlNlxuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5FUzZQcm9taXNlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvYmplY3RPckZ1bmN0aW9uKHgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgeDtcbiAgcmV0dXJuIHggIT09IG51bGwgJiYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpO1xufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuXG5cblxudmFyIF9pc0FycmF5ID0gdm9pZCAwO1xuaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xufSBlbHNlIHtcbiAgX2lzQXJyYXkgPSBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG59XG5cbnZhciBpc0FycmF5ID0gX2lzQXJyYXk7XG5cbnZhciBsZW4gPSAwO1xudmFyIHZlcnR4TmV4dCA9IHZvaWQgMDtcbnZhciBjdXN0b21TY2hlZHVsZXJGbiA9IHZvaWQgMDtcblxudmFyIGFzYXAgPSBmdW5jdGlvbiBhc2FwKGNhbGxiYWNrLCBhcmcpIHtcbiAgcXVldWVbbGVuXSA9IGNhbGxiYWNrO1xuICBxdWV1ZVtsZW4gKyAxXSA9IGFyZztcbiAgbGVuICs9IDI7XG4gIGlmIChsZW4gPT09IDIpIHtcbiAgICAvLyBJZiBsZW4gaXMgMiwgdGhhdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gc2NoZWR1bGUgYW4gYXN5bmMgZmx1c2guXG4gICAgLy8gSWYgYWRkaXRpb25hbCBjYWxsYmFja3MgYXJlIHF1ZXVlZCBiZWZvcmUgdGhlIHF1ZXVlIGlzIGZsdXNoZWQsIHRoZXlcbiAgICAvLyB3aWxsIGJlIHByb2Nlc3NlZCBieSB0aGlzIGZsdXNoIHRoYXQgd2UgYXJlIHNjaGVkdWxpbmcuXG4gICAgaWYgKGN1c3RvbVNjaGVkdWxlckZuKSB7XG4gICAgICBjdXN0b21TY2hlZHVsZXJGbihmbHVzaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjaGVkdWxlRmx1c2goKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNjaGVkdWxlcihzY2hlZHVsZUZuKSB7XG4gIGN1c3RvbVNjaGVkdWxlckZuID0gc2NoZWR1bGVGbjtcbn1cblxuZnVuY3Rpb24gc2V0QXNhcChhc2FwRm4pIHtcbiAgYXNhcCA9IGFzYXBGbjtcbn1cblxudmFyIGJyb3dzZXJXaW5kb3cgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcbnZhciBicm93c2VyR2xvYmFsID0gYnJvd3NlcldpbmRvdyB8fCB7fTtcbnZhciBCcm93c2VyTXV0YXRpb25PYnNlcnZlciA9IGJyb3dzZXJHbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBicm93c2VyR2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgaXNOb2RlID0gdHlwZW9mIHNlbGYgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiB7fS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG5cbi8vIHRlc3QgZm9yIHdlYiB3b3JrZXIgYnV0IG5vdCBpbiBJRTEwXG52YXIgaXNXb3JrZXIgPSB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpbXBvcnRTY3JpcHRzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnO1xuXG4vLyBub2RlXG5mdW5jdGlvbiB1c2VOZXh0VGljaygpIHtcbiAgLy8gbm9kZSB2ZXJzaW9uIDAuMTAueCBkaXNwbGF5cyBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgd2hlbiBuZXh0VGljayBpcyB1c2VkIHJlY3Vyc2l2ZWx5XG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY3Vqb2pzL3doZW4vaXNzdWVzLzQxMCBmb3IgZGV0YWlsc1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgfTtcbn1cblxuLy8gdmVydHhcbmZ1bmN0aW9uIHVzZVZlcnR4VGltZXIoKSB7XG4gIGlmICh0eXBlb2YgdmVydHhOZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2ZXJ0eE5leHQoZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB1c2VNdXRhdGlvbk9ic2VydmVyKCkge1xuICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gIHZhciBvYnNlcnZlciA9IG5ldyBCcm93c2VyTXV0YXRpb25PYnNlcnZlcihmbHVzaCk7XG4gIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICBvYnNlcnZlci5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIG5vZGUuZGF0YSA9IGl0ZXJhdGlvbnMgPSArK2l0ZXJhdGlvbnMgJSAyO1xuICB9O1xufVxuXG4vLyB3ZWIgd29ya2VyXG5mdW5jdGlvbiB1c2VNZXNzYWdlQ2hhbm5lbCgpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmbHVzaDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlU2V0VGltZW91dCgpIHtcbiAgLy8gU3RvcmUgc2V0VGltZW91dCByZWZlcmVuY2Ugc28gZXM2LXByb21pc2Ugd2lsbCBiZSB1bmFmZmVjdGVkIGJ5XG4gIC8vIG90aGVyIGNvZGUgbW9kaWZ5aW5nIHNldFRpbWVvdXQgKGxpa2Ugc2lub24udXNlRmFrZVRpbWVycygpKVxuICB2YXIgZ2xvYmFsU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdsb2JhbFNldFRpbWVvdXQoZmx1c2gsIDEpO1xuICB9O1xufVxuXG52YXIgcXVldWUgPSBuZXcgQXJyYXkoMTAwMCk7XG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHZhciBjYWxsYmFjayA9IHF1ZXVlW2ldO1xuICAgIHZhciBhcmcgPSBxdWV1ZVtpICsgMV07XG5cbiAgICBjYWxsYmFjayhhcmcpO1xuXG4gICAgcXVldWVbaV0gPSB1bmRlZmluZWQ7XG4gICAgcXVldWVbaSArIDFdID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gYXR0ZW1wdFZlcnR4KCkge1xuICB0cnkge1xuICAgIHZhciB2ZXJ0eCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCkucmVxdWlyZSgndmVydHgnKTtcbiAgICB2ZXJ0eE5leHQgPSB2ZXJ0eC5ydW5Pbkxvb3AgfHwgdmVydHgucnVuT25Db250ZXh0O1xuICAgIHJldHVybiB1c2VWZXJ0eFRpbWVyKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xuICB9XG59XG5cbnZhciBzY2hlZHVsZUZsdXNoID0gdm9pZCAwO1xuLy8gRGVjaWRlIHdoYXQgYXN5bmMgbWV0aG9kIHRvIHVzZSB0byB0cmlnZ2VyaW5nIHByb2Nlc3Npbmcgb2YgcXVldWVkIGNhbGxiYWNrczpcbmlmIChpc05vZGUpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU5leHRUaWNrKCk7XG59IGVsc2UgaWYgKEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNdXRhdGlvbk9ic2VydmVyKCk7XG59IGVsc2UgaWYgKGlzV29ya2VyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNZXNzYWdlQ2hhbm5lbCgpO1xufSBlbHNlIGlmIChicm93c2VyV2luZG93ID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IGF0dGVtcHRWZXJ0eCgpO1xufSBlbHNlIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZVNldFRpbWVvdXQoKTtcbn1cblxuZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgcGFyZW50ID0gdGhpcztcblxuICB2YXIgY2hpbGQgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihub29wKTtcblxuICBpZiAoY2hpbGRbUFJPTUlTRV9JRF0gPT09IHVuZGVmaW5lZCkge1xuICAgIG1ha2VQcm9taXNlKGNoaWxkKTtcbiAgfVxuXG4gIHZhciBfc3RhdGUgPSBwYXJlbnQuX3N0YXRlO1xuXG5cbiAgaWYgKF9zdGF0ZSkge1xuICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1tfc3RhdGUgLSAxXTtcbiAgICBhc2FwKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpbnZva2VDYWxsYmFjayhfc3RhdGUsIGNoaWxkLCBjYWxsYmFjaywgcGFyZW50Ll9yZXN1bHQpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbik7XG4gIH1cblxuICByZXR1cm4gY2hpbGQ7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZXNvbHZlYCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIHJlc29sdmVkIHdpdGggdGhlXG4gIHBhc3NlZCBgdmFsdWVgLiBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVzb2x2ZSgxKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoMSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZXNvbHZlXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHZhbHVlIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgZnVsZmlsbGVkIHdpdGggdGhlIGdpdmVuXG4gIGB2YWx1ZWBcbiovXG5mdW5jdGlvbiByZXNvbHZlJDEob2JqZWN0KSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IENvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuXG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICByZXNvbHZlKHByb21pc2UsIG9iamVjdCk7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG52YXIgUFJPTUlTRV9JRCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyKTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciBQRU5ESU5HID0gdm9pZCAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xuXG5mdW5jdGlvbiBzZWxmRnVsZmlsbG1lbnQoKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IGNhbm5vdCByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKTtcbn1cblxuZnVuY3Rpb24gY2Fubm90UmV0dXJuT3duKCkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcignQSBwcm9taXNlcyBjYWxsYmFjayBjYW5ub3QgcmV0dXJuIHRoYXQgc2FtZSBwcm9taXNlLicpO1xufVxuXG5mdW5jdGlvbiB0cnlUaGVuKHRoZW4kJDEsIHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpIHtcbiAgdHJ5IHtcbiAgICB0aGVuJCQxLmNhbGwodmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUsIHRoZW4kJDEpIHtcbiAgYXNhcChmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgIHZhciBzZWFsZWQgPSBmYWxzZTtcbiAgICB2YXIgZXJyb3IgPSB0cnlUaGVuKHRoZW4kJDEsIHRoZW5hYmxlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgIGlmICh0aGVuYWJsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBpZiAoc2VhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlYWxlZCA9IHRydWU7XG5cbiAgICAgIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0sICdTZXR0bGU6ICcgKyAocHJvbWlzZS5fbGFiZWwgfHwgJyB1bmtub3duIHByb21pc2UnKSk7XG5cbiAgICBpZiAoIXNlYWxlZCAmJiBlcnJvcikge1xuICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgfVxuICB9LCBwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUpIHtcbiAgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gRlVMRklMTEVEKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgfSBlbHNlIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgcmVqZWN0KHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZSh0aGVuYWJsZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlLCB0aGVuJCQxKSB7XG4gIGlmIChtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yID09PSBwcm9taXNlLmNvbnN0cnVjdG9yICYmIHRoZW4kJDEgPT09IHRoZW4gJiYgbWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3Rvci5yZXNvbHZlID09PSByZXNvbHZlJDEpIHtcbiAgICBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodGhlbiQkMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih0aGVuJCQxKSkge1xuICAgICAgaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlKHByb21pc2UsIHZhbHVlKSB7XG4gIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgIHJlamVjdChwcm9taXNlLCBzZWxmRnVsZmlsbG1lbnQoKSk7XG4gIH0gZWxzZSBpZiAob2JqZWN0T3JGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgdGhlbiQkMSA9IHZvaWQgMDtcbiAgICB0cnkge1xuICAgICAgdGhlbiQkMSA9IHZhbHVlLnRoZW47XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgdmFsdWUsIHRoZW4kJDEpO1xuICB9IGVsc2Uge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2hSZWplY3Rpb24ocHJvbWlzZSkge1xuICBpZiAocHJvbWlzZS5fb25lcnJvcikge1xuICAgIHByb21pc2UuX29uZXJyb3IocHJvbWlzZS5fcmVzdWx0KTtcbiAgfVxuXG4gIHB1Ymxpc2gocHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJvbWlzZS5fcmVzdWx0ID0gdmFsdWU7XG4gIHByb21pc2UuX3N0YXRlID0gRlVMRklMTEVEO1xuXG4gIGlmIChwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggIT09IDApIHtcbiAgICBhc2FwKHB1Ymxpc2gsIHByb21pc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlamVjdChwcm9taXNlLCByZWFzb24pIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHByb21pc2UuX3N0YXRlID0gUkVKRUNURUQ7XG4gIHByb21pc2UuX3Jlc3VsdCA9IHJlYXNvbjtcblxuICBhc2FwKHB1Ymxpc2hSZWplY3Rpb24sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgdmFyIF9zdWJzY3JpYmVycyA9IHBhcmVudC5fc3Vic2NyaWJlcnM7XG4gIHZhciBsZW5ndGggPSBfc3Vic2NyaWJlcnMubGVuZ3RoO1xuXG5cbiAgcGFyZW50Ll9vbmVycm9yID0gbnVsbDtcblxuICBfc3Vic2NyaWJlcnNbbGVuZ3RoXSA9IGNoaWxkO1xuICBfc3Vic2NyaWJlcnNbbGVuZ3RoICsgRlVMRklMTEVEXSA9IG9uRnVsZmlsbG1lbnQ7XG4gIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBSRUpFQ1RFRF0gPSBvblJlamVjdGlvbjtcblxuICBpZiAobGVuZ3RoID09PSAwICYmIHBhcmVudC5fc3RhdGUpIHtcbiAgICBhc2FwKHB1Ymxpc2gsIHBhcmVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaChwcm9taXNlKSB7XG4gIHZhciBzdWJzY3JpYmVycyA9IHByb21pc2UuX3N1YnNjcmliZXJzO1xuICB2YXIgc2V0dGxlZCA9IHByb21pc2UuX3N0YXRlO1xuXG4gIGlmIChzdWJzY3JpYmVycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY2hpbGQgPSB2b2lkIDAsXG4gICAgICBjYWxsYmFjayA9IHZvaWQgMCxcbiAgICAgIGRldGFpbCA9IHByb21pc2UuX3Jlc3VsdDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNjcmliZXJzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgY2hpbGQgPSBzdWJzY3JpYmVyc1tpXTtcbiAgICBjYWxsYmFjayA9IHN1YnNjcmliZXJzW2kgKyBzZXR0bGVkXTtcblxuICAgIGlmIChjaGlsZCkge1xuICAgICAgaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgY2hpbGQsIGNhbGxiYWNrLCBkZXRhaWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayhkZXRhaWwpO1xuICAgIH1cbiAgfVxuXG4gIHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCA9IDA7XG59XG5cbmZ1bmN0aW9uIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIHByb21pc2UsIGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgdmFyIGhhc0NhbGxiYWNrID0gaXNGdW5jdGlvbihjYWxsYmFjayksXG4gICAgICB2YWx1ZSA9IHZvaWQgMCxcbiAgICAgIGVycm9yID0gdm9pZCAwLFxuICAgICAgc3VjY2VlZGVkID0gdHJ1ZTtcblxuICBpZiAoaGFzQ2FsbGJhY2spIHtcbiAgICB0cnkge1xuICAgICAgdmFsdWUgPSBjYWxsYmFjayhkZXRhaWwpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHN1Y2NlZWRlZCA9IGZhbHNlO1xuICAgICAgZXJyb3IgPSBlO1xuICAgIH1cblxuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgICAgcmVqZWN0KHByb21pc2UsIGNhbm5vdFJldHVybk93bigpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBkZXRhaWw7XG4gIH1cblxuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICAvLyBub29wXG4gIH0gZWxzZSBpZiAoaGFzQ2FsbGJhY2sgJiYgc3VjY2VlZGVkKSB7XG4gICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoc3VjY2VlZGVkID09PSBmYWxzZSkge1xuICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gRlVMRklMTEVEKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gUkVKRUNURUQpIHtcbiAgICByZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVQcm9taXNlKHByb21pc2UsIHJlc29sdmVyKSB7XG4gIHRyeSB7XG4gICAgcmVzb2x2ZXIoZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UodmFsdWUpIHtcbiAgICAgIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIHJlamVjdFByb21pc2UocmVhc29uKSB7XG4gICAgICByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlamVjdChwcm9taXNlLCBlKTtcbiAgfVxufVxuXG52YXIgaWQgPSAwO1xuZnVuY3Rpb24gbmV4dElkKCkge1xuICByZXR1cm4gaWQrKztcbn1cblxuZnVuY3Rpb24gbWFrZVByb21pc2UocHJvbWlzZSkge1xuICBwcm9taXNlW1BST01JU0VfSURdID0gaWQrKztcbiAgcHJvbWlzZS5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gIHByb21pc2UuX3Jlc3VsdCA9IHVuZGVmaW5lZDtcbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMgPSBbXTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGlvbkVycm9yKCkge1xuICByZXR1cm4gbmV3IEVycm9yKCdBcnJheSBNZXRob2RzIG11c3QgYmUgcHJvdmlkZWQgYW4gQXJyYXknKTtcbn1cblxudmFyIEVudW1lcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEVudW1lcmF0b3IoQ29uc3RydWN0b3IsIGlucHV0KSB7XG4gICAgdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcblxuICAgIGlmICghdGhpcy5wcm9taXNlW1BST01JU0VfSURdKSB7XG4gICAgICBtYWtlUHJvbWlzZSh0aGlzLnByb21pc2UpO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgdGhpcy5sZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgICB0aGlzLl9yZW1haW5pbmcgPSBpbnB1dC5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX3Jlc3VsdCA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG5cbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBmdWxmaWxsKHRoaXMucHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGggfHwgMDtcbiAgICAgICAgdGhpcy5fZW51bWVyYXRlKGlucHV0KTtcbiAgICAgICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlamVjdCh0aGlzLnByb21pc2UsIHZhbGlkYXRpb25FcnJvcigpKTtcbiAgICB9XG4gIH1cblxuICBFbnVtZXJhdG9yLnByb3RvdHlwZS5fZW51bWVyYXRlID0gZnVuY3Rpb24gX2VudW1lcmF0ZShpbnB1dCkge1xuICAgIGZvciAodmFyIGkgPSAwOyB0aGlzLl9zdGF0ZSA9PT0gUEVORElORyAmJiBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuX2VhY2hFbnRyeShpbnB1dFtpXSwgaSk7XG4gICAgfVxuICB9O1xuXG4gIEVudW1lcmF0b3IucHJvdG90eXBlLl9lYWNoRW50cnkgPSBmdW5jdGlvbiBfZWFjaEVudHJ5KGVudHJ5LCBpKSB7XG4gICAgdmFyIGMgPSB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yO1xuICAgIHZhciByZXNvbHZlJCQxID0gYy5yZXNvbHZlO1xuXG5cbiAgICBpZiAocmVzb2x2ZSQkMSA9PT0gcmVzb2x2ZSQxKSB7XG4gICAgICB2YXIgX3RoZW4gPSB2b2lkIDA7XG4gICAgICB2YXIgZXJyb3IgPSB2b2lkIDA7XG4gICAgICB2YXIgZGlkRXJyb3IgPSBmYWxzZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIF90aGVuID0gZW50cnkudGhlbjtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZGlkRXJyb3IgPSB0cnVlO1xuICAgICAgICBlcnJvciA9IGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhlbiA9PT0gdGhlbiAmJiBlbnRyeS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICAgICAgdGhpcy5fc2V0dGxlZEF0KGVudHJ5Ll9zdGF0ZSwgaSwgZW50cnkuX3Jlc3VsdCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBfdGhlbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLl9yZW1haW5pbmctLTtcbiAgICAgICAgdGhpcy5fcmVzdWx0W2ldID0gZW50cnk7XG4gICAgICB9IGVsc2UgaWYgKGMgPT09IFByb21pc2UkMSkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBjKG5vb3ApO1xuICAgICAgICBpZiAoZGlkRXJyb3IpIHtcbiAgICAgICAgICByZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgZW50cnksIF90aGVuKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93aWxsU2V0dGxlQXQocHJvbWlzZSwgaSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl93aWxsU2V0dGxlQXQobmV3IGMoZnVuY3Rpb24gKHJlc29sdmUkJDEpIHtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSQkMShlbnRyeSk7XG4gICAgICAgIH0pLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KHJlc29sdmUkJDEoZW50cnkpLCBpKTtcbiAgICB9XG4gIH07XG5cbiAgRW51bWVyYXRvci5wcm90b3R5cGUuX3NldHRsZWRBdCA9IGZ1bmN0aW9uIF9zZXR0bGVkQXQoc3RhdGUsIGksIHZhbHVlKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG5cblxuICAgIGlmIChwcm9taXNlLl9zdGF0ZSA9PT0gUEVORElORykge1xuICAgICAgdGhpcy5fcmVtYWluaW5nLS07XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICAgICAgcmVqZWN0KHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3Jlc3VsdFtpXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICB9XG4gIH07XG5cbiAgRW51bWVyYXRvci5wcm90b3R5cGUuX3dpbGxTZXR0bGVBdCA9IGZ1bmN0aW9uIF93aWxsU2V0dGxlQXQocHJvbWlzZSwgaSkge1xuICAgIHZhciBlbnVtZXJhdG9yID0gdGhpcztcblxuICAgIHN1YnNjcmliZShwcm9taXNlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGVudW1lcmF0b3IuX3NldHRsZWRBdChGVUxGSUxMRUQsIGksIHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KFJFSkVDVEVELCBpLCByZWFzb24pO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBFbnVtZXJhdG9yO1xufSgpO1xuXG4vKipcbiAgYFByb21pc2UuYWxsYCBhY2NlcHRzIGFuIGFycmF5IG9mIHByb21pc2VzLCBhbmQgcmV0dXJucyBhIG5ldyBwcm9taXNlIHdoaWNoXG4gIGlzIGZ1bGZpbGxlZCB3aXRoIGFuIGFycmF5IG9mIGZ1bGZpbGxtZW50IHZhbHVlcyBmb3IgdGhlIHBhc3NlZCBwcm9taXNlcywgb3JcbiAgcmVqZWN0ZWQgd2l0aCB0aGUgcmVhc29uIG9mIHRoZSBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBiZSByZWplY3RlZC4gSXQgY2FzdHMgYWxsXG4gIGVsZW1lbnRzIG9mIHRoZSBwYXNzZWQgaXRlcmFibGUgdG8gcHJvbWlzZXMgYXMgaXQgcnVucyB0aGlzIGFsZ29yaXRobS5cblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gcmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gcmVzb2x2ZSgyKTtcbiAgbGV0IHByb21pc2UzID0gcmVzb2x2ZSgzKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIFRoZSBhcnJheSBoZXJlIHdvdWxkIGJlIFsgMSwgMiwgMyBdO1xuICB9KTtcbiAgYGBgXG5cbiAgSWYgYW55IG9mIHRoZSBgcHJvbWlzZXNgIGdpdmVuIHRvIGBhbGxgIGFyZSByZWplY3RlZCwgdGhlIGZpcnN0IHByb21pc2VcbiAgdGhhdCBpcyByZWplY3RlZCB3aWxsIGJlIGdpdmVuIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSByZXR1cm5lZCBwcm9taXNlcydzXG4gIHJlamVjdGlvbiBoYW5kbGVyLiBGb3IgZXhhbXBsZTpcblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gcmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gcmVqZWN0KG5ldyBFcnJvcihcIjJcIikpO1xuICBsZXQgcHJvbWlzZTMgPSByZWplY3QobmV3IEVycm9yKFwiM1wiKSk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVucyBiZWNhdXNlIHRoZXJlIGFyZSByZWplY3RlZCBwcm9taXNlcyFcbiAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAvLyBlcnJvci5tZXNzYWdlID09PSBcIjJcIlxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCBhbGxcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FycmF5fSBlbnRyaWVzIGFycmF5IG9mIHByb21pc2VzXG4gIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGxhYmVsaW5nIHRoZSBwcm9taXNlLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2hlbiBhbGwgYHByb21pc2VzYCBoYXZlIGJlZW5cbiAgZnVsZmlsbGVkLCBvciByZWplY3RlZCBpZiBhbnkgb2YgdGhlbSBiZWNvbWUgcmVqZWN0ZWQuXG4gIEBzdGF0aWNcbiovXG5mdW5jdGlvbiBhbGwoZW50cmllcykge1xuICByZXR1cm4gbmV3IEVudW1lcmF0b3IodGhpcywgZW50cmllcykucHJvbWlzZTtcbn1cblxuLyoqXG4gIGBQcm9taXNlLnJhY2VgIHJldHVybnMgYSBuZXcgcHJvbWlzZSB3aGljaCBpcyBzZXR0bGVkIGluIHRoZSBzYW1lIHdheSBhcyB0aGVcbiAgZmlyc3QgcGFzc2VkIHByb21pc2UgdG8gc2V0dGxlLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMScpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuXG4gIGxldCBwcm9taXNlMiA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAyJyk7XG4gICAgfSwgMTAwKTtcbiAgfSk7XG5cbiAgUHJvbWlzZS5yYWNlKFtwcm9taXNlMSwgcHJvbWlzZTJdKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgLy8gcmVzdWx0ID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIGl0IHdhcyByZXNvbHZlZCBiZWZvcmUgcHJvbWlzZTFcbiAgICAvLyB3YXMgcmVzb2x2ZWQuXG4gIH0pO1xuICBgYGBcblxuICBgUHJvbWlzZS5yYWNlYCBpcyBkZXRlcm1pbmlzdGljIGluIHRoYXQgb25seSB0aGUgc3RhdGUgb2YgdGhlIGZpcnN0XG4gIHNldHRsZWQgcHJvbWlzZSBtYXR0ZXJzLiBGb3IgZXhhbXBsZSwgZXZlbiBpZiBvdGhlciBwcm9taXNlcyBnaXZlbiB0byB0aGVcbiAgYHByb21pc2VzYCBhcnJheSBhcmd1bWVudCBhcmUgcmVzb2x2ZWQsIGJ1dCB0aGUgZmlyc3Qgc2V0dGxlZCBwcm9taXNlIGhhc1xuICBiZWNvbWUgcmVqZWN0ZWQgYmVmb3JlIHRoZSBvdGhlciBwcm9taXNlcyBiZWNhbWUgZnVsZmlsbGVkLCB0aGUgcmV0dXJuZWRcbiAgcHJvbWlzZSB3aWxsIGJlY29tZSByZWplY3RlZDpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgbGV0IHByb21pc2UyID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdwcm9taXNlIDInKSk7XG4gICAgfSwgMTAwKTtcbiAgfSk7XG5cbiAgUHJvbWlzZS5yYWNlKFtwcm9taXNlMSwgcHJvbWlzZTJdKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnNcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ3Byb21pc2UgMicgYmVjYXVzZSBwcm9taXNlIDIgYmVjYW1lIHJlamVjdGVkIGJlZm9yZVxuICAgIC8vIHByb21pc2UgMSBiZWNhbWUgZnVsZmlsbGVkXG4gIH0pO1xuICBgYGBcblxuICBBbiBleGFtcGxlIHJlYWwtd29ybGQgdXNlIGNhc2UgaXMgaW1wbGVtZW50aW5nIHRpbWVvdXRzOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgUHJvbWlzZS5yYWNlKFthamF4KCdmb28uanNvbicpLCB0aW1lb3V0KDUwMDApXSlcbiAgYGBgXG5cbiAgQG1ldGhvZCByYWNlXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBcnJheX0gcHJvbWlzZXMgYXJyYXkgb2YgcHJvbWlzZXMgdG8gb2JzZXJ2ZVxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB3aGljaCBzZXR0bGVzIGluIHRoZSBzYW1lIHdheSBhcyB0aGUgZmlyc3QgcGFzc2VkXG4gIHByb21pc2UgdG8gc2V0dGxlLlxuKi9cbmZ1bmN0aW9uIHJhY2UoZW50cmllcykge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gIGlmICghaXNBcnJheShlbnRyaWVzKSkge1xuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gKF8sIHJlamVjdCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGFuIGFycmF5IHRvIHJhY2UuJykpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGVudHJpZXMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBDb25zdHJ1Y3Rvci5yZXNvbHZlKGVudHJpZXNbaV0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAgYFByb21pc2UucmVqZWN0YCByZXR1cm5zIGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBwYXNzZWQgYHJlYXNvbmAuXG4gIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICByZWplY3QobmV3IEVycm9yKCdXSE9PUFMnKSk7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gQ29kZSBoZXJlIGRvZXNuJ3QgcnVuIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdXSE9PUFMnXG4gIH0pO1xuICBgYGBcblxuICBJbnN0ZWFkIG9mIHdyaXRpbmcgdGhlIGFib3ZlLCB5b3VyIGNvZGUgbm93IHNpbXBseSBiZWNvbWVzIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gQ29kZSBoZXJlIGRvZXNuJ3QgcnVuIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdXSE9PUFMnXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlamVjdFxuICBAc3RhdGljXG4gIEBwYXJhbSB7QW55fSByZWFzb24gdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIHdpdGguXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIGdpdmVuIGByZWFzb25gLlxuKi9cbmZ1bmN0aW9uIHJlamVjdCQxKHJlYXNvbikge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcbiAgcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBuZWVkc1Jlc29sdmVyKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgcmVzb2x2ZXIgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG59XG5cbmZ1bmN0aW9uIG5lZWRzTmV3KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUHJvbWlzZSc6IFBsZWFzZSB1c2UgdGhlICduZXcnIG9wZXJhdG9yLCB0aGlzIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xufVxuXG4vKipcbiAgUHJvbWlzZSBvYmplY3RzIHJlcHJlc2VudCB0aGUgZXZlbnR1YWwgcmVzdWx0IG9mIGFuIGFzeW5jaHJvbm91cyBvcGVyYXRpb24uIFRoZVxuICBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLCB3aGljaFxuICByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZSByZWFzb25cbiAgd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG5cbiAgVGVybWlub2xvZ3lcbiAgLS0tLS0tLS0tLS1cblxuICAtIGBwcm9taXNlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gd2l0aCBhIGB0aGVuYCBtZXRob2Qgd2hvc2UgYmVoYXZpb3IgY29uZm9ybXMgdG8gdGhpcyBzcGVjaWZpY2F0aW9uLlxuICAtIGB0aGVuYWJsZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHRoYXQgZGVmaW5lcyBhIGB0aGVuYCBtZXRob2QuXG4gIC0gYHZhbHVlYCBpcyBhbnkgbGVnYWwgSmF2YVNjcmlwdCB2YWx1ZSAoaW5jbHVkaW5nIHVuZGVmaW5lZCwgYSB0aGVuYWJsZSwgb3IgYSBwcm9taXNlKS5cbiAgLSBgZXhjZXB0aW9uYCBpcyBhIHZhbHVlIHRoYXQgaXMgdGhyb3duIHVzaW5nIHRoZSB0aHJvdyBzdGF0ZW1lbnQuXG4gIC0gYHJlYXNvbmAgaXMgYSB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aHkgYSBwcm9taXNlIHdhcyByZWplY3RlZC5cbiAgLSBgc2V0dGxlZGAgdGhlIGZpbmFsIHJlc3Rpbmcgc3RhdGUgb2YgYSBwcm9taXNlLCBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQuXG5cbiAgQSBwcm9taXNlIGNhbiBiZSBpbiBvbmUgb2YgdGhyZWUgc3RhdGVzOiBwZW5kaW5nLCBmdWxmaWxsZWQsIG9yIHJlamVjdGVkLlxuXG4gIFByb21pc2VzIHRoYXQgYXJlIGZ1bGZpbGxlZCBoYXZlIGEgZnVsZmlsbG1lbnQgdmFsdWUgYW5kIGFyZSBpbiB0aGUgZnVsZmlsbGVkXG4gIHN0YXRlLiAgUHJvbWlzZXMgdGhhdCBhcmUgcmVqZWN0ZWQgaGF2ZSBhIHJlamVjdGlvbiByZWFzb24gYW5kIGFyZSBpbiB0aGVcbiAgcmVqZWN0ZWQgc3RhdGUuICBBIGZ1bGZpbGxtZW50IHZhbHVlIGlzIG5ldmVyIGEgdGhlbmFibGUuXG5cbiAgUHJvbWlzZXMgY2FuIGFsc28gYmUgc2FpZCB0byAqcmVzb2x2ZSogYSB2YWx1ZS4gIElmIHRoaXMgdmFsdWUgaXMgYWxzbyBhXG4gIHByb21pc2UsIHRoZW4gdGhlIG9yaWdpbmFsIHByb21pc2UncyBzZXR0bGVkIHN0YXRlIHdpbGwgbWF0Y2ggdGhlIHZhbHVlJ3NcbiAgc2V0dGxlZCBzdGF0ZS4gIFNvIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgcmVqZWN0cyB3aWxsXG4gIGl0c2VsZiByZWplY3QsIGFuZCBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIHdpbGxcbiAgaXRzZWxmIGZ1bGZpbGwuXG5cblxuICBCYXNpYyBVc2FnZTpcbiAgLS0tLS0tLS0tLS0tXG5cbiAgYGBganNcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAvLyBvbiBzdWNjZXNzXG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG5cbiAgICAvLyBvbiBmYWlsdXJlXG4gICAgcmVqZWN0KHJlYXNvbik7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIG9uIHJlamVjdGlvblxuICB9KTtcbiAgYGBgXG5cbiAgQWR2YW5jZWQgVXNhZ2U6XG4gIC0tLS0tLS0tLS0tLS0tLVxuXG4gIFByb21pc2VzIHNoaW5lIHdoZW4gYWJzdHJhY3RpbmcgYXdheSBhc3luY2hyb25vdXMgaW50ZXJhY3Rpb25zIHN1Y2ggYXNcbiAgYFhNTEh0dHBSZXF1ZXN0YHMuXG5cbiAgYGBganNcbiAgZnVuY3Rpb24gZ2V0SlNPTih1cmwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gaGFuZGxlcjtcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnanNvbic7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHhoci5zZW5kKCk7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IHRoaXMuRE9ORSkge1xuICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICByZXNvbHZlKHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdnZXRKU09OOiBgJyArIHVybCArICdgIGZhaWxlZCB3aXRoIHN0YXR1czogWycgKyB0aGlzLnN0YXR1cyArICddJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEpTT04oJy9wb3N0cy5qc29uJykudGhlbihmdW5jdGlvbihqc29uKSB7XG4gICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gb24gcmVqZWN0aW9uXG4gIH0pO1xuICBgYGBcblxuICBVbmxpa2UgY2FsbGJhY2tzLCBwcm9taXNlcyBhcmUgZ3JlYXQgY29tcG9zYWJsZSBwcmltaXRpdmVzLlxuXG4gIGBgYGpzXG4gIFByb21pc2UuYWxsKFtcbiAgICBnZXRKU09OKCcvcG9zdHMnKSxcbiAgICBnZXRKU09OKCcvY29tbWVudHMnKVxuICBdKS50aGVuKGZ1bmN0aW9uKHZhbHVlcyl7XG4gICAgdmFsdWVzWzBdIC8vID0+IHBvc3RzSlNPTlxuICAgIHZhbHVlc1sxXSAvLyA9PiBjb21tZW50c0pTT05cblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0pO1xuICBgYGBcblxuICBAY2xhc3MgUHJvbWlzZVxuICBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlclxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEBjb25zdHJ1Y3RvclxuKi9cblxudmFyIFByb21pc2UkMSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJvbWlzZShyZXNvbHZlcikge1xuICAgIHRoaXNbUFJPTUlTRV9JRF0gPSBuZXh0SWQoKTtcbiAgICB0aGlzLl9yZXN1bHQgPSB0aGlzLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuXG4gICAgaWYgKG5vb3AgIT09IHJlc29sdmVyKSB7XG4gICAgICB0eXBlb2YgcmVzb2x2ZXIgIT09ICdmdW5jdGlvbicgJiYgbmVlZHNSZXNvbHZlcigpO1xuICAgICAgdGhpcyBpbnN0YW5jZW9mIFByb21pc2UgPyBpbml0aWFsaXplUHJvbWlzZSh0aGlzLCByZXNvbHZlcikgOiBuZWVkc05ldygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICBUaGUgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCxcbiAgd2hpY2ggcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGVcbiAgcmVhc29uIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuICAgYGBganNcbiAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uKHVzZXIpe1xuICAgIC8vIHVzZXIgaXMgYXZhaWxhYmxlXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gdXNlciBpcyB1bmF2YWlsYWJsZSwgYW5kIHlvdSBhcmUgZ2l2ZW4gdGhlIHJlYXNvbiB3aHlcbiAgfSk7XG4gIGBgYFxuICAgQ2hhaW5pbmdcbiAgLS0tLS0tLS1cbiAgIFRoZSByZXR1cm4gdmFsdWUgb2YgYHRoZW5gIGlzIGl0c2VsZiBhIHByb21pc2UuICBUaGlzIHNlY29uZCwgJ2Rvd25zdHJlYW0nXG4gIHByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmaXJzdCBwcm9taXNlJ3MgZnVsZmlsbG1lbnRcbiAgb3IgcmVqZWN0aW9uIGhhbmRsZXIsIG9yIHJlamVjdGVkIGlmIHRoZSBoYW5kbGVyIHRocm93cyBhbiBleGNlcHRpb24uXG4gICBgYGBqc1xuICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICByZXR1cm4gdXNlci5uYW1lO1xuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgcmV0dXJuICdkZWZhdWx0IG5hbWUnO1xuICB9KS50aGVuKGZ1bmN0aW9uICh1c2VyTmFtZSkge1xuICAgIC8vIElmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgdXNlck5hbWVgIHdpbGwgYmUgdGhlIHVzZXIncyBuYW1lLCBvdGhlcndpc2UgaXRcbiAgICAvLyB3aWxsIGJlIGAnZGVmYXVsdCBuYW1lJ2BcbiAgfSk7XG4gICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jyk7XG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BmaW5kVXNlcmAgcmVqZWN0ZWQgYW5kIHdlJ3JlIHVuaGFwcHknKTtcbiAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyBuZXZlciByZWFjaGVkXG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAvLyBpZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHJlYXNvbmAgd2lsbCBiZSAnRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknLlxuICAgIC8vIElmIGBmaW5kVXNlcmAgcmVqZWN0ZWQsIGByZWFzb25gIHdpbGwgYmUgJ2BmaW5kVXNlcmAgcmVqZWN0ZWQgYW5kIHdlJ3JlIHVuaGFwcHknLlxuICB9KTtcbiAgYGBgXG4gIElmIHRoZSBkb3duc3RyZWFtIHByb21pc2UgZG9lcyBub3Qgc3BlY2lmeSBhIHJlamVjdGlvbiBoYW5kbGVyLCByZWplY3Rpb24gcmVhc29ucyB3aWxsIGJlIHByb3BhZ2F0ZWQgZnVydGhlciBkb3duc3RyZWFtLlxuICAgYGBganNcbiAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgdGhyb3cgbmV3IFBlZGFnb2dpY2FsRXhjZXB0aW9uKCdVcHN0cmVhbSBlcnJvcicpO1xuICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyBuZXZlciByZWFjaGVkXG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAvLyBUaGUgYFBlZGdhZ29jaWFsRXhjZXB0aW9uYCBpcyBwcm9wYWdhdGVkIGFsbCB0aGUgd2F5IGRvd24gdG8gaGVyZVxuICB9KTtcbiAgYGBgXG4gICBBc3NpbWlsYXRpb25cbiAgLS0tLS0tLS0tLS0tXG4gICBTb21ldGltZXMgdGhlIHZhbHVlIHlvdSB3YW50IHRvIHByb3BhZ2F0ZSB0byBhIGRvd25zdHJlYW0gcHJvbWlzZSBjYW4gb25seSBiZVxuICByZXRyaWV2ZWQgYXN5bmNocm9ub3VzbHkuIFRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJldHVybmluZyBhIHByb21pc2UgaW4gdGhlXG4gIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBoYW5kbGVyLiBUaGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgdGhlbiBiZSBwZW5kaW5nXG4gIHVudGlsIHRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHNldHRsZWQuIFRoaXMgaXMgY2FsbGVkICphc3NpbWlsYXRpb24qLlxuICAgYGBganNcbiAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgIC8vIFRoZSB1c2VyJ3MgY29tbWVudHMgYXJlIG5vdyBhdmFpbGFibGVcbiAgfSk7XG4gIGBgYFxuICAgSWYgdGhlIGFzc2ltbGlhdGVkIHByb21pc2UgcmVqZWN0cywgdGhlbiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgYWxzbyByZWplY3QuXG4gICBgYGBqc1xuICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCBmdWxmaWxscywgd2UnbGwgaGF2ZSB0aGUgdmFsdWUgaGVyZVxuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCByZWplY3RzLCB3ZSdsbCBoYXZlIHRoZSByZWFzb24gaGVyZVxuICB9KTtcbiAgYGBgXG4gICBTaW1wbGUgRXhhbXBsZVxuICAtLS0tLS0tLS0tLS0tLVxuICAgU3luY2hyb25vdXMgRXhhbXBsZVxuICAgYGBgamF2YXNjcmlwdFxuICBsZXQgcmVzdWx0O1xuICAgdHJ5IHtcbiAgICByZXN1bHQgPSBmaW5kUmVzdWx0KCk7XG4gICAgLy8gc3VjY2Vzc1xuICB9IGNhdGNoKHJlYXNvbikge1xuICAgIC8vIGZhaWx1cmVcbiAgfVxuICBgYGBcbiAgIEVycmJhY2sgRXhhbXBsZVxuICAgYGBganNcbiAgZmluZFJlc3VsdChmdW5jdGlvbihyZXN1bHQsIGVycil7XG4gICAgaWYgKGVycikge1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfVxuICB9KTtcbiAgYGBgXG4gICBQcm9taXNlIEV4YW1wbGU7XG4gICBgYGBqYXZhc2NyaXB0XG4gIGZpbmRSZXN1bHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgLy8gc3VjY2Vzc1xuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIGZhaWx1cmVcbiAgfSk7XG4gIGBgYFxuICAgQWR2YW5jZWQgRXhhbXBsZVxuICAtLS0tLS0tLS0tLS0tLVxuICAgU3luY2hyb25vdXMgRXhhbXBsZVxuICAgYGBgamF2YXNjcmlwdFxuICBsZXQgYXV0aG9yLCBib29rcztcbiAgIHRyeSB7XG4gICAgYXV0aG9yID0gZmluZEF1dGhvcigpO1xuICAgIGJvb2tzICA9IGZpbmRCb29rc0J5QXV0aG9yKGF1dGhvcik7XG4gICAgLy8gc3VjY2Vzc1xuICB9IGNhdGNoKHJlYXNvbikge1xuICAgIC8vIGZhaWx1cmVcbiAgfVxuICBgYGBcbiAgIEVycmJhY2sgRXhhbXBsZVxuICAgYGBganNcbiAgIGZ1bmN0aW9uIGZvdW5kQm9va3MoYm9va3MpIHtcbiAgIH1cbiAgIGZ1bmN0aW9uIGZhaWx1cmUocmVhc29uKSB7XG4gICB9XG4gICBmaW5kQXV0aG9yKGZ1bmN0aW9uKGF1dGhvciwgZXJyKXtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBmYWlsdXJlKGVycik7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZpbmRCb29va3NCeUF1dGhvcihhdXRob3IsIGZ1bmN0aW9uKGJvb2tzLCBlcnIpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGZvdW5kQm9va3MoYm9va3MpO1xuICAgICAgICAgICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgICAgICAgICAgZmFpbHVyZShyZWFzb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgIH1cbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9XG4gIH0pO1xuICBgYGBcbiAgIFByb21pc2UgRXhhbXBsZTtcbiAgIGBgYGphdmFzY3JpcHRcbiAgZmluZEF1dGhvcigpLlxuICAgIHRoZW4oZmluZEJvb2tzQnlBdXRob3IpLlxuICAgIHRoZW4oZnVuY3Rpb24oYm9va3Mpe1xuICAgICAgLy8gZm91bmQgYm9va3NcbiAgfSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICB9KTtcbiAgYGBgXG4gICBAbWV0aG9kIHRoZW5cbiAgQHBhcmFtIHtGdW5jdGlvbn0gb25GdWxmaWxsZWRcbiAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3RlZFxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG5cbiAgLyoqXG4gIGBjYXRjaGAgaXMgc2ltcGx5IHN1Z2FyIGZvciBgdGhlbih1bmRlZmluZWQsIG9uUmVqZWN0aW9uKWAgd2hpY2ggbWFrZXMgaXQgdGhlIHNhbWVcbiAgYXMgdGhlIGNhdGNoIGJsb2NrIG9mIGEgdHJ5L2NhdGNoIHN0YXRlbWVudC5cbiAgYGBganNcbiAgZnVuY3Rpb24gZmluZEF1dGhvcigpe1xuICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkbid0IGZpbmQgdGhhdCBhdXRob3InKTtcbiAgfVxuICAvLyBzeW5jaHJvbm91c1xuICB0cnkge1xuICBmaW5kQXV0aG9yKCk7XG4gIH0gY2F0Y2gocmVhc29uKSB7XG4gIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gIH1cbiAgLy8gYXN5bmMgd2l0aCBwcm9taXNlc1xuICBmaW5kQXV0aG9yKCkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgfSk7XG4gIGBgYFxuICBAbWV0aG9kIGNhdGNoXG4gIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0aW9uXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cblxuXG4gIFByb21pc2UucHJvdG90eXBlLmNhdGNoID0gZnVuY3Rpb24gX2NhdGNoKG9uUmVqZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGlvbik7XG4gIH07XG5cbiAgLyoqXG4gICAgYGZpbmFsbHlgIHdpbGwgYmUgaW52b2tlZCByZWdhcmRsZXNzIG9mIHRoZSBwcm9taXNlJ3MgZmF0ZSBqdXN0IGFzIG5hdGl2ZVxuICAgIHRyeS9jYXRjaC9maW5hbGx5IGJlaGF2ZXNcbiAgXG4gICAgU3luY2hyb25vdXMgZXhhbXBsZTpcbiAgXG4gICAgYGBganNcbiAgICBmaW5kQXV0aG9yKCkge1xuICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPiAwLjUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEF1dGhvcigpO1xuICAgIH1cbiAgXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmaW5kQXV0aG9yKCk7IC8vIHN1Y2NlZWQgb3IgZmFpbFxuICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgIHJldHVybiBmaW5kT3RoZXJBdXRoZXIoKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gYWx3YXlzIHJ1bnNcbiAgICAgIC8vIGRvZXNuJ3QgYWZmZWN0IHRoZSByZXR1cm4gdmFsdWVcbiAgICB9XG4gICAgYGBgXG4gIFxuICAgIEFzeW5jaHJvbm91cyBleGFtcGxlOlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRBdXRob3IoKS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgICAgcmV0dXJuIGZpbmRPdGhlckF1dGhlcigpO1xuICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24oKXtcbiAgICAgIC8vIGF1dGhvciB3YXMgZWl0aGVyIGZvdW5kLCBvciBub3RcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQG1ldGhvZCBmaW5hbGx5XG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuXG5cbiAgUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseSA9IGZ1bmN0aW9uIF9maW5hbGx5KGNhbGxiYWNrKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3I7XG5cbiAgICBpZiAoaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKGNhbGxiYWNrLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgcmV0dXJuIFByb21pc2U7XG59KCk7XG5cblByb21pc2UkMS5wcm90b3R5cGUudGhlbiA9IHRoZW47XG5Qcm9taXNlJDEuYWxsID0gYWxsO1xuUHJvbWlzZSQxLnJhY2UgPSByYWNlO1xuUHJvbWlzZSQxLnJlc29sdmUgPSByZXNvbHZlJDE7XG5Qcm9taXNlJDEucmVqZWN0ID0gcmVqZWN0JDE7XG5Qcm9taXNlJDEuX3NldFNjaGVkdWxlciA9IHNldFNjaGVkdWxlcjtcblByb21pc2UkMS5fc2V0QXNhcCA9IHNldEFzYXA7XG5Qcm9taXNlJDEuX2FzYXAgPSBhc2FwO1xuXG4vKmdsb2JhbCBzZWxmKi9cbmZ1bmN0aW9uIHBvbHlmaWxsKCkge1xuICB2YXIgbG9jYWwgPSB2b2lkIDA7XG5cbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbG9jYWwgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbG9jYWwgPSBzZWxmO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBsb2NhbCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdwb2x5ZmlsbCBmYWlsZWQgYmVjYXVzZSBnbG9iYWwgb2JqZWN0IGlzIHVuYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcbiAgICB9XG4gIH1cblxuICB2YXIgUCA9IGxvY2FsLlByb21pc2U7XG5cbiAgaWYgKFApIHtcbiAgICB2YXIgcHJvbWlzZVRvU3RyaW5nID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgcHJvbWlzZVRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFAucmVzb2x2ZSgpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBzaWxlbnRseSBpZ25vcmVkXG4gICAgfVxuXG4gICAgaWYgKHByb21pc2VUb1N0cmluZyA9PT0gJ1tvYmplY3QgUHJvbWlzZV0nICYmICFQLmNhc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBsb2NhbC5Qcm9taXNlID0gUHJvbWlzZSQxO1xufVxuXG4vLyBTdHJhbmdlIGNvbXBhdC4uXG5Qcm9taXNlJDEucG9seWZpbGwgPSBwb2x5ZmlsbDtcblByb21pc2UkMS5Qcm9taXNlID0gUHJvbWlzZSQxO1xuXG5yZXR1cm4gUHJvbWlzZSQxO1xuXG59KSkpO1xuXG5cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXM2LXByb21pc2UubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb25maWdfMSA9IHJlcXVpcmUoXCIuLi9jb25maWdcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZSh0b2tlbiwgZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IHBheWxvYWQgPSBkYXRhICYmIE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA+IDAgPyBkYXRhIDogY29uc3RhbnRzXzEuREVGQVVMVF9DUkVBVEVfT1JERVJfUEFZTE9BRDtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW4uYWNjZXNzX3Rva2VufWAsXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIC4uLmhlYWRlcnNcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZClcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCBmZXRjaChgJHtjb25maWdfMS5DT05GSUcuZ2V0KFwiUEFZUEFMX1JFU1RfSE9TVE5BTUVcIil9L3YyL2NoZWNrb3V0L29yZGVyc2AsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5jcmVhdGUgPSBjcmVhdGU7XG5hc3luYyBmdW5jdGlvbiB1cGRhdGUodG9rZW4sIGlkLCBkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IGRhdGEgJiYgT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID4gMCA/IGRhdGEgOiBjb25zdGFudHNfMS5ERUZBVUxUX1VQREFURV9PUkRFUl9QQVlMT0FEO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW4uYWNjZXNzX3Rva2VufWAsXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIC4uLmhlYWRlcnNcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZClcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCBmZXRjaChgJHtjb25maWdfMS5DT05GSUcuZ2V0KFwiUEFZUEFMX1JFU1RfSE9TVE5BTUVcIil9L3YyL2NoZWNrb3V0L29yZGVycy8ke2lkfWAsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy51cGRhdGUgPSB1cGRhdGU7XG5hc3luYyBmdW5jdGlvbiBnZXQodG9rZW4sIGlkLCBoZWFkZXJzKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW4uYWNjZXNzX3Rva2VufWAsXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIC4uLmhlYWRlcnNcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IGZldGNoKGAke2NvbmZpZ18xLkNPTkZJRy5nZXQoXCJQQVlQQUxfUkVTVF9IT1NUTkFNRVwiKX0vdjIvY2hlY2tvdXQvb3JkZXJzLyR7aWR9YCwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmdldCA9IGdldDtcbmFzeW5jIGZ1bmN0aW9uIGF1dGhvcml6ZSh0b2tlbiwgaWQsIGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBwYXlsb2FkID0gZGF0YTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW4uYWNjZXNzX3Rva2VufWAsXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIC4uLmhlYWRlcnNcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZClcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCBmZXRjaChgJHtjb25maWdfMS5DT05GSUcuZ2V0KFwiUEFZUEFMX1JFU1RfSE9TVE5BTUVcIil9L3YyL2NoZWNrb3V0L29yZGVycy8ke2lkfS9hdXRob3JpemVgLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuYXV0aG9yaXplID0gYXV0aG9yaXplO1xuYXN5bmMgZnVuY3Rpb24gY2FwdHVyZSh0b2tlbiwgaWQsIGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBwYXlsb2FkID0gZGF0YTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW4uYWNjZXNzX3Rva2VufWAsXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIC4uLmhlYWRlcnNcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZClcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCBmZXRjaChgJHtjb25maWdfMS5DT05GSUcuZ2V0KFwiUEFZUEFMX1JFU1RfSE9TVE5BTUVcIil9L3YyL2NoZWNrb3V0L29yZGVycy8ke2lkfS9jYXB0dXJlYCwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmNhcHR1cmUgPSBjYXB0dXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiKGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgZnVuY3Rpb24gYnRvYShzdHIpIHtcbiAgICB2YXIgYnVmZmVyO1xuXG4gICAgaWYgKHN0ciBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgYnVmZmVyID0gc3RyO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIgPSBCdWZmZXIuZnJvbShzdHIudG9TdHJpbmcoKSwgJ2JpbmFyeScpO1xuICAgIH1cblxuICAgIHJldHVybiBidWZmZXIudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB9XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBidG9hO1xufSgpKTtcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuLyogZ2xvYmFsIHdpbmRvdyBzZWxmICovXG5cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG52YXIgaXNXZWJXb3JrZXIgPSAodHlwZW9mIHNlbGYgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHNlbGYpKSA9PT0gJ29iamVjdCcgJiYgc2VsZi5jb25zdHJ1Y3RvciAmJiBzZWxmLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZSc7XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xuXG52YXIgaXNOb2RlID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudmVyc2lvbnMgIT0gbnVsbCAmJiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT0gbnVsbDtcblxuZXhwb3J0cy5pc0Jyb3dzZXIgPSBpc0Jyb3dzZXI7XG5leHBvcnRzLmlzV2ViV29ya2VyID0gaXNXZWJXb3JrZXI7XG5leHBvcnRzLmlzTm9kZSA9IGlzTm9kZTsiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuREVGQVVMVF9DUkVBVEVfT1JERVJfUEFZTE9BRCA9IHtcbiAgICBpbnRlbnQ6IFwiQVVUSE9SSVpFXCIsXG4gICAgcHVyY2hhc2VfdW5pdHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVGhpcyBpcyBjb29sXCIsXG4gICAgICAgICAgICBhbW91bnQ6IHtcbiAgICAgICAgICAgICAgICBjdXJyZW5jeV9jb2RlOiBcIlVTRFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBcIjEwMC4wMFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdXG59O1xuZXhwb3J0cy5ERUZBVUxUX1VQREFURV9PUkRFUl9QQVlMT0FEID0gW1xuICAgIHtcbiAgICAgICAgb3A6IFwicmVwbGFjZVwiLFxuICAgICAgICBwYXRoOiBcIi9wdXJjaGFzZV91bml0cy9AcmVmZXJlbmNlX2lkPT0nZGVmYXVsdCcvZGVzY3JpcHRpb25cIixcbiAgICAgICAgdmFsdWU6IFwidGhpcyBpcyBmaW5lXCJcbiAgICB9XG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBjb25maWdfMSA9IHJlcXVpcmUoXCIuLi9jb25maWdcIik7XG5hc3luYyBmdW5jdGlvbiBjcmVhdGVUb2tlbih0b2tlbiwgZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IHBheWxvYWQgPSBkYXRhICYmIE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA+IDBcbiAgICAgICAgPyBkYXRhXG4gICAgICAgIDogY29uc3RhbnRzXzEuREVGQVVMVF9DUkVBVEVfQklMTElOR19BR1JFRU1FTlRfVE9LRU5fUEFZTE9BRDtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW4uYWNjZXNzX3Rva2VufWAsXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIC4uLmhlYWRlcnNcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZClcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCBmZXRjaChgJHtjb25maWdfMS5DT05GSUcuZ2V0KFwiUEFZUEFMX1JFU1RfSE9TVE5BTUVcIil9L3YxL2JpbGxpbmctYWdyZWVtZW50cy9hZ3JlZW1lbnQtdG9rZW5zYCwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmNyZWF0ZVRva2VuID0gY3JlYXRlVG9rZW47XG5hc3luYyBmdW5jdGlvbiBjcmVhdGUodG9rZW4sIHRva2VuX2lkLCBoZWFkZXJzKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VuLmFjY2Vzc190b2tlbn1gLFxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAuLi5oZWFkZXJzXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgdG9rZW5faWQgfSlcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCBmZXRjaChgJHtjb25maWdfMS5DT05GSUcuZ2V0KFwiUEFZUEFMX1JFU1RfSE9TVE5BTUVcIil9L3YxL2JpbGxpbmctYWdyZWVtZW50cy9hZ3JlZW1lbnRzYCwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZBVUxUX0NSRUFURV9CSUxMSU5HX0FHUkVFTUVOVF9UT0tFTl9QQVlMT0FEID0ge1xuICAgIGRlc2NyaXB0aW9uOiBcIkJpbGxpbmcgQWdyZWVtZW50XCIsXG4gICAgc2hpcHBpbmdfYWRkcmVzczoge1xuICAgICAgICBsaW5lMTogXCIxMzUwIE5vcnRoIEZpcnN0IFN0cmVldFwiLFxuICAgICAgICBjaXR5OiBcIlNhbiBKb3NlXCIsXG4gICAgICAgIHN0YXRlOiBcIkNBXCIsXG4gICAgICAgIHBvc3RhbF9jb2RlOiBcIjk1MTEyXCIsXG4gICAgICAgIGNvdW50cnlfY29kZTogXCJVU1wiLFxuICAgICAgICByZWNpcGllbnRfbmFtZTogXCJKb2huIERvZVwiXG4gICAgfSxcbiAgICBwYXllcjoge1xuICAgICAgICBwYXltZW50X21ldGhvZDogXCJQQVlQQUxcIlxuICAgIH0sXG4gICAgcGxhbjoge1xuICAgICAgICB0eXBlOiBcIk1FUkNIQU5UX0lOSVRJQVRFRF9CSUxMSU5HXCIsXG4gICAgICAgIG1lcmNoYW50X3ByZWZlcmVuY2VzOiB7XG4gICAgICAgICAgICByZXR1cm5fdXJsOiBcImh0dHBzOi8vZXhhbXBsZS5jb20vcmV0dXJuXCIsXG4gICAgICAgICAgICBjYW5jZWxfdXJsOiBcImh0dHBzOi8vZXhhbXBsZS5jb20vY2FuY2VsXCIsXG4gICAgICAgICAgICBub3RpZnlfdXJsOiBcImh0dHBzOi8vZXhhbXBsZS5jb20vbm90aWZ5XCIsXG4gICAgICAgICAgICBhY2NlcHRlZF9weW10X3R5cGU6IFwiSU5TVEFOVFwiLFxuICAgICAgICAgICAgc2tpcF9zaGlwcGluZ19hZGRyZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIGltbXV0YWJsZV9zaGlwcGluZ19hZGRyZXNzOiB0cnVlXG4gICAgICAgIH1cbiAgICB9XG59O1xuZXhwb3J0cy5ERUZBVUxUX0NSRUFURV9QQVlNRU5UX1dJVEhfQklMTElOR19BR1JFRU1FTlRfUEFZTE9BRCA9IHtcbiAgICBpbnRlbnQ6IFwic2FsZVwiLFxuICAgIHBheWVyOiB7XG4gICAgICAgIHBheW1lbnRfbWV0aG9kOiBcIlBBWVBBTFwiLFxuICAgICAgICBmdW5kaW5nX2luc3RydW1lbnRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYmlsbGluZzoge1xuICAgICAgICAgICAgICAgICAgICBiaWxsaW5nX2FncmVlbWVudF9pZDogXCJCLTUwVjgxMjE3NkgwNzgzNzQxXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHRyYW5zYWN0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBhbW91bnQ6IHtcbiAgICAgICAgICAgICAgICBjdXJyZW5jeTogXCJVU0RcIixcbiAgICAgICAgICAgICAgICB0b3RhbDogXCIxLjAwXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJQYXltZW50IHRyYW5zYWN0aW9uLlwiLFxuICAgICAgICAgICAgY3VzdG9tOiBcIlBheW1lbnQgY3VzdG9tIGZpZWxkLlwiLFxuICAgICAgICAgICAgbm90ZV90b19wYXllZTogXCJOb3RlIHRvIHBheWVlIGZpZWxkLlwiLFxuICAgICAgICAgICAgaW52b2ljZV9udW1iZXI6IFwiR0RBR0RTNTc1NFlFS1wiLFxuICAgICAgICAgICAgaXRlbV9saXN0OiB7XG4gICAgICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2t1OiBcInNrdWl0ZW1ObzFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiSXRlbU5vMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVGhlIGl0ZW0gZGVzY3JpcHRpb24uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eTogXCIxXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmljZTogXCIxLjAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeTogXCJVU0RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRheDogXCIwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9leGFtcGxlLmNvbS9cIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICByZWRpcmVjdF91cmxzOiB7XG4gICAgICAgIHJldHVybl91cmw6IFwiaHR0cHM6Ly9leGFtcGxlLmNvbS9yZXR1cm5cIixcbiAgICAgICAgY2FuY2VsX3VybDogXCJodHRwczovL2V4YW1wbGUuY29tL2NhbmNlbFwiXG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XG4gICAgcmVzdWx0W1wiZGVmYXVsdFwiXSA9IG1vZDtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHYxID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3YxXCIpKTtcbmV4cG9ydHMudjEgPSB2MTtcbmNvbnN0IHYyID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3YyXCIpKTtcbmV4cG9ydHMudjIgPSB2Mjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29uZmlnXzEgPSByZXF1aXJlKFwiLi4vLi4vY29uZmlnXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlKHRva2VuLCBkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IGRhdGEgJiYgT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID4gMFxuICAgICAgICA/IGRhdGFcbiAgICAgICAgOiBjb25zdGFudHNfMS5ERUZBVUxUX1BBWU1FTlRfQ1JFQVRFX1BBWUxPQUQ7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VuLmFjY2Vzc190b2tlbn1gLFxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAuLi5oZWFkZXJzXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2goYCR7Y29uZmlnXzEuQ09ORklHLmdldChcIlBBWVBBTF9SRVNUX0hPU1ROQU1FXCIpfS92MS9wYXltZW50cy9wYXltZW50YCwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbmFzeW5jIGZ1bmN0aW9uIGNhcHR1cmUodG9rZW4sIGlkLCBkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IGRhdGEgJiYgT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID4gMFxuICAgICAgICA/IGRhdGFcbiAgICAgICAgOiBjb25zdGFudHNfMS5ERUZBVUxUX1BBWU1FTlRfQ0FQVFVSRV9QQVlMT0FEO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0b2tlbi5hY2Nlc3NfdG9rZW59YCxcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgLi4uaGVhZGVyc1xuICAgICAgICB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKVxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IGZldGNoKGAke2NvbmZpZ18xLkNPTkZJRy5nZXQoXCJQQVlQQUxfUkVTVF9IT1NUTkFNRVwiKX0vdjEvcGF5bWVudHMvYXV0aG9yaXphdGlvbnMvJHtpZH0vY2FwdHVyZWAsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5jYXB0dXJlID0gY2FwdHVyZTtcbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZSh0b2tlbiwgaWQsIGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBwYXlsb2FkID0gZGF0YSAmJiBPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGggPiAwXG4gICAgICAgID8gZGF0YVxuICAgICAgICA6IGNvbnN0YW50c18xLkRFRkFVTFRfUEFZTUVOVF9VUERBVEVfUEFZTE9BRDtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VuLmFjY2Vzc190b2tlbn1gLFxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAuLi5oZWFkZXJzXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2goYCR7Y29uZmlnXzEuQ09ORklHLmdldChcIlBBWVBBTF9SRVNUX0hPU1ROQU1FXCIpfS92MS9wYXltZW50cy9wYXltZW50LyR7aWR9YCwgb3B0aW9ucyk7XG59XG5leHBvcnRzLnVwZGF0ZSA9IHVwZGF0ZTtcbmFzeW5jIGZ1bmN0aW9uIHJlZmVyZW5jZVRyYW5zYWN0aW9uKHRva2VuLCBiaWxsaW5nQWdyZWVtZW50SWQsIGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBwYXlsb2FkID0gZGF0YSAmJiBPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGggPiAwXG4gICAgICAgID8gZGF0YVxuICAgICAgICA6IGNvbnN0YW50c18xLkRFRkFVTFRfUkVGRVJFTkNFX1RSQU5TQUNUSU9OX1BBWUxPQUQ7XG4gICAgcGF5bG9hZC5wYXllci5mdW5kaW5nX2luc3RydW1lbnRzWzBdLmJpbGxpbmcuYmlsbGluZ19hZ3JlZW1lbnRfaWQgPSBiaWxsaW5nQWdyZWVtZW50SWQ7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VuLmFjY2Vzc190b2tlbn1gLFxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAuLi5oZWFkZXJzXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2goYCR7Y29uZmlnXzEuQ09ORklHLmdldChcIlBBWVBBTF9SRVNUX0hPU1ROQU1FXCIpfS92MS9wYXltZW50cy9wYXltZW50YCwgb3B0aW9ucyk7XG59XG5leHBvcnRzLnJlZmVyZW5jZVRyYW5zYWN0aW9uID0gcmVmZXJlbmNlVHJhbnNhY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuREVGQVVMVF9QQVlNRU5UX0NSRUFURV9QQVlMT0FEID0ge1xuICAgIGludGVudDogXCJzYWxlXCIsXG4gICAgcGF5ZXI6IHtcbiAgICAgICAgcGF5bWVudF9tZXRob2Q6IFwicGF5cGFsXCJcbiAgICB9LFxuICAgIHRyYW5zYWN0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBhbW91bnQ6IHtcbiAgICAgICAgICAgICAgICB0b3RhbDogXCIzMC4xMVwiLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBcIlVTRFwiLFxuICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3VidG90YWw6IFwiMzAuMDBcIixcbiAgICAgICAgICAgICAgICAgICAgdGF4OiBcIjAuMDdcIixcbiAgICAgICAgICAgICAgICAgICAgc2hpcHBpbmc6IFwiMC4wM1wiLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGluZ19mZWU6IFwiMS4wMFwiLFxuICAgICAgICAgICAgICAgICAgICBzaGlwcGluZ19kaXNjb3VudDogXCItMS4wMFwiLFxuICAgICAgICAgICAgICAgICAgICBpbnN1cmFuY2U6IFwiMC4wMVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBwYXltZW50IHRyYW5zYWN0aW9uIGRlc2NyaXB0aW9uLlwiLFxuICAgICAgICAgICAgY3VzdG9tOiBcIkVCQVlfRU1TXzkwMDQ4NjMwMDI0NDM1XCIsXG4gICAgICAgICAgICBpbnZvaWNlX251bWJlcjogXCI0ODc4NzU4OTY3M1wiLFxuICAgICAgICAgICAgcGF5bWVudF9vcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgYWxsb3dlZF9wYXltZW50X21ldGhvZDogXCJJTlNUQU5UX0ZVTkRJTkdfU09VUkNFXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzb2Z0X2Rlc2NyaXB0b3I6IFwiRUNISTU3ODY3ODZcIixcbiAgICAgICAgICAgIGl0ZW1fbGlzdDoge1xuICAgICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiaGF0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJCcm93biBoYXQuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eTogXCI1XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmljZTogXCIzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXg6IFwiMC4wMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2t1OiBcIjFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBcIlVTRFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiaGFuZGJhZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQmxhY2sgaGFuZGJhZy5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1YW50aXR5OiBcIjFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlOiBcIjE1XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXg6IFwiMC4wMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2t1OiBcInByb2R1Y3QzNFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVuY3k6IFwiVVNEXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgc2hpcHBpbmdfYWRkcmVzczoge1xuICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRfbmFtZTogXCJCcmlhbiBSb2JpbnNvblwiLFxuICAgICAgICAgICAgICAgICAgICBsaW5lMTogXCI0dGggRmxvb3JcIixcbiAgICAgICAgICAgICAgICAgICAgbGluZTI6IFwiVW5pdCAjMzRcIixcbiAgICAgICAgICAgICAgICAgICAgY2l0eTogXCJTYW4gSm9zZVwiLFxuICAgICAgICAgICAgICAgICAgICBjb3VudHJ5X2NvZGU6IFwiVVNcIixcbiAgICAgICAgICAgICAgICAgICAgcG9zdGFsX2NvZGU6IFwiOTUxMzFcIixcbiAgICAgICAgICAgICAgICAgICAgcGhvbmU6IFwiMDExODYyMjEyMzQ1Njc4XCIsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiBcIkNBXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgIG5vdGVfdG9fcGF5ZXI6IFwiQ29udGFjdCB1cyBmb3IgYW55IHF1ZXN0aW9ucyBvbiB5b3VyIG9yZGVyLlwiLFxuICAgIHJlZGlyZWN0X3VybHM6IHtcbiAgICAgICAgcmV0dXJuX3VybDogXCJodHRwczovL2V4YW1wbGUuY29tL3JldHVyblwiLFxuICAgICAgICBjYW5jZWxfdXJsOiBcImh0dHBzOi8vZXhhbXBsZS5jb20vY2FuY2VsXCJcbiAgICB9XG59O1xuZXhwb3J0cy5ERUZBVUxUX1BBWU1FTlRfQ0FQVFVSRV9QQVlMT0FEID0ge1xuICAgIGFtb3VudDoge1xuICAgICAgICB2YWx1ZTogXCIxLjk5XCIsXG4gICAgICAgIGN1cnJlbmN5X2NvZGU6IFwiVVNEXCJcbiAgICB9LFxuICAgIGZpbmFsX2NhcHR1cmU6IHRydWVcbn07XG5leHBvcnRzLkRFRkFVTFRfUEFZTUVOVF9VUERBVEVfUEFZTE9BRCA9IFtcbiAgICB7XG4gICAgICAgIG9wOiBcInJlcGxhY2VcIixcbiAgICAgICAgcGF0aDogXCIvdHJhbnNhY3Rpb25zLzAvYW1vdW50XCIsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB0b3RhbDogXCIzNS4xMVwiLFxuICAgICAgICAgICAgY3VycmVuY3k6IFwiVVNEXCIsXG4gICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgICAgc3VidG90YWw6IFwiMzAuMDBcIixcbiAgICAgICAgICAgICAgICB0YXg6IFwiMC4wN1wiLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nOiBcIjUuMDNcIixcbiAgICAgICAgICAgICAgICBoYW5kbGluZ19mZWU6IFwiMS4wMFwiLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nX2Rpc2NvdW50OiBcIi0xLjAwXCIsXG4gICAgICAgICAgICAgICAgaW5zdXJhbmNlOiBcIjAuMDFcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIG9wOiBcImFkZFwiLFxuICAgICAgICBwYXRoOiBcIi90cmFuc2FjdGlvbnMvMC9pdGVtX2xpc3Qvc2hpcHBpbmdfYWRkcmVzc1wiLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgcmVjaXBpZW50X25hbWU6IFwiQW5uYSBHcnVuZWJlcmdcIixcbiAgICAgICAgICAgIGxpbmUxOiBcIjEwMSBtYWluIHN0XCIsXG4gICAgICAgICAgICBjaXR5OiBcIkJldmVybHkgSGlsbHNcIixcbiAgICAgICAgICAgIHBvc3RhbF9jb2RlOiBcIjkwMjEwXCIsXG4gICAgICAgICAgICBjb3VudHJ5X2NvZGU6IFwiVVNcIixcbiAgICAgICAgICAgIHN0YXRlOiBcIkNBXCJcbiAgICAgICAgfVxuICAgIH1cbl07XG5leHBvcnRzLkRFRkFVTFRfUkVGRVJFTkNFX1RSQU5TQUNUSU9OX1BBWUxPQUQgPSB7XG4gICAgaW50ZW50OiBcInNhbGVcIixcbiAgICBwYXllcjoge1xuICAgICAgICBwYXltZW50X21ldGhvZDogXCJQQVlQQUxcIixcbiAgICAgICAgZnVuZGluZ19pbnN0cnVtZW50czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJpbGxpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgYmlsbGluZ19hZ3JlZW1lbnRfaWQ6IFwiQi01MFY4MTIxNzZIMDc4Mzc0MVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB0cmFuc2FjdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgYW1vdW50OiB7XG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IFwiVVNEXCIsXG4gICAgICAgICAgICAgICAgdG90YWw6IFwiMS4wMFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29uZmlnXzEgPSByZXF1aXJlKFwiLi4vLi4vY29uZmlnXCIpO1xuYXN5bmMgZnVuY3Rpb24gY2FwdHVyZSh0b2tlbiwgaWQsIGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBwYXlsb2FkID0gZGF0YSB8fCB7fTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW4uYWNjZXNzX3Rva2VufWAsXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIC4uLmhlYWRlcnNcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZClcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCBmZXRjaChgJHtjb25maWdfMS5DT05GSUcuZ2V0KFwiUEFZUEFMX1JFU1RfSE9TVE5BTUVcIil9L3YyL3BheW1lbnRzL2F1dGhvcml6YXRpb25zLyR7aWR9L2NhcHR1cmVgLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuY2FwdHVyZSA9IGNhcHR1cmU7XG5hc3luYyBmdW5jdGlvbiByZWZ1bmQodG9rZW4sIGlkLCBkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IGRhdGEgfHwge307XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VuLmFjY2Vzc190b2tlbn1gLFxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAuLi5oZWFkZXJzXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2goYCR7Y29uZmlnXzEuQ09ORklHLmdldChcIlBBWVBBTF9SRVNUX0hPU1ROQU1FXCIpfS92Mi9wYXltZW50cy9jYXB0dXJlcy8ke2lkfS9yZWZ1bmRgLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMucmVmdW5kID0gcmVmdW5kO1xuYXN5bmMgZnVuY3Rpb24gY2FuY2VsKHRva2VuLCBpZCwgaGVhZGVycykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0b2tlbi5hY2Nlc3NfdG9rZW59YCxcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgLi4uaGVhZGVyc1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2goYCR7Y29uZmlnXzEuQ09ORklHLmdldChcIlBBWVBBTF9SRVNUX0hPU1ROQU1FXCIpfS92Mi9wYXltZW50cy9hdXRob3JpemF0aW9ucy8ke2lkfS92b2lkYCwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmNhbmNlbCA9IGNhbmNlbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29uZmlnXzEgPSByZXF1aXJlKFwiLi4vY29uZmlnXCIpO1xuYXN5bmMgZnVuY3Rpb24gbGlzdCh0b2tlbikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VuLmFjY2Vzc190b2tlbn1gLFxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IGZldGNoKGAke2NvbmZpZ18xLkNPTkZJRy5nZXQoXCJQQVlQQUxfUkVTVF9IT1NUTkFNRVwiKX0vdjEvbm90aWZpY2F0aW9ucy93ZWJob29rc2AsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5saXN0ID0gbGlzdDtcbmFzeW5jIGZ1bmN0aW9uIGxpc3RFdmVudFR5cGVzKHRva2VuKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW4uYWNjZXNzX3Rva2VufWAsXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2goYCR7Y29uZmlnXzEuQ09ORklHLmdldChcIlBBWVBBTF9SRVNUX0hPU1ROQU1FXCIpfS92MS9ub3RpZmljYXRpb25zL3dlYmhvb2tzLWV2ZW50LXR5cGVzYCwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmxpc3RFdmVudFR5cGVzID0gbGlzdEV2ZW50VHlwZXM7XG5hc3luYyBmdW5jdGlvbiBjcmVhdGUodG9rZW4sIHVybCwgZXZlbnRfdHlwZXMpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW4uYWNjZXNzX3Rva2VufWAsXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHVybCwgZXZlbnRfdHlwZXMgfSlcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCBmZXRjaChgJHtjb25maWdfMS5DT05GSUcuZ2V0KFwiUEFZUEFMX1JFU1RfSE9TVE5BTUVcIil9L3YxL25vdGlmaWNhdGlvbnMvd2ViaG9va3NgLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuY3JlYXRlID0gY3JlYXRlO1xuYXN5bmMgZnVuY3Rpb24gcmVtb3ZlKHRva2VuLCBpZCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VuLmFjY2Vzc190b2tlbn1gLFxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IGZldGNoKGAke2NvbmZpZ18xLkNPTkZJRy5nZXQoXCJQQVlQQUxfUkVTVF9IT1NUTkFNRVwiKX0vdjEvbm90aWZpY2F0aW9ucy93ZWJob29rcy8ke2lkfWAsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5yZW1vdmUgPSByZW1vdmU7XG5hc3luYyBmdW5jdGlvbiB2ZXJpZnkodG9rZW4sIHdlYmhvb2tfaWQsIGhlYWRlcnMsIHdlYmhvb2tfZXZlbnQpIHtcbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgICB0cmFuc21pc3Npb25faWQ6IGhlYWRlcnNbXCJwYXlwYWwtdHJhbnNtaXNzaW9uLWlkXCJdLFxuICAgICAgICB0cmFuc21pc3Npb25fdGltZTogaGVhZGVyc1tcInBheXBhbC10cmFuc21pc3Npb24tdGltZVwiXSxcbiAgICAgICAgY2VydF91cmw6IGhlYWRlcnNbXCJwYXlwYWwtY2VydC11cmxcIl0sXG4gICAgICAgIGF1dGhfYWxnbzogaGVhZGVyc1tcInBheXBhbC1hdXRoLWFsZ29cIl0sXG4gICAgICAgIHRyYW5zbWlzc2lvbl9zaWc6IGhlYWRlcnNbXCJwYXlwYWwtdHJhbnNtaXNzaW9uLXNpZ1wiXSxcbiAgICAgICAgd2ViaG9va19pZCxcbiAgICAgICAgd2ViaG9va19ldmVudFxuICAgIH07XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VuLmFjY2Vzc190b2tlbn1gLFxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZClcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCBmZXRjaChgJHtjb25maWdfMS5DT05GSUcuZ2V0KFwiUEFZUEFMX1JFU1RfSE9TVE5BTUVcIil9L3YxL25vdGlmaWNhdGlvbnMvdmVyaWZ5LXdlYmhvb2stc2lnbmF0dXJlYCwgb3B0aW9ucyk7XG59XG5leHBvcnRzLnZlcmlmeSA9IHZlcmlmeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgb2F1dGhfMSA9IHJlcXVpcmUoXCIuLi9vYXV0aFwiKTtcbmxldCBhY2Nlc3NUb2tlbjtcbmFzeW5jIGZ1bmN0aW9uIGFjY2Vzc1Rva2VuTWlkZGxld2FyZShyZXEsIHJlcywgbmV4dCkge1xuICAgIGlmICghYWNjZXNzVG9rZW4gfHwgYWNjZXNzVG9rZW4uZXhwaXJlc19hdCA+IERhdGUubm93KCkpIHtcbiAgICAgICAgYWNjZXNzVG9rZW4gPSBhd2FpdCBvYXV0aF8xLmNyZWF0ZUFjY2Vzc1Rva2VuKCk7XG4gICAgfVxuICAgIHJlcS5wYXlwYWxBY2Nlc3NUb2tlbiA9IGFjY2Vzc1Rva2VuO1xuICAgIHJldHVybiBuZXh0KCk7XG59XG5leHBvcnRzLmFjY2Vzc1Rva2VuTWlkZGxld2FyZSA9IGFjY2Vzc1Rva2VuTWlkZGxld2FyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcbiAgICByZXN1bHRbXCJkZWZhdWx0XCJdID0gbW9kO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdjEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vdjFcIikpO1xuZXhwb3J0cy52MSA9IHYxO1xuY29uc3QgdjIgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vdjJcIikpO1xuZXhwb3J0cy52MiA9IHYyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb25maWdfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb25maWdcIik7XG5hc3luYyBmdW5jdGlvbiB0cmFja0J5SWQodG9rZW4sIGlkLCBoZWFkZXJzKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW4uYWNjZXNzX3Rva2VufWAsXG4gICAgICAgICAgICAuLi5oZWFkZXJzXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCBmZXRjaChgJHtjb25maWdfMS5DT05GSUcuZ2V0KFwiUEFZUEFMX1JFU1RfSE9TVE5BTUVcIil9L3YxL2N1c3RvbWVyL3BhcnRuZXJzLyR7Y29uZmlnXzEuQ09ORklHLmdldChcIlBBWVBBTF9BQ0NPVU5UX0lEXCIpfS9tZXJjaGFudC1pbnRlZ3JhdGlvbnM/dHJhY2tpbmdfaWQ9JHtpZH1gLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMudHJhY2tCeUlkID0gdHJhY2tCeUlkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xuICAgIHJlc3VsdFtcImRlZmF1bHRcIl0gPSBtb2Q7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBDdXN0b21lciA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9jdXN0b21lclwiKSk7XG5leHBvcnRzLkN1c3RvbWVyID0gQ3VzdG9tZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvbmZpZ18xID0gcmVxdWlyZShcIi4uLy4uL2NvbmZpZ1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxcIik7XG5hc3luYyBmdW5jdGlvbiBjcmVhdGUodG9rZW4sIHRyYWNraW5nSWQsIGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBwYXlsb2FkID0gZGF0YSAmJiBPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGggPiAwXG4gICAgICAgID8gZGF0YVxuICAgICAgICA6IGNvbnN0YW50c18xLkRFRkFVTFRfQ1VTVE9NRVJfQ1JFQVRFX1BBWUxPQUQ7XG4gICAgcGF5bG9hZC50cmFja2luZ19pZCA9IHRyYWNraW5nSWQgPyB0cmFja2luZ0lkIDogdXRpbF8xLnJhbmRvbVN0cmluZygpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0b2tlbi5hY2Nlc3NfdG9rZW59YCxcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgLi4uaGVhZGVyc1xuICAgICAgICB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKVxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IGZldGNoKGAke2NvbmZpZ18xLkNPTkZJRy5nZXQoXCJQQVlQQUxfUkVTVF9IT1NUTkFNRVwiKX0vdjIvY3VzdG9tZXIvcGFydG5lci1yZWZlcnJhbHNgLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuY3JlYXRlID0gY3JlYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VzdG9tZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpbnRlcmZhY2VzXzEgPSByZXF1aXJlKFwiLi9pbnRlcmZhY2VzXCIpO1xuZXhwb3J0cy5ERUZBVUxUX0NVU1RPTUVSX0NSRUFURV9QQVlMT0FEID0ge1xuICAgIG9wZXJhdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcIkFQSV9JTlRFR1JBVElPTlwiLFxuICAgICAgICAgICAgYXBpX2ludGVncmF0aW9uX3ByZWZlcmVuY2U6IHtcbiAgICAgICAgICAgICAgICByZXN0X2FwaV9pbnRlZ3JhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBpbnRlZ3JhdGlvbl9tZXRob2Q6IFwiUEFZUEFMXCIsXG4gICAgICAgICAgICAgICAgICAgIGludGVncmF0aW9uX3R5cGU6IFwiVEhJUkRfUEFSVFlcIixcbiAgICAgICAgICAgICAgICAgICAgdGhpcmRfcGFydHlfZGV0YWlsczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXM6IFtcIlBBWU1FTlRcIiwgXCJSRUZVTkRcIl1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgcHJvZHVjdHM6IFtpbnRlcmZhY2VzXzEuUHJvZHVjdE5hbWUuRVhQUkVTU19DSEVDS09VVF0sXG4gICAgbGVnYWxfY29uc2VudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogXCJTSEFSRV9EQVRBX0NPTlNFTlRcIixcbiAgICAgICAgICAgIGdyYW50ZWQ6IHRydWVcbiAgICAgICAgfVxuICAgIF1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUHJvZHVjdE5hbWU7XG4oZnVuY3Rpb24gKFByb2R1Y3ROYW1lKSB7XG4gICAgUHJvZHVjdE5hbWVbXCJFWFBSRVNTX0NIRUNLT1VUXCJdID0gXCJFWFBSRVNTX0NIRUNLT1VUXCI7XG4gICAgUHJvZHVjdE5hbWVbXCJQUFBMVVNcIl0gPSBcIlBQUExVU1wiO1xuICAgIFByb2R1Y3ROYW1lW1wiV0VCU0lURV9QQVlNRU5UX1BST1wiXSA9IFwiV0VCU0lURV9QQVlNRU5UX1BST1wiO1xuICAgIFByb2R1Y3ROYW1lW1wiUFBDUFwiXSA9IFwiUFBDUFwiO1xufSkoUHJvZHVjdE5hbWUgPSBleHBvcnRzLlByb2R1Y3ROYW1lIHx8IChleHBvcnRzLlByb2R1Y3ROYW1lID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZXMuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==