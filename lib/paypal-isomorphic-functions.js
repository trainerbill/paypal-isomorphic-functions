!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.paypalFunctions=e():t.paypalFunctions=e()}(window,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=5)}([function(t,e,r){"use strict";(function(t){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=n(r(14)),i=r(19);e.CONFIG=new Map,i.isNode?(e.CONFIG.set("PAYPAL_CLIENT_ID",t.env.PAYPAL_CLIENT_ID),e.CONFIG.set("PAYPAL_CLIENT_SECRET",t.env.PAYPAL_CLIENT_SECRET),e.CONFIG.set("PAYPAL_ENVIRONMENT",t.env.PAYPAL_ENVIRONMENT),e.CONFIG.set("PAYPAL_ACCOUNT_ID",t.env.PAYPAL_ACCOUNT_ID),e.CONFIG.set("PAYPAL_REST_BEARER",o.default(`${t.env.PAYPAL_CLIENT_ID}:${t.env.PAYPAL_CLIENT_SECRET}`))):i.isBrowser&&(e.CONFIG.set("PAYPAL_CLIENT_ID",window.localStorage.getItem("PAYPAL_CLIENT_ID")),e.CONFIG.set("PAYPAL_CLIENT_SECRET",window.localStorage.getItem("PAYPAL_CLIENT_SECRET")),e.CONFIG.set("PAYPAL_ENVIRONMENT",window.localStorage.getItem("PAYPAL_ENVIRONMENT")),e.CONFIG.set("PAYPAL_ACCOUNT_ID",window.localStorage.getItem("PAYPAL_ACCOUNT_ID")),e.CONFIG.set("PAYPAL_REST_BEARER",window.btoa(`${window.localStorage.getItem("PAYPAL_CLIENT_ID")}:${window.localStorage.getItem("PAYPAL_CLIENT_SECRET")}`))),e.CONFIG.set("PAYPAL_REST_HOSTNAME","production"===e.CONFIG.get("PAYPAL_ENVIRONMENT")?"https://api.paypal.com":"https://api.sandbox.paypal.com")}).call(this,r(1))},function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(t){n=s}}();var u,c=[],f=!1,h=-1;function l(){f&&u&&(f=!1,u.length?c=u.concat(c):h=-1,c.length&&p())}function p(){if(!f){var t=a(l);f=!0;for(var e=c.length;e;){for(u=c,c=[];++h<e;)u&&u[h].run();h=-1,e=c.length}u=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new d(t,e)),1!==c.length||f||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.randomString=function(){return(1e18*Math.random()).toString(36)},e.randomAmount=function(){return Math.floor(100*Math.random())+1},e.randomAmountasString=function(){return`${Math.floor(100*Math.random())+1}.00`}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0);e.createAccessToken=async function(){const t={method:"POST",headers:{Accept:"application/json","Accept-Language":"en_US",Authorization:`Basic ${n.CONFIG.get("PAYPAL_REST_BEARER")}`,"Content-Type":"application/x-www-form-urlencoded"},body:"grant_type=client_credentials&response_type=token"},e=await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/oauth2/token`,t),r=await e.json();return r.expires_at=Date.now()+r.expires_in,r},e.createAccessTokenFromCode=async function(t){const e={method:"POST",headers:{Accept:"application/json","Accept-Language":"en_US",Authorization:`Basic ${n.CONFIG.get("PAYPAL_REST_BEARER")}`,"Content-Type":"application/x-www-form-urlencoded"},body:`grant_type=authorization_code&code=${t}`},r=await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/oauth2/token`,e),o=await r.json();return o.expires_at=Date.now()+o.expires_in,o},e.getUserInfo=async function(t){const e={method:"GET",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json"}};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/identity/oauth2/userinfo?schema=paypalv1.1`,e)}},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0}),r(6),r(11);const o=n(r(3));e.Utils=o;const i=n(r(12));e.Orders=i;const s=n(r(23));e.BillingAgreements=s;const a=n(r(4));e.Oauth=a;const u=n(r(25));e.Payments=u;const c=n(r(29));e.Webhooks=c;const f=n(r(30));e.Middleware=f;const h=n(r(31));e.Partner=h;const l=n(r(37));e.Risk=l;const p=n(r(38));e.Tracking=p},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(7),r(9)},function(t,e,r){r(8),t.exports=self.fetch.bind(self)},function(t,e,r){"use strict";r.r(e),r.d(e,"Headers",(function(){return c})),r.d(e,"Request",(function(){return _})),r.d(e,"Response",(function(){return g})),r.d(e,"DOMException",(function(){return v})),r.d(e,"fetch",(function(){return E}));var n={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(n.arrayBuffer)var o=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],i=ArrayBuffer.isView||function(t){return t&&o.indexOf(Object.prototype.toString.call(t))>-1};function s(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function a(t){return"string"!=typeof t&&(t=String(t)),t}function u(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return n.iterable&&(e[Symbol.iterator]=function(){return e}),e}function c(t){this.map={},t instanceof c?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function f(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function h(t){return new Promise((function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}}))}function l(t){var e=new FileReader,r=h(e);return e.readAsArrayBuffer(t),r}function p(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function d(){return this.bodyUsed=!1,this._initBody=function(t){var e;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:n.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:n.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():n.arrayBuffer&&n.blob&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=p(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):n.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||i(t))?this._bodyArrayBuffer=p(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n.blob&&(this.blob=function(){var t=f(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?f(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(l)}),this.text=function(){var t,e,r,n=f(this);if(n)return n;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,r=h(e),e.readAsText(t),r;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},n.formData&&(this.formData=function(){return this.text().then(A)}),this.json=function(){return this.text().then(JSON.parse)},this}c.prototype.append=function(t,e){t=s(t),e=a(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},c.prototype.delete=function(t){delete this.map[s(t)]},c.prototype.get=function(t){return t=s(t),this.has(t)?this.map[t]:null},c.prototype.has=function(t){return this.map.hasOwnProperty(s(t))},c.prototype.set=function(t,e){this.map[s(t)]=a(e)},c.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},c.prototype.keys=function(){var t=[];return this.forEach((function(e,r){t.push(r)})),u(t)},c.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),u(t)},c.prototype.entries=function(){var t=[];return this.forEach((function(e,r){t.push([r,e])})),u(t)},n.iterable&&(c.prototype[Symbol.iterator]=c.prototype.entries);var y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function _(t,e){var r,n,o=(e=e||{}).body;if(t instanceof _){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new c(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,o||null==t._bodyInit||(o=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new c(e.headers)),this.method=(r=e.method||this.method||"GET",n=r.toUpperCase(),y.indexOf(n)>-1?n:r),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function A(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}})),e}function g(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new c(e.headers),this.url=e.url||"",this._initBody(t)}_.prototype.clone=function(){return new _(this,{body:this._bodyInit})},d.call(_.prototype),d.call(g.prototype),g.prototype.clone=function(){return new g(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new c(this.headers),url:this.url})},g.error=function(){var t=new g(null,{status:0,statusText:""});return t.type="error",t};var m=[301,302,303,307,308];g.redirect=function(t,e){if(-1===m.indexOf(e))throw new RangeError("Invalid status code");return new g(null,{status:e,headers:{location:t}})};var v=self.DOMException;try{new v}catch(t){(v=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),v.prototype.constructor=v}function E(t,e){return new Promise((function(r,o){var i=new _(t,e);if(i.signal&&i.signal.aborted)return o(new v("Aborted","AbortError"));var s=new XMLHttpRequest;function a(){s.abort()}s.onload=function(){var t,e,n={status:s.status,statusText:s.statusText,headers:(t=s.getAllResponseHeaders()||"",e=new c,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}})),e)};n.url="responseURL"in s?s.responseURL:n.headers.get("X-Request-URL");var o="response"in s?s.response:s.responseText;r(new g(o,n))},s.onerror=function(){o(new TypeError("Network request failed"))},s.ontimeout=function(){o(new TypeError("Network request failed"))},s.onabort=function(){o(new v("Aborted","AbortError"))},s.open(i.method,i.url,!0),"include"===i.credentials?s.withCredentials=!0:"omit"===i.credentials&&(s.withCredentials=!1),"responseType"in s&&n.blob&&(s.responseType="blob"),i.headers.forEach((function(t,e){s.setRequestHeader(e,t)})),i.signal&&(i.signal.addEventListener("abort",a),s.onreadystatechange=function(){4===s.readyState&&i.signal.removeEventListener("abort",a)}),s.send(void 0===i._bodyInit?null:i._bodyInit)}))}E.polyfill=!0,self.fetch||(self.fetch=E,self.Headers=c,self.Request=_,self.Response=g)},function(t,e,r){"use strict";t.exports=r(10).polyfill()},function(t,e,r){(function(e,r){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */var n;n=function(){"use strict";function t(t){return"function"==typeof t}var n=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},o=0,i=void 0,s=void 0,a=function(t,e){d[o]=t,d[o+1]=e,2===(o+=2)&&(s?s(y):v())},u="undefined"!=typeof window?window:void 0,c=u||{},f=c.MutationObserver||c.WebKitMutationObserver,h="undefined"==typeof self&&void 0!==e&&"[object process]"==={}.toString.call(e),l="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function p(){var t=setTimeout;return function(){return t(y,1)}}var d=new Array(1e3);function y(){for(var t=0;t<o;t+=2)(0,d[t])(d[t+1]),d[t]=void 0,d[t+1]=void 0;o=0}var _,A,g,m,v=void 0;function E(t,e){var r=this,n=new this.constructor(P);void 0===n[b]&&D(n);var o=r._state;if(o){var i=arguments[o-1];a((function(){return Y(o,n,i,r._result)}))}else B(r,n,t,e);return n}function T(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(P);return N(e,t),e}h?v=function(){return e.nextTick(y)}:f?(A=0,g=new f(y),m=document.createTextNode(""),g.observe(m,{characterData:!0}),v=function(){m.data=A=++A%2}):l?((_=new MessageChannel).port1.onmessage=y,v=function(){return _.port2.postMessage(0)}):v=void 0===u?function(){try{var t=Function("return this")().require("vertx");return void 0!==(i=t.runOnLoop||t.runOnContext)?function(){i(y)}:p()}catch(t){return p()}}():p();var b=Math.random().toString(36).substring(2);function P(){}var w=void 0,O=1,S=2;function R(e,r,n){r.constructor===e.constructor&&n===E&&r.constructor.resolve===T?function(t,e){e._state===O?L(t,e._result):e._state===S?I(t,e._result):B(e,void 0,(function(e){return N(t,e)}),(function(e){return I(t,e)}))}(e,r):void 0===n?L(e,r):t(n)?function(t,e,r){a((function(t){var n=!1,o=function(t,e,r,n){try{t.call(e,r,n)}catch(t){return t}}(r,e,(function(r){n||(n=!0,e!==r?N(t,r):L(t,r))}),(function(e){n||(n=!0,I(t,e))}),t._label);!n&&o&&(n=!0,I(t,o))}),t)}(e,r,n):L(e,r)}function N(t,e){if(t===e)I(t,new TypeError("You cannot resolve a promise with itself"));else if(o=typeof(n=e),null===n||"object"!==o&&"function"!==o)L(t,e);else{var r=void 0;try{r=e.then}catch(e){return void I(t,e)}R(t,e,r)}var n,o}function C(t){t._onerror&&t._onerror(t._result),U(t)}function L(t,e){t._state===w&&(t._result=e,t._state=O,0!==t._subscribers.length&&a(U,t))}function I(t,e){t._state===w&&(t._state=S,t._result=e,a(C,t))}function B(t,e,r,n){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+O]=r,o[i+S]=n,0===i&&t._state&&a(U,t)}function U(t){var e=t._subscribers,r=t._state;if(0!==e.length){for(var n=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)n=e[s],o=e[s+r],n?Y(r,n,o,i):o(i);t._subscribers.length=0}}function Y(e,r,n,o){var i=t(n),s=void 0,a=void 0,u=!0;if(i){try{s=n(o)}catch(t){u=!1,a=t}if(r===s)return void I(r,new TypeError("A promises callback cannot return that same promise."))}else s=o;r._state!==w||(i&&u?N(r,s):!1===u?I(r,a):e===O?L(r,s):e===S&&I(r,s))}var M=0;function D(t){t[b]=M++,t._state=void 0,t._result=void 0,t._subscribers=[]}var j=function(){function t(t,e){this._instanceConstructor=t,this.promise=new t(P),this.promise[b]||D(this.promise),n(e)?(this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?L(this.promise,this._result):(this.length=this.length||0,this._enumerate(e),0===this._remaining&&L(this.promise,this._result))):I(this.promise,new Error("Array Methods must be provided an Array"))}return t.prototype._enumerate=function(t){for(var e=0;this._state===w&&e<t.length;e++)this._eachEntry(t[e],e)},t.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,n=r.resolve;if(n===T){var o=void 0,i=void 0,s=!1;try{o=t.then}catch(t){s=!0,i=t}if(o===E&&t._state!==w)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(r===k){var a=new r(P);s?I(a,i):R(a,t,o),this._willSettleAt(a,e)}else this._willSettleAt(new r((function(e){return e(t)})),e)}else this._willSettleAt(n(t),e)},t.prototype._settledAt=function(t,e,r){var n=this.promise;n._state===w&&(this._remaining--,t===S?I(n,r):this._result[e]=r),0===this._remaining&&L(n,this._result)},t.prototype._willSettleAt=function(t,e){var r=this;B(t,void 0,(function(t){return r._settledAt(O,e,t)}),(function(t){return r._settledAt(S,e,t)}))},t}(),k=function(){function e(t){this[b]=M++,this._result=this._state=void 0,this._subscribers=[],P!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof e?function(t,e){try{e((function(e){N(t,e)}),(function(e){I(t,e)}))}catch(e){I(t,e)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return e.prototype.catch=function(t){return this.then(null,t)},e.prototype.finally=function(e){var r=this.constructor;return t(e)?this.then((function(t){return r.resolve(e()).then((function(){return t}))}),(function(t){return r.resolve(e()).then((function(){throw t}))})):this.then(e,e)},e}();return k.prototype.then=E,k.all=function(t){return new j(this,t).promise},k.race=function(t){var e=this;return n(t)?new e((function(r,n){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(r,n)})):new e((function(t,e){return e(new TypeError("You must pass an array to race."))}))},k.resolve=T,k.reject=function(t){var e=new this(P);return I(e,t),e},k._setScheduler=function(t){s=t},k._setAsap=function(t){a=t},k._asap=a,k.polyfill=function(){var t=void 0;if(void 0!==r)t=r;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var n=null;try{n=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===n&&!e.cast)return}t.Promise=k},k.Promise=k,k},t.exports=n()}).call(this,r(1),r(2))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=n(r(13));e.v1=o;const i=n(r(21));e.v2=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0),o=r(20);e.create=async function(t,e,r){const i=e&&Object.keys(e).length>0?e:o.DEFAULT_CREATE_ORDER_PAYLOAD,s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/checkout/orders`,s)}},function(t,e,r){(function(e){!function(){"use strict";t.exports=function(t){return(t instanceof e?t:e.from(t.toString(),"binary")).toString("base64")}}()}).call(this,r(15).Buffer)},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(16),o=r(17),i=r(18);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return c(this,t,e,r)}function c(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=l(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(e,r),o=(t=a(t,n)).write(e,r);o!==n&&(t=t.slice(0,o));return t}(t,e,r):function(t,e){if(u.isBuffer(e)){var r=0|p(e.length);return 0===(t=a(t,r)).length?t:(e.copy(t,0,0,r),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?a(t,0):l(t,e);if("Buffer"===e.type&&i(e.data))return l(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function f(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(f(e),t=a(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function l(t,e){var r=e.length<0?0:0|p(e.length);t=a(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function p(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return x(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return $(t).length;default:if(n)return x(t).length;e=(""+e).toLowerCase(),n=!0}}function y(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return C(this,e,r);case"utf8":case"utf-8":return O(this,e,r);case"ascii":return R(this,e,r);case"latin1":case"binary":return N(this,e,r);case"base64":return w(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return L(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function _(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function A(t,e,r,n,o){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(o)return-1;r=t.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:g(t,e,r,n,o);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):g(t,[e],r,n,o);throw new TypeError("val must be string, number or Buffer")}function g(t,e,r,n,o){var i,s=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,r/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(o){var f=-1;for(i=r;i<a;i++)if(c(t,i)===c(e,-1===f?0:i-f)){if(-1===f&&(f=i),i-f+1===u)return f*s}else-1!==f&&(i-=i-f),f=-1}else for(r+u>a&&(r=a-u),i=r;i>=0;i--){for(var h=!0,l=0;l<u;l++)if(c(t,i+l)!==c(e,l)){h=!1;break}if(h)return i}return-1}function m(t,e,r,n){r=Number(r)||0;var o=t.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[r+s]=a}return s}function v(t,e,r,n){return G(x(e,t.length-r),t,r,n)}function E(t,e,r,n){return G(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function T(t,e,r,n){return E(t,e,r,n)}function b(t,e,r,n){return G($(e),t,r,n)}function P(t,e,r,n){return G(function(t,e){for(var r,n,o,i=[],s=0;s<t.length&&!((e-=2)<0);++s)r=t.charCodeAt(s),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(e,t.length-r),t,r,n)}function w(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function O(t,e,r){r=Math.min(t.length,r);for(var n=[],o=e;o<r;){var i,s,a,u,c=t[o],f=null,h=c>239?4:c>223?3:c>191?2:1;if(o+h<=r)switch(h){case 1:c<128&&(f=c);break;case 2:128==(192&(i=t[o+1]))&&(u=(31&c)<<6|63&i)>127&&(f=u);break;case 3:i=t[o+1],s=t[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(f=u);break;case 4:i=t[o+1],s=t[o+2],a=t[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(f=u)}null===f?(f=65533,h=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),o+=h}return function(t){var e=t.length;if(e<=S)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=S));return r}(n)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,r){return c(null,t,e,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,r){return function(t,e,r,n){return f(e),e<=0?a(t,e):void 0!==r?"string"==typeof n?a(t,e).fill(r,n):a(t,e).fill(r):a(t,e)}(null,t,e,r)},u.allocUnsafe=function(t){return h(null,t)},u.allocUnsafeSlow=function(t){return h(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),o=0;for(r=0;r<t.length;++r){var s=t[r];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,o),o+=s.length}return n},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)_(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)_(this,e,e+3),_(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)_(this,e,e+7),_(this,e+1,e+6),_(this,e+2,e+5),_(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?O(this,0,t):y.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,r,n,o){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),e<0||r>t.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&e>=r)return 0;if(n>=o)return-1;if(e>=r)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0),a=Math.min(i,s),c=this.slice(n,o),f=t.slice(e,r),h=0;h<a;++h)if(c[h]!==f[h]){i=c[h],s=f[h];break}return i<s?-1:s<i?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return A(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return A(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-e;if((void 0===r||r>o)&&(r=o),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return m(this,t,e,r);case"utf8":case"utf-8":return v(this,t,e,r);case"ascii":return E(this,t,e,r);case"latin1":case"binary":return T(this,t,e,r);case"base64":return b(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,e,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function R(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(127&t[o]);return n}function N(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(t[o]);return n}function C(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=e;i<r;++i)o+=F(t[i]);return o}function L(t,e,r){for(var n=t.slice(e,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function I(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function B(t,e,r,n,o,i){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function U(t,e,r,n){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-r,2);o<i;++o)t[r+o]=(e&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function Y(t,e,r,n){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-r,4);o<i;++o)t[r+o]=e>>>8*(n?o:3-o)&255}function M(t,e,r,n,o,i){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function D(t,e,r,n,i){return i||M(t,0,r,4),o.write(t,e,r,n,23,4),r+4}function j(t,e,r,n,i){return i||M(t,0,r,8),o.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=u.prototype;else{var o=e-t;r=new u(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+t]}return r},u.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||I(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n},u.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||I(t,e,this.length);for(var n=this[t+--e],o=1;e>0&&(o*=256);)n+=this[t+--e]*o;return n},u.prototype.readUInt8=function(t,e){return e||I(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||I(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||I(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||I(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||I(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||I(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||I(t,e,this.length);for(var n=e,o=1,i=this[t+--n];n>0&&(o*=256);)i+=this[t+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},u.prototype.readInt8=function(t,e){return e||I(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||I(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){e||I(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return e||I(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||I(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||I(t,4,this.length),o.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||I(t,4,this.length),o.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||I(t,8,this.length),o.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||I(t,8,this.length),o.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||B(this,t,e,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[e]=255&t;++i<r&&(o*=256);)this[e+i]=t/o&255;return e+r},u.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||B(this,t,e,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+r},u.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):U(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):U(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):Y(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):Y(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);B(this,t,e,r,o-1,-o)}var i=0,s=1,a=0;for(this[e]=255&t;++i<r&&(s*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);B(this,t,e,r,o-1,-o)}var i=r-1,s=1,a=0;for(this[e+i]=255&t;--i>=0&&(s*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):U(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):U(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):Y(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):Y(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,r){return D(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return D(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return j(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return j(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var o,i=n-r;if(this===t&&r<e&&e<n)for(o=i-1;o>=0;--o)t[o+e]=this[o+r];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+i),e);return i},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{var s=u.isBuffer(t)?t:x(new u(t,n).toString()),a=s.length;for(i=0;i<r-e;++i)this[i+e]=s[i%a]}return this};var k=/[^+\/0-9A-Za-z-_]/g;function F(t){return t<16?"0"+t.toString(16):t.toString(16)}function x(t,e){var r;e=e||1/0;for(var n=t.length,o=null,i=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(e-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((e-=1)<0)break;i.push(r)}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function $(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(k,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function G(t,e,r,n){for(var o=0;o<n&&!(o+r>=e.length||o>=t.length);++o)e[o+r]=t[o];return o}}).call(this,r(2))},function(t,e,r){"use strict";e.byteLength=function(t){var e=c(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=c(t),s=n[0],a=n[1],u=new i(function(t,e,r){return 3*(e+r)/4-r}(0,s,a)),f=0,h=a>0?s-4:s;for(r=0;r<h;r+=4)e=o[t.charCodeAt(r)]<<18|o[t.charCodeAt(r+1)]<<12|o[t.charCodeAt(r+2)]<<6|o[t.charCodeAt(r+3)],u[f++]=e>>16&255,u[f++]=e>>8&255,u[f++]=255&e;2===a&&(e=o[t.charCodeAt(r)]<<2|o[t.charCodeAt(r+1)]>>4,u[f++]=255&e);1===a&&(e=o[t.charCodeAt(r)]<<10|o[t.charCodeAt(r+1)]<<4|o[t.charCodeAt(r+2)]>>2,u[f++]=e>>8&255,u[f++]=255&e);return u},e.fromByteArray=function(t){for(var e,r=t.length,o=r%3,i=[],s=0,a=r-o;s<a;s+=16383)i.push(f(t,s,s+16383>a?a:s+16383));1===o?(e=t[r-1],i.push(n[e>>2]+n[e<<4&63]+"==")):2===o&&(e=(t[r-2]<<8)+t[r-1],i.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return i.join("")};for(var n=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)n[a]=s[a],o[s.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function f(t,e,r){for(var o,i,s=[],a=e;a<r;a+=3)o=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,o){var i,s,a=8*o-n-1,u=(1<<a)-1,c=u>>1,f=-7,h=r?o-1:0,l=r?-1:1,p=t[e+h];for(h+=l,i=p&(1<<-f)-1,p>>=-f,f+=a;f>0;i=256*i+t[e+h],h+=l,f-=8);for(s=i&(1<<-f)-1,i>>=-f,f+=n;f>0;s=256*s+t[e+h],h+=l,f-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,n),i-=c}return(p?-1:1)*s*Math.pow(2,i-n)},e.write=function(t,e,r,n,o,i){var s,a,u,c=8*i-o-1,f=(1<<c)-1,h=f>>1,l=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,d=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=f):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+h>=1?l/u:l*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=f?(a=0,s=f):s+h>=1?(a=(e*u-1)*Math.pow(2,o),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,o),s=0));o>=8;t[r+p]=255&a,p+=d,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;t[r+p]=255&s,p+=d,s/=256,c-=8);t[r+p-d]|=128*y}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n="undefined"!=typeof window&&void 0!==window.document,o="object"===("undefined"==typeof self?"undefined":r(self))&&self.constructor&&"DedicatedWorkerGlobalScope"===self.constructor.name,i=void 0!==t&&null!=t.versions&&null!=t.versions.node;e.isBrowser=n,e.isWebWorker=o,e.isNode=i}).call(this,r(1))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_CREATE_ORDER_PAYLOAD={purchase_units:[{reference_id:"store_mobile_world_order_1234",description:"Mobile World Store order-1234",amount:{currency:"USD",details:{subtotal:"1.09",shipping:"0.02",tax:"0.33"},total:"1.44"},payee:{email:"seller@example.com"},items:[{name:"NeoPhone",sku:"sku03",price:"0.54",currency:"USD",quantity:"1"},{name:"Fitness Watch",sku:"sku04",price:"0.55",currency:"USD",quantity:"1"}],shipping_address:{line1:"2211 N First Street",line2:"Building 17",city:"San Jose",country_code:"US",postal_code:"95131",state:"CA",phone:"(123) 456-7890"},shipping_method:"United Postal Service",partner_fee_details:{receiver:{email:"partner@example.com"},amount:{value:"0.01",currency:"USD"}},payment_linked_group:1,custom:"custom_value_2388",invoice_number:"invoice_number_2388",payment_descriptor:"Payment Mobile World"}],redirect_urls:{return_url:"https://example.com/return",cancel_url:"https://example.com/cancel"}},e.DEFAULT_UPDATE_ORDER_PAYLOAD=[{op:"replace",path:"/purchase_units/@reference_id=='default'/description",value:"this is fine"}]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0),o=r(22);e.create=async function(t,e,r){const i=e&&Object.keys(e).length>0?e:o.DEFAULT_CREATE_ORDER_PAYLOAD,s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/checkout/orders`,s)},e.update=async function(t,e,r,i){const s=r&&Object.keys(r).length>0?r:o.DEFAULT_UPDATE_ORDER_PAYLOAD,a={method:"PATCH",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...i},body:JSON.stringify(s)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/checkout/orders/${e}`,a)},e.get=async function(t,e,r){const o={method:"GET",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r}};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/checkout/orders/${e}`,o)},e.authorize=async function(t,e,r,o){const i=r,s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...o},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/checkout/orders/${e}/authorize`,s)},e.capture=async function(t,e,r,o){const i=r,s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...o},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/checkout/orders/${e}/capture`,s)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_CREATE_ORDER_PAYLOAD={intent:"AUTHORIZE",purchase_units:[{description:"This is cool",amount:{currency_code:"USD",value:"100.00"}}]},e.DEFAULT_UPDATE_ORDER_PAYLOAD=[{op:"replace",path:"/purchase_units/@reference_id=='default'/description",value:"this is fine"}]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(24),o=r(0);e.createToken=async function(t,e,r){const i=e&&Object.keys(e).length>0?e:n.DEFAULT_CREATE_BILLING_AGREEMENT_TOKEN_PAYLOAD,s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r},body:JSON.stringify(i)};return await fetch(`${o.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/billing-agreements/agreement-tokens`,s)},e.create=async function(t,e,r){const n={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r},body:JSON.stringify({token_id:e})};return await fetch(`${o.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/billing-agreements/agreements`,n)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_CREATE_BILLING_AGREEMENT_TOKEN_PAYLOAD={description:"Billing Agreement",shipping_address:{line1:"1350 North First Street",city:"San Jose",state:"CA",postal_code:"95112",country_code:"US",recipient_name:"John Doe"},payer:{payment_method:"PAYPAL"},plan:{type:"MERCHANT_INITIATED_BILLING",merchant_preferences:{return_url:"https://example.com/return",cancel_url:"https://example.com/cancel",notify_url:"https://example.com/notify",accepted_pymt_type:"INSTANT",skip_shipping_address:!1,immutable_shipping_address:!0}}},e.DEFAULT_CREATE_PAYMENT_WITH_BILLING_AGREEMENT_PAYLOAD={intent:"sale",payer:{payment_method:"PAYPAL",funding_instruments:[{billing:{billing_agreement_id:"B-50V812176H0783741"}}]},transactions:[{amount:{currency:"USD",total:"1.00"},description:"Payment transaction.",custom:"Payment custom field.",note_to_payee:"Note to payee field.",invoice_number:"GDAGDS5754YEK",item_list:{items:[{sku:"skuitemNo1",name:"ItemNo1",description:"The item description.",quantity:"1",price:"1.00",currency:"USD",tax:"0",url:"https://example.com/"}]}}],redirect_urls:{return_url:"https://example.com/return",cancel_url:"https://example.com/cancel"}}},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=n(r(26));e.v1=o;const i=n(r(28));e.v2=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0),o=r(27);e.create=async function(t,e,r){const i=e&&Object.keys(e).length>0?e:o.DEFAULT_PAYMENT_CREATE_PAYLOAD,s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/payments/payment`,s)},e.capture=async function(t,e,r,i){const s=r&&Object.keys(r).length>0?r:o.DEFAULT_PAYMENT_CAPTURE_PAYLOAD,a={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...i},body:JSON.stringify(s)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/payments/authorizations/${e}/capture`,a)},e.update=async function(t,e,r,i){const s=r&&Object.keys(r).length>0?r:o.DEFAULT_PAYMENT_UPDATE_PAYLOAD,a={method:"PATCH",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...i},body:JSON.stringify(s)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/payments/payment/${e}`,a)},e.referenceTransaction=async function(t,e,r,i){const s=r&&Object.keys(r).length>0?r:o.DEFAULT_REFERENCE_TRANSACTION_PAYLOAD;s.payer.funding_instruments[0].billing.billing_agreement_id=e;const a={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...i},body:JSON.stringify(s)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/payments/payment`,a)},e.authorizeOrder=async function(t,e,r,o){const i=r,s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...o},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/payments/orders/${e}/authorize`,s)},e.captureOrder=async function(t,e,r,o){const i=r,s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...o},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/payments/orders/${e}/capture`,s)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_PAYMENT_CREATE_PAYLOAD={intent:"sale",payer:{payment_method:"paypal"},transactions:[{amount:{total:"30.11",currency:"USD",details:{subtotal:"30.00",tax:"0.07",shipping:"0.03",handling_fee:"1.00",shipping_discount:"-1.00",insurance:"0.01"}},description:"The payment transaction description.",custom:"EBAY_EMS_90048630024435",invoice_number:"48787589673",payment_options:{allowed_payment_method:"INSTANT_FUNDING_SOURCE"},soft_descriptor:"ECHI5786786",item_list:{items:[{name:"hat",description:"Brown hat.",quantity:"5",price:"3",tax:"0.01",sku:"1",currency:"USD"},{name:"handbag",description:"Black handbag.",quantity:"1",price:"15",tax:"0.02",sku:"product34",currency:"USD"}],shipping_address:{recipient_name:"Brian Robinson",line1:"4th Floor",line2:"Unit #34",city:"San Jose",country_code:"US",postal_code:"95131",phone:"011862212345678",state:"CA"}}}],note_to_payer:"Contact us for any questions on your order.",redirect_urls:{return_url:"https://example.com/return",cancel_url:"https://example.com/cancel"}},e.DEFAULT_PAYMENT_CAPTURE_PAYLOAD={amount:{value:"1.99",currency_code:"USD"},final_capture:!0},e.DEFAULT_PAYMENT_UPDATE_PAYLOAD=[{op:"replace",path:"/transactions/0/amount",value:{total:"35.11",currency:"USD",details:{subtotal:"30.00",tax:"0.07",shipping:"5.03",handling_fee:"1.00",shipping_discount:"-1.00",insurance:"0.01"}}},{op:"add",path:"/transactions/0/item_list/shipping_address",value:{recipient_name:"Anna Gruneberg",line1:"101 main st",city:"Beverly Hills",postal_code:"90210",country_code:"US",state:"CA"}}],e.DEFAULT_REFERENCE_TRANSACTION_PAYLOAD={intent:"sale",payer:{payment_method:"PAYPAL",funding_instruments:[{billing:{billing_agreement_id:"B-50V812176H0783741"}}]},transactions:[{amount:{currency:"USD",total:"1.00"}}]}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0);e.capture=async function(t,e,r,o){const i=r||{},s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...o},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/payments/authorizations/${e}/capture`,s)},e.refund=async function(t,e,r,o){const i=r||{},s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...o},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/payments/captures/${e}/refund`,s)},e.cancel=async function(t,e,r){const o={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r}};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/payments/authorizations/${e}/void`,o)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0);e.list=async function(t){const e={method:"GET",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json"}};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/notifications/webhooks`,e)},e.listEventTypes=async function(t){const e={method:"GET",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json"}};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/notifications/webhooks-event-types`,e)},e.create=async function(t,e,r){const o={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({url:e,event_types:r})};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/notifications/webhooks`,o)},e.remove=async function(t,e){const r={method:"DELETE",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json"}};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/notifications/webhooks/${e}`,r)},e.verify=async function(t,e,r,o){const i={transmission_id:r["paypal-transmission-id"],transmission_time:r["paypal-transmission-time"],cert_url:r["paypal-cert-url"],auth_algo:r["paypal-auth-algo"],transmission_sig:r["paypal-transmission-sig"],webhook_id:e,webhook_event:o},s={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json"},body:JSON.stringify(i)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/notifications/verify-webhook-signature`,s)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(4);let o;e.accessTokenMiddleware=async function(t,e,r){return(!o||o.expires_at>Date.now())&&(o=await n.createAccessToken()),t.paypalAccessToken=o,r()}},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=n(r(32));e.v1=o;const i=n(r(33));e.v2=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0);e.trackById=async function(t,e,r){const o={method:"GET",headers:{Authorization:`Bearer ${t.access_token}`,...r}};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/customer/partners/${n.CONFIG.get("PAYPAL_ACCOUNT_ID")}/merchant-integrations?tracking_id=${e}`,o)}},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const o=n(r(34));e.Customer=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0),o=r(35),i=r(3);e.create=async function(t,e,r,s){const a=r&&Object.keys(r).length>0?r:o.DEFAULT_CUSTOMER_CREATE_PAYLOAD;a.tracking_id=e||i.randomString();const u={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...s},body:JSON.stringify(a)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v2/customer/partner-referrals`,u)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(36);e.DEFAULT_CUSTOMER_CREATE_PAYLOAD={operations:[{operation:"API_INTEGRATION",api_integration_preference:{rest_api_integration:{integration_method:"PAYPAL",integration_type:"THIRD_PARTY",third_party_details:{features:["PAYMENT","REFUND"]}}}}],products:[n.ProductName.EXPRESS_CHECKOUT],legal_consents:[{type:"SHARE_DATA_CONSENT",granted:!0}]}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.EXPRESS_CHECKOUT="EXPRESS_CHECKOUT",t.PPPLUS="PPPLUS",t.WEBSITE_PAYMENT_PRO="WEBSITE_PAYMENT_PRO",t.PPCP="PPCP"}(e.ProductName||(e.ProductName={}))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0);e.evaluateDevice=async function(t,e,r){const o={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r},body:JSON.stringify({device_id:e})};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/risk/device-evaluate`,o)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(0);e.batch=async function(t,e,r){const o=e,i={method:"POST",headers:{Authorization:`Bearer ${t.access_token}`,"Content-Type":"application/json",...r},body:JSON.stringify(o)};return await fetch(`${n.CONFIG.get("PAYPAL_REST_HOSTNAME")}/v1/shipping/trackers-batch`,i)}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,